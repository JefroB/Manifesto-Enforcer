{
  "timestamp": "2025-08-14T01:02:46.486Z",
  "summary": {
    "totalTests": 1116,
    "passedTests": 1114,
    "failedTests": 2,
    "skippedTests": 0,
    "duration": 47000
  },
  "jest": {
    "success": false,
    "numTotalTests": 1031,
    "numPassedTests": 1029,
    "numFailedTests": 2,
    "numPendingTests": 0,
    "testResults": [
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "Extension Constants and Utilities Tests",
              "Type definitions"
            ],
            "duration": 15,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Extension Constants and Utilities Tests Type definitions should have consistent enum values",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should have consistent enum values"
          },
          {
            "ancestorTitles": [
              "Extension Constants and Utilities Tests",
              "Type definitions"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Extension Constants and Utilities Tests Type definitions should have all required severity levels",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should have all required severity levels"
          },
          {
            "ancestorTitles": [
              "Extension Constants and Utilities Tests",
              "Type definitions"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Extension Constants and Utilities Tests Type definitions should have all required categories",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should have all required categories"
          },
          {
            "ancestorTitles": [
              "Extension Constants and Utilities Tests",
              "Type definitions"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Extension Constants and Utilities Tests Type definitions should have all required agent providers",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should have all required agent providers"
          }
        ],
        "endTime": 1755133308749,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\__tests__\\extension.comprehensive.test.ts",
        "startTime": 1755133304965,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "Sample Unit Tests",
              "Basic Math Operations"
            ],
            "duration": 7,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Sample Unit Tests Basic Math Operations should add two numbers correctly",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should add two numbers correctly"
          },
          {
            "ancestorTitles": [
              "Sample Unit Tests",
              "Basic Math Operations"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Sample Unit Tests Basic Math Operations should multiply numbers correctly",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should multiply numbers correctly"
          },
          {
            "ancestorTitles": [
              "Sample Unit Tests",
              "Basic Math Operations"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Sample Unit Tests Basic Math Operations should handle division",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle division"
          },
          {
            "ancestorTitles": [
              "Sample Unit Tests",
              "String Operations"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Sample Unit Tests String Operations should concatenate strings",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should concatenate strings"
          },
          {
            "ancestorTitles": [
              "Sample Unit Tests",
              "String Operations"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Sample Unit Tests String Operations should check string length",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should check string length"
          },
          {
            "ancestorTitles": [
              "Sample Unit Tests",
              "Array Operations"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Sample Unit Tests Array Operations should create arrays",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should create arrays"
          },
          {
            "ancestorTitles": [
              "Sample Unit Tests",
              "Array Operations"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Sample Unit Tests Array Operations should filter arrays",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should filter arrays"
          },
          {
            "ancestorTitles": [
              "Sample Unit Tests",
              "Object Operations"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Sample Unit Tests Object Operations should create objects",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should create objects"
          },
          {
            "ancestorTitles": [
              "Sample Unit Tests",
              "Object Operations"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Sample Unit Tests Object Operations should handle object properties",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle object properties"
          }
        ],
        "endTime": 1755133308769,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\__tests__\\sample.unit.test.ts",
        "startTime": 1755133304949,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "Extension Types and Constants Tests",
              "RuleSeverity enum"
            ],
            "duration": 16,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Extension Types and Constants Tests RuleSeverity enum should have all required severity levels",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should have all required severity levels"
          },
          {
            "ancestorTitles": [
              "Extension Types and Constants Tests",
              "RuleCategory enum"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Extension Types and Constants Tests RuleCategory enum should have all required categories",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 8,
            "retryReasons": [],
            "status": "passed",
            "title": "should have all required categories"
          },
          {
            "ancestorTitles": [
              "Extension Types and Constants Tests",
              "AgentProvider enum"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Extension Types and Constants Tests AgentProvider enum should have all required agent providers",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 7,
            "retryReasons": [],
            "status": "passed",
            "title": "should have all required agent providers"
          }
        ],
        "endTime": 1755133308811,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\__tests__\\extension.coverage.test.ts",
        "startTime": 1755133304933,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "PiggieFileManager",
              "writeCodeToFile"
            ],
            "duration": 9,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieFileManager writeCodeToFile should write code to file successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should write code to file successfully"
          },
          {
            "ancestorTitles": [
              "PiggieFileManager",
              "writeCodeToFile"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieFileManager writeCodeToFile should write new content to file without backup when file does not exist",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should write new content to file without backup when file does not exist"
          },
          {
            "ancestorTitles": [
              "PiggieFileManager",
              "writeCodeToFile"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieFileManager writeCodeToFile should validate file operation input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should validate file operation input"
          },
          {
            "ancestorTitles": [
              "PiggieFileManager",
              "writeCodeToFile"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieFileManager writeCodeToFile should handle file system errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle file system errors gracefully"
          },
          {
            "ancestorTitles": [
              "PiggieFileManager",
              "writeCodeToFile"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieFileManager writeCodeToFile should complete within performance requirements",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should complete within performance requirements"
          },
          {
            "ancestorTitles": [
              "PiggieFileManager",
              "readProjectStructure"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieFileManager readProjectStructure should read project structure successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should read project structure successfully"
          },
          {
            "ancestorTitles": [
              "PiggieFileManager",
              "readProjectStructure"
            ],
            "duration": 28,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieFileManager readProjectStructure should handle permission errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle permission errors gracefully"
          },
          {
            "ancestorTitles": [
              "PiggieFileManager",
              "readProjectStructure"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieFileManager readProjectStructure should validate directory path input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should validate directory path input"
          },
          {
            "ancestorTitles": [
              "PiggieFileManager",
              "validateCodeQuality"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieFileManager validateCodeQuality should validate code against manifesto rules",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should validate code against manifesto rules"
          },
          {
            "ancestorTitles": [
              "PiggieFileManager",
              "validateCodeQuality"
            ],
            "duration": 5,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieFileManager validateCodeQuality should detect manifesto violations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect manifesto violations"
          },
          {
            "ancestorTitles": [
              "PiggieFileManager",
              "validateCodeQuality"
            ],
            "duration": 46,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieFileManager validateCodeQuality should handle empty or invalid code",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty or invalid code"
          },
          {
            "ancestorTitles": [
              "PiggieFileManager",
              "security and error handling"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieFileManager security and error handling should prevent path traversal attacks",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should prevent path traversal attacks"
          },
          {
            "ancestorTitles": [
              "PiggieFileManager",
              "security and error handling"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieFileManager security and error handling should sanitize file content for security",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should sanitize file content for security"
          },
          {
            "ancestorTitles": [
              "PiggieFileManager",
              "security and error handling"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieFileManager security and error handling should handle concurrent file operations safely",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle concurrent file operations safely"
          },
          {
            "ancestorTitles": [
              "PiggieFileManager",
              "security and error handling"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieFileManager security and error handling should dispose resources properly",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should dispose resources properly"
          },
          {
            "ancestorTitles": [
              "PiggieFileManager",
              "performance monitoring"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieFileManager performance monitoring should track operation performance",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should track operation performance"
          }
        ],
        "endTime": 1755133308981,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\file-operations\\__tests__\\PiggieFileManager.test.ts",
        "startTime": 1755133304961,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "PiggieStatusBar",
              "initialization"
            ],
            "duration": 34,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieStatusBar initialization should create status bar item successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should create status bar item successfully"
          },
          {
            "ancestorTitles": [
              "PiggieStatusBar",
              "initialization"
            ],
            "duration": 19,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieStatusBar initialization should handle initialization errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle initialization errors gracefully"
          },
          {
            "ancestorTitles": [
              "PiggieStatusBar",
              "initialization"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieStatusBar initialization should complete initialization within performance requirements",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should complete initialization within performance requirements"
          },
          {
            "ancestorTitles": [
              "PiggieStatusBar",
              "updateManifestoMode"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieStatusBar updateManifestoMode should update status bar for manifesto mode ON",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should update status bar for manifesto mode ON"
          },
          {
            "ancestorTitles": [
              "PiggieStatusBar",
              "updateManifestoMode"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieStatusBar updateManifestoMode should update status bar for manifesto mode OFF",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should update status bar for manifesto mode OFF"
          },
          {
            "ancestorTitles": [
              "PiggieStatusBar",
              "updateManifestoMode"
            ],
            "duration": 45,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieStatusBar updateManifestoMode should handle invalid input gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle invalid input gracefully"
          },
          {
            "ancestorTitles": [
              "PiggieStatusBar",
              "updateActiveAgent"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieStatusBar updateActiveAgent should update status bar with active agent info",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should update status bar with active agent info"
          },
          {
            "ancestorTitles": [
              "PiggieStatusBar",
              "updateActiveAgent"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieStatusBar updateActiveAgent should handle no active agent",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle no active agent"
          },
          {
            "ancestorTitles": [
              "PiggieStatusBar",
              "updateActiveAgent"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieStatusBar updateActiveAgent should validate agent configuration",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should validate agent configuration"
          },
          {
            "ancestorTitles": [
              "PiggieStatusBar",
              "showProgress"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieStatusBar showProgress should show progress indicator",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should show progress indicator"
          },
          {
            "ancestorTitles": [
              "PiggieStatusBar",
              "showProgress"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieStatusBar showProgress should hide progress indicator",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should hide progress indicator"
          },
          {
            "ancestorTitles": [
              "PiggieStatusBar",
              "showProgress"
            ],
            "duration": 155,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieStatusBar showProgress should handle progress timeout",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle progress timeout"
          },
          {
            "ancestorTitles": [
              "PiggieStatusBar",
              "error handling and security"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieStatusBar error handling and security should handle VSCode API errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle VSCode API errors gracefully"
          },
          {
            "ancestorTitles": [
              "PiggieStatusBar",
              "error handling and security"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieStatusBar error handling and security should sanitize tooltip content for security",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should sanitize tooltip content for security"
          },
          {
            "ancestorTitles": [
              "PiggieStatusBar",
              "error handling and security"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieStatusBar error handling and security should dispose resources properly",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should dispose resources properly"
          },
          {
            "ancestorTitles": [
              "PiggieStatusBar",
              "performance monitoring"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieStatusBar performance monitoring should track update performance",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should track update performance"
          },
          {
            "ancestorTitles": [
              "PiggieStatusBar",
              "performance monitoring"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieStatusBar performance monitoring should handle rapid updates efficiently",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle rapid updates efficiently"
          }
        ],
        "endTime": 1755133308987,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\ui\\__tests__\\PiggieStatusBar.test.ts",
        "startTime": 1755133304929,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "GitignoreParser Comprehensive Tests",
              "Constructor and Input Validation"
            ],
            "duration": 9,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GitignoreParser Comprehensive Tests Constructor and Input Validation should create parser with valid workspace root",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should create parser with valid workspace root"
          },
          {
            "ancestorTitles": [
              "GitignoreParser Comprehensive Tests",
              "Constructor and Input Validation"
            ],
            "duration": 43,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GitignoreParser Comprehensive Tests Constructor and Input Validation should validate workspace root input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should validate workspace root input"
          },
          {
            "ancestorTitles": [
              "GitignoreParser Comprehensive Tests",
              "loadGitignore Method"
            ],
            "duration": 26,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GitignoreParser Comprehensive Tests loadGitignore Method should load and parse gitignore file successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should load and parse gitignore file successfully"
          },
          {
            "ancestorTitles": [
              "GitignoreParser Comprehensive Tests",
              "loadGitignore Method"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GitignoreParser Comprehensive Tests loadGitignore Method should handle missing gitignore file gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle missing gitignore file gracefully"
          },
          {
            "ancestorTitles": [
              "GitignoreParser Comprehensive Tests",
              "loadGitignore Method"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GitignoreParser Comprehensive Tests loadGitignore Method should handle file system errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle file system errors gracefully"
          },
          {
            "ancestorTitles": [
              "GitignoreParser Comprehensive Tests",
              "loadGitignore Method"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GitignoreParser Comprehensive Tests loadGitignore Method should handle empty gitignore file",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty gitignore file"
          },
          {
            "ancestorTitles": [
              "GitignoreParser Comprehensive Tests",
              "loadGitignore Method"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GitignoreParser Comprehensive Tests loadGitignore Method should handle gitignore with only comments",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle gitignore with only comments"
          },
          {
            "ancestorTitles": [
              "GitignoreParser Comprehensive Tests",
              "isIgnored Method"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GitignoreParser Comprehensive Tests isIgnored Method should validate input parameters",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should validate input parameters"
          },
          {
            "ancestorTitles": [
              "GitignoreParser Comprehensive Tests",
              "isIgnored Method"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GitignoreParser Comprehensive Tests isIgnored Method should ignore files matching directory patterns",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should ignore files matching directory patterns"
          },
          {
            "ancestorTitles": [
              "GitignoreParser Comprehensive Tests",
              "isIgnored Method"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GitignoreParser Comprehensive Tests isIgnored Method should ignore files matching glob patterns",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should ignore files matching glob patterns"
          },
          {
            "ancestorTitles": [
              "GitignoreParser Comprehensive Tests",
              "isIgnored Method"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GitignoreParser Comprehensive Tests isIgnored Method should handle negation patterns correctly",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle negation patterns correctly"
          },
          {
            "ancestorTitles": [
              "GitignoreParser Comprehensive Tests",
              "isIgnored Method"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GitignoreParser Comprehensive Tests isIgnored Method should not ignore files that do not match patterns",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should not ignore files that do not match patterns"
          },
          {
            "ancestorTitles": [
              "GitignoreParser Comprehensive Tests",
              "isIgnored Method"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GitignoreParser Comprehensive Tests isIgnored Method should handle cross-platform path separators",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle cross-platform path separators"
          },
          {
            "ancestorTitles": [
              "GitignoreParser Comprehensive Tests",
              "isIgnored Method"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GitignoreParser Comprehensive Tests isIgnored Method should handle errors gracefully and default to not ignored",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle errors gracefully and default to not ignored"
          },
          {
            "ancestorTitles": [
              "GitignoreParser Comprehensive Tests",
              "getVSCodeExclusionPattern Method"
            ],
            "duration": 11,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GitignoreParser Comprehensive Tests getVSCodeExclusionPattern Method should return strict exclusion patterns",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 6,
            "retryReasons": [],
            "status": "passed",
            "title": "should return strict exclusion patterns"
          },
          {
            "ancestorTitles": [
              "GitignoreParser Comprehensive Tests",
              "getVSCodeExclusionPattern Method"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GitignoreParser Comprehensive Tests getVSCodeExclusionPattern Method should include AI response loop prevention patterns",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should include AI response loop prevention patterns"
          },
          {
            "ancestorTitles": [
              "GitignoreParser Comprehensive Tests",
              "getVSCodeExclusionPattern Method"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GitignoreParser Comprehensive Tests getVSCodeExclusionPattern Method should include test file exclusions",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should include test file exclusions"
          },
          {
            "ancestorTitles": [
              "GitignoreParser Comprehensive Tests",
              "getVSCodeExclusionPattern Method"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GitignoreParser Comprehensive Tests getVSCodeExclusionPattern Method should return comma-separated pattern string",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should return comma-separated pattern string"
          },
          {
            "ancestorTitles": [
              "GitignoreParser Comprehensive Tests",
              "getVSCodeExclusionPattern Method"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GitignoreParser Comprehensive Tests getVSCodeExclusionPattern Method should handle errors and return fallback pattern",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle errors and return fallback pattern"
          },
          {
            "ancestorTitles": [
              "GitignoreParser Comprehensive Tests",
              "Pattern Parsing and Matching"
            ],
            "duration": 17,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GitignoreParser Comprehensive Tests Pattern Parsing and Matching should parse complex gitignore patterns correctly",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 6,
            "retryReasons": [],
            "status": "passed",
            "title": "should parse complex gitignore patterns correctly"
          },
          {
            "ancestorTitles": [
              "GitignoreParser Comprehensive Tests",
              "Pattern Parsing and Matching"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GitignoreParser Comprehensive Tests Pattern Parsing and Matching should handle edge cases in pattern matching",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle edge cases in pattern matching"
          },
          {
            "ancestorTitles": [
              "GitignoreParser Comprehensive Tests",
              "Performance and Error Handling"
            ],
            "duration": 357,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GitignoreParser Comprehensive Tests Performance and Error Handling should complete within performance requirements",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should complete within performance requirements"
          },
          {
            "ancestorTitles": [
              "GitignoreParser Comprehensive Tests",
              "Performance and Error Handling"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GitignoreParser Comprehensive Tests Performance and Error Handling should handle concurrent operations safely",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle concurrent operations safely"
          },
          {
            "ancestorTitles": [
              "GitignoreParser Comprehensive Tests",
              "Performance and Error Handling"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GitignoreParser Comprehensive Tests Performance and Error Handling should maintain state consistency after errors",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should maintain state consistency after errors"
          }
        ],
        "endTime": 1755133309001,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\core\\__tests__\\GitignoreParser.comprehensive.test.ts",
        "startTime": 1755133304935,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "TddCodeGenerationCommand",
              "New Project Workflow"
            ],
            "duration": 93,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "TddCodeGenerationCommand New Project Workflow should prompt for tech stack and test framework selection - UI Tests ON",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 8,
            "retryReasons": [],
            "status": "passed",
            "title": "should prompt for tech stack and test framework selection - UI Tests ON"
          },
          {
            "ancestorTitles": [
              "TddCodeGenerationCommand",
              "New Project Workflow"
            ],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "TddCodeGenerationCommand New Project Workflow should prompt for tech stack and test framework selection - UI Tests OFF",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 7,
            "retryReasons": [],
            "status": "passed",
            "title": "should prompt for tech stack and test framework selection - UI Tests OFF"
          },
          {
            "ancestorTitles": [
              "TddCodeGenerationCommand",
              "New Project Workflow"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "TddCodeGenerationCommand New Project Workflow should handle user cancellation during tech stack selection",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle user cancellation during tech stack selection"
          },
          {
            "ancestorTitles": [
              "TddCodeGenerationCommand",
              "Existing Project Workflow"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "TddCodeGenerationCommand Existing Project Workflow should detect tech stack and test frameworks - UI Tests ON",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect tech stack and test frameworks - UI Tests ON"
          },
          {
            "ancestorTitles": [
              "TddCodeGenerationCommand",
              "Existing Project Workflow"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "TddCodeGenerationCommand Existing Project Workflow should detect tech stack and test frameworks - UI Tests OFF",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect tech stack and test frameworks - UI Tests OFF"
          },
          {
            "ancestorTitles": [
              "TddCodeGenerationCommand",
              "Core TDD Loop for UI Component"
            ],
            "duration": 5,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "TddCodeGenerationCommand Core TDD Loop for UI Component should generate unit and UI tests when UI Tests ON",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should generate unit and UI tests when UI Tests ON"
          },
          {
            "ancestorTitles": [
              "TddCodeGenerationCommand",
              "Core TDD Loop for UI Component"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "TddCodeGenerationCommand Core TDD Loop for UI Component should generate only unit tests when UI Tests OFF",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should generate only unit tests when UI Tests OFF"
          }
        ],
        "endTime": 1755133309047,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\commands\\__tests__\\TddCodeGenerationCommand.test.ts",
        "startTime": 1755133305015,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Basic Property Getters and Setters"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Basic Property Getters and Setters should get and set manifesto rules",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should get and set manifesto rules"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Basic Property Getters and Setters"
            ],
            "duration": 26,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Basic Property Getters and Setters should get and set manifesto mode",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should get and set manifesto mode"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Basic Property Getters and Setters"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Basic Property Getters and Setters should get and set current agent",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should get and set current agent"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Basic Property Getters and Setters"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Basic Property Getters and Setters should get and set current model",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should get and set current model"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Basic Property Getters and Setters"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Basic Property Getters and Setters should get and set agent mode",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should get and set agent mode"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Basic Property Getters and Setters"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Basic Property Getters and Setters should get and set auto mode",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should get and set auto mode"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Basic Property Getters and Setters"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Basic Property Getters and Setters should get and set font size",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should get and set font size"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Basic Property Getters and Setters"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Basic Property Getters and Setters should get and set show emojis",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should get and set show emojis"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Codebase Properties"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Codebase Properties should get and set codebase index",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should get and set codebase index"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Codebase Properties"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Codebase Properties should get and set codebase indexed status",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should get and set codebase indexed status"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Codebase Properties"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Codebase Properties should get and set codebase index timestamp",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should get and set codebase index timestamp"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Conversation History"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Conversation History should add message to conversation history",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should add message to conversation history"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Conversation History"
            ],
            "duration": 104,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Conversation History should handle invalid message gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle invalid message gracefully"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Conversation History"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Conversation History should limit conversation history length",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should limit conversation history length"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Conversation History"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Conversation History should get conversation context",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should get conversation context"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Conversation History"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Conversation History should clear conversation history",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should clear conversation history"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "State Summary"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests State Summary should get state summary",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 8,
            "retryReasons": [],
            "status": "passed",
            "title": "should get state summary"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Mode Setters"
            ],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Mode Setters should set font size with validation",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should set font size with validation"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Mode Setters"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Mode Setters should reject invalid font size",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should reject invalid font size"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Indexing Stats"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Indexing Stats should get indexing stats",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 6,
            "retryReasons": [],
            "status": "passed",
            "title": "should get indexing stats"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Indexing Stats"
            ],
            "duration": 6,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Indexing Stats should detect health issues in indexing stats",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect health issues in indexing stats"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Extension Context"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Extension Context should get extension context",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should get extension context"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Glossary Storage Methods"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Glossary Storage Methods should load glossary from storage successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should load glossary from storage successfully"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Glossary Storage Methods"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Glossary Storage Methods should return false when no glossary in storage",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return false when no glossary in storage"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Glossary Storage Methods"
            ],
            "duration": 6,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Glossary Storage Methods should handle glossary load errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle glossary load errors gracefully"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Glossary Storage Methods"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Glossary Storage Methods should save glossary to storage successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should save glossary to storage successfully"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Glossary Storage Methods"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Glossary Storage Methods should handle glossary save errors",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle glossary save errors"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Backup and Directory Methods"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Backup and Directory Methods should return null when piggie directory manager not initialized",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return null when piggie directory manager not initialized"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Backup and Directory Methods"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Backup and Directory Methods should handle backup creation errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle backup creation errors gracefully"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Backup and Directory Methods"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Backup and Directory Methods should get piggie directory path",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should get piggie directory path"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Backup and Directory Methods"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Backup and Directory Methods should return null when piggie directory manager not available",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return null when piggie directory manager not available"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Indexing Statistics"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Indexing Statistics should return healthy status for normal file count",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should return healthy status for normal file count"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Indexing Statistics"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Indexing Statistics should return warning status for high file count",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should return warning status for high file count"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Indexing Statistics"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Indexing Statistics should return error status for very high file count",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should return error status for very high file count"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Disposal"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Disposal should dispose resources successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 6,
            "retryReasons": [],
            "status": "passed",
            "title": "should dispose resources successfully"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "Disposal"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests Disposal should handle disposal errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle disposal errors gracefully"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "TDD State Management"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests TDD State Management should correctly set and get isTddMode state",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should correctly set and get isTddMode state"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "TDD State Management"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests TDD State Management should persist isTddMode state through saveSettings",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should persist isTddMode state through saveSettings"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "TDD State Management"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests TDD State Management should initialize isTddMode from settings",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should initialize isTddMode from settings"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "TDD State Management"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests TDD State Management should handle tech stack and test framework state",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle tech stack and test framework state"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "TDD State Management"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests TDD State Management should correctly set and get isUiTddMode state",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should correctly set and get isUiTddMode state"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "TDD State Management"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests TDD State Management should persist isUiTddMode state through saveSettings",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should persist isUiTddMode state through saveSettings"
          },
          {
            "ancestorTitles": [
              "StateManager Unit Tests",
              "TDD State Management"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Unit Tests TDD State Management should handle UI test framework state",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle UI test framework state"
          }
        ],
        "endTime": 1755133309179,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\core\\__tests__\\StateManager.unit.test.ts",
        "startTime": 1755133308821,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 Singleton Pattern - BULLETPROOF"
            ],
            "duration": 76,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 Singleton Pattern - BULLETPROOF should create singleton instance with valid context",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should create singleton instance with valid context"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 Singleton Pattern - BULLETPROOF"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 Singleton Pattern - BULLETPROOF should return same instance on subsequent calls",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return same instance on subsequent calls"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 Singleton Pattern - BULLETPROOF"
            ],
            "duration": 63,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 Singleton Pattern - BULLETPROOF should throw error when no context provided for first call",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error when no context provided for first call"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 Singleton Pattern - BULLETPROOF"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 Singleton Pattern - BULLETPROOF should handle context validation",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle context validation"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 Configuration Loading - COMPREHENSIVE"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 Configuration Loading - COMPREHENSIVE should load default configuration values",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 6,
            "retryReasons": [],
            "status": "passed",
            "title": "should load default configuration values"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 Configuration Loading - COMPREHENSIVE"
            ],
            "duration": 42,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 Configuration Loading - COMPREHENSIVE should handle missing configuration gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle missing configuration gracefully"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 Configuration Loading - COMPREHENSIVE"
            ],
            "duration": 13,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 Configuration Loading - COMPREHENSIVE should load manifesto rules from storage",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should load manifesto rules from storage"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 Configuration Loading - COMPREHENSIVE"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 Configuration Loading - COMPREHENSIVE should handle corrupted manifesto rules gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle corrupted manifesto rules gracefully"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 State Updates - BULLETPROOF"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 State Updates - BULLETPROOF should update manifesto mode",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should update manifesto mode"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 State Updates - BULLETPROOF"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 State Updates - BULLETPROOF should update current agent",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should update current agent"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 State Updates - BULLETPROOF"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 State Updates - BULLETPROOF should update current model",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should update current model"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 State Updates - BULLETPROOF"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 State Updates - BULLETPROOF should update auto mode",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should update auto mode"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 State Updates - BULLETPROOF"
            ],
            "duration": 5,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 State Updates - BULLETPROOF should update font size",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should update font size"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 State Updates - BULLETPROOF"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 State Updates - BULLETPROOF should update show emojis",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should update show emojis"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 State Updates - BULLETPROOF"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 State Updates - BULLETPROOF should handle configuration update failures gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle configuration update failures gracefully"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 Manifesto Rules Management - COMPREHENSIVE"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 Manifesto Rules Management - COMPREHENSIVE should manage manifesto rules via property setter",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should manage manifesto rules via property setter"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 Manifesto Rules Management - COMPREHENSIVE"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 Manifesto Rules Management - COMPREHENSIVE should clear manifesto rules",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should clear manifesto rules"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 Project Glossary Management - BULLETPROOF"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 Project Glossary Management - BULLETPROOF should manage glossary via property setter",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should manage glossary via property setter"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 Project Glossary Management - BULLETPROOF"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 Project Glossary Management - BULLETPROOF should clear glossary",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should clear glossary"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 Codebase Index Management - COMPREHENSIVE"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 Codebase Index Management - COMPREHENSIVE should manage codebase index via property setter",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should manage codebase index via property setter"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 Codebase Index Management - COMPREHENSIVE"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 Codebase Index Management - COMPREHENSIVE should clear codebase index",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should clear codebase index"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 Codebase Index Management - COMPREHENSIVE"
            ],
            "duration": 7,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 Codebase Index Management - COMPREHENSIVE should get indexing stats",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should get indexing stats"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 File Lifecycle Management - BULLETPROOF"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 File Lifecycle Management - BULLETPROOF should handle file lifecycle successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle file lifecycle successfully"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 File Lifecycle Management - BULLETPROOF"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 File Lifecycle Management - BULLETPROOF should handle file lifecycle failures gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle file lifecycle failures gracefully"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 File Lifecycle Management - BULLETPROOF"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 File Lifecycle Management - BULLETPROOF should handle missing FileLifecycleManager",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle missing FileLifecycleManager"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 Edge Cases - NO STONE UNTURNED"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 Edge Cases - NO STONE UNTURNED should handle concurrent state updates",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle concurrent state updates"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 Edge Cases - NO STONE UNTURNED"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 Edge Cases - NO STONE UNTURNED should handle memory pressure scenarios",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle memory pressure scenarios"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 Edge Cases - NO STONE UNTURNED"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 Edge Cases - NO STONE UNTURNED should handle workspace configuration changes",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle workspace configuration changes"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 Edge Cases - NO STONE UNTURNED"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 Edge Cases - NO STONE UNTURNED should handle invalid manifesto rule operations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle invalid manifesto rule operations"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT StateManager Tests - Industry Leading Quality",
              "🎯 Edge Cases - NO STONE UNTURNED"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT StateManager Tests - Industry Leading Quality 🎯 Edge Cases - NO STONE UNTURNED should handle storage corruption gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle storage corruption gracefully"
          }
        ],
        "endTime": 1755133309184,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\core\\__tests__\\StateManager.goat.test.ts",
        "startTime": 1755133308760,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "ManifestoPreCommitHook",
              "validateBeforeCommit"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoPreCommitHook validateBeforeCommit should return true when all validations pass",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return true when all validations pass"
          },
          {
            "ancestorTitles": [
              "ManifestoPreCommitHook",
              "validateBeforeCommit"
            ],
            "duration": 30,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoPreCommitHook validateBeforeCommit should throw error when workspace validation fails",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error when workspace validation fails"
          },
          {
            "ancestorTitles": [
              "ManifestoPreCommitHook",
              "validateBeforeCommit"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoPreCommitHook validateBeforeCommit should log error and rethrow when validation fails",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should log error and rethrow when validation fails"
          },
          {
            "ancestorTitles": [
              "ManifestoPreCommitHook",
              "runAllTests"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoPreCommitHook runAllTests should return test results when all tests pass",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return test results when all tests pass"
          },
          {
            "ancestorTitles": [
              "ManifestoPreCommitHook",
              "runAllTests"
            ],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoPreCommitHook runAllTests should throw error when tests fail",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error when tests fail"
          },
          {
            "ancestorTitles": [
              "ManifestoPreCommitHook",
              "runAllTests"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoPreCommitHook runAllTests should throw error when test execution fails",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error when test execution fails"
          },
          {
            "ancestorTitles": [
              "ManifestoPreCommitHook",
              "checkCodeCoverage"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoPreCommitHook checkCodeCoverage should return coverage results when coverage meets threshold",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return coverage results when coverage meets threshold"
          },
          {
            "ancestorTitles": [
              "ManifestoPreCommitHook",
              "checkCodeCoverage"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoPreCommitHook checkCodeCoverage should throw error when coverage below threshold",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error when coverage below threshold"
          },
          {
            "ancestorTitles": [
              "ManifestoPreCommitHook",
              "validateWorkspace"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoPreCommitHook validateWorkspace should pass when workspace folders exist",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should pass when workspace folders exist"
          },
          {
            "ancestorTitles": [
              "ManifestoPreCommitHook",
              "validateWorkspace"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoPreCommitHook validateWorkspace should throw error when no workspace folders",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error when no workspace folders"
          },
          {
            "ancestorTitles": [
              "ManifestoPreCommitHook",
              "getWorkspaceRoot"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoPreCommitHook getWorkspaceRoot should return workspace root path",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return workspace root path"
          },
          {
            "ancestorTitles": [
              "ManifestoPreCommitHook",
              "getWorkspaceRoot"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoPreCommitHook getWorkspaceRoot should throw error when no workspace folders",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error when no workspace folders"
          },
          {
            "ancestorTitles": [
              "ManifestoPreCommitHook",
              "parseTestResults"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoPreCommitHook parseTestResults should parse test results correctly",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should parse test results correctly"
          },
          {
            "ancestorTitles": [
              "ManifestoPreCommitHook",
              "parseTestResults"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoPreCommitHook parseTestResults should return default values for unparseable output",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return default values for unparseable output"
          },
          {
            "ancestorTitles": [
              "ManifestoPreCommitHook",
              "parseCoverageResults"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoPreCommitHook parseCoverageResults should parse coverage percentage correctly",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should parse coverage percentage correctly"
          },
          {
            "ancestorTitles": [
              "ManifestoPreCommitHook",
              "parseCoverageResults"
            ],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoPreCommitHook parseCoverageResults should return 0 for unparseable output",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return 0 for unparseable output"
          },
          {
            "ancestorTitles": [
              "ManifestoPreCommitHook",
              "createTimeoutPromise"
            ],
            "duration": 119,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoPreCommitHook createTimeoutPromise should create timeout promise that rejects",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should create timeout promise that rejects"
          }
        ],
        "endTime": 1755133309256,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\core\\__tests__\\ManifestoPreCommitHook.comprehensive.test.ts",
        "startTime": 1755133309025,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "AgentManager",
              "registerAgent"
            ],
            "duration": 8,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AgentManager registerAgent should register agent successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should register agent successfully"
          },
          {
            "ancestorTitles": [
              "AgentManager",
              "registerAgent"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AgentManager registerAgent should register agent even when validation fails (graceful fallback)",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should register agent even when validation fails (graceful fallback)"
          },
          {
            "ancestorTitles": [
              "AgentManager",
              "registerAgent"
            ],
            "duration": 12,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AgentManager registerAgent should handle registration errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle registration errors gracefully"
          },
          {
            "ancestorTitles": [
              "AgentManager",
              "sendMessage"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AgentManager sendMessage should send message to active agent",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should send message to active agent"
          },
          {
            "ancestorTitles": [
              "AgentManager",
              "sendMessage"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AgentManager sendMessage should handle missing active agent",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle missing active agent"
          },
          {
            "ancestorTitles": [
              "AgentManager",
              "sendMessage"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AgentManager sendMessage should validate message input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should validate message input"
          },
          {
            "ancestorTitles": [
              "AgentManager",
              "sendMessage"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AgentManager sendMessage should complete message processing",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should complete message processing"
          },
          {
            "ancestorTitles": [
              "AgentManager",
              "switchAgent"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AgentManager switchAgent should switch between registered agents",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should switch between registered agents"
          },
          {
            "ancestorTitles": [
              "AgentManager",
              "switchAgent"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AgentManager switchAgent should handle invalid agent switching",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle invalid agent switching"
          },
          {
            "ancestorTitles": [
              "AgentManager",
              "getAgentCapabilities"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AgentManager getAgentCapabilities should return agent capabilities",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should return agent capabilities"
          },
          {
            "ancestorTitles": [
              "AgentManager",
              "getAgentCapabilities"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AgentManager getAgentCapabilities should handle missing agent gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle missing agent gracefully"
          },
          {
            "ancestorTitles": [
              "AgentManager",
              "error handling and security"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AgentManager error handling and security should encrypt sensitive configuration data",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should encrypt sensitive configuration data"
          },
          {
            "ancestorTitles": [
              "AgentManager",
              "error handling and security"
            ],
            "duration": 114,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AgentManager error handling and security should handle network timeouts gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle network timeouts gracefully"
          }
        ],
        "endTime": 1755133309280,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\agents\\__tests__\\AgentManager.test.ts",
        "startTime": 1755133309052,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "AuggieAdapter Coverage Tests",
              "getCapabilities Method (Lines 173-207)"
            ],
            "duration": 14,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Coverage Tests getCapabilities Method (Lines 173-207) should return correct capabilities object",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return correct capabilities object"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Coverage Tests",
              "dispose Method (Lines 173-207)"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Coverage Tests dispose Method (Lines 173-207) should dispose resources successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should dispose resources successfully"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Coverage Tests",
              "dispose Method (Lines 173-207)"
            ],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Coverage Tests dispose Method (Lines 173-207) should clear sensitive configuration during disposal",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should clear sensitive configuration during disposal"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Coverage Tests",
              "dispose Method (Lines 173-207)"
            ],
            "duration": 13,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Coverage Tests dispose Method (Lines 173-207) should handle disposal errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle disposal errors gracefully"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Coverage Tests",
              "No Extension Found Logging (Line 253)"
            ],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Coverage Tests No Extension Found Logging (Line 253) should log when no extension found with any known ID",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should log when no extension found with any known ID"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Coverage Tests",
              "Extension Activation Failure (Lines 120-144)"
            ],
            "duration": 113,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Coverage Tests Extension Activation Failure (Lines 120-144) should handle extension activation timeout with auth prompt",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle extension activation timeout with auth prompt"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Coverage Tests",
              "Extension Activation Failure (Lines 120-144)"
            ],
            "duration": 5,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Coverage Tests Extension Activation Failure (Lines 120-144) should handle \"Learn More\" action and open documentation",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle \"Learn More\" action and open documentation"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Coverage Tests",
              "Extension Activation Failure (Lines 120-144)"
            ],
            "duration": 5,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Coverage Tests Extension Activation Failure (Lines 120-144) should fallback to augment.openPanel when workbench command fails",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should fallback to augment.openPanel when workbench command fails"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Coverage Tests",
              "Method 3 and Method 4 Fallback Scenarios (Lines 274-330)"
            ],
            "duration": 12,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Coverage Tests Method 3 and Method 4 Fallback Scenarios (Lines 274-330) should use Method 3 (UI fallback) when commands succeed",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should use Method 3 (UI fallback) when commands succeed"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Coverage Tests",
              "Method 3 and Method 4 Fallback Scenarios (Lines 274-330)"
            ],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Coverage Tests Method 3 and Method 4 Fallback Scenarios (Lines 274-330) should use Method 4 (clipboard) when all commands fail",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should use Method 4 (clipboard) when all commands fail"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Coverage Tests",
              "Method 3 and Method 4 Fallback Scenarios (Lines 274-330)"
            ],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Coverage Tests Method 3 and Method 4 Fallback Scenarios (Lines 274-330) should handle \"Open Augment Code\" action in clipboard fallback",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle \"Open Augment Code\" action in clipboard fallback"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Coverage Tests",
              "Method 3 and Method 4 Fallback Scenarios (Lines 274-330)"
            ],
            "duration": 5,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Coverage Tests Method 3 and Method 4 Fallback Scenarios (Lines 274-330) should fallback to augment.openPanel when workbench command fails in clipboard action",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should fallback to augment.openPanel when workbench command fails in clipboard action"
          }
        ],
        "endTime": 1755133309274,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\agents\\adapters\\__tests__\\AuggieAdapter.coverage.test.ts",
        "startTime": 1755133309007,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "AuggieAdapter Comprehensive Tests",
              "Initialization and Validation"
            ],
            "duration": 64,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Comprehensive Tests Initialization and Validation should initialize with correct configuration",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should initialize with correct configuration"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Comprehensive Tests",
              "Initialization and Validation"
            ],
            "duration": 12,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Comprehensive Tests Initialization and Validation should validate connection successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should validate connection successfully"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Comprehensive Tests",
              "Initialization and Validation"
            ],
            "duration": 78,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Comprehensive Tests Initialization and Validation should handle missing extension gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle missing extension gracefully"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Comprehensive Tests",
              "Initialization and Validation"
            ],
            "duration": 10,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Comprehensive Tests Initialization and Validation should handle inactive extension",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle inactive extension"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Comprehensive Tests",
              "Initialization and Validation"
            ],
            "duration": 20,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Comprehensive Tests Initialization and Validation should throw error for invalid config",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error for invalid config"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Comprehensive Tests",
              "Message Processing"
            ],
            "duration": 11,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Comprehensive Tests Message Processing should send simple message successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should send simple message successfully"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Comprehensive Tests",
              "Message Processing"
            ],
            "duration": 11,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Comprehensive Tests Message Processing should handle message with context",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle message with context"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Comprehensive Tests",
              "Message Processing"
            ],
            "duration": 14,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Comprehensive Tests Message Processing should validate message input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should validate message input"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Comprehensive Tests",
              "Message Processing"
            ],
            "duration": 11,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Comprehensive Tests Message Processing should handle extension not available during message sending",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle extension not available during message sending"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Comprehensive Tests",
              "Message Processing"
            ],
            "duration": 522,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Comprehensive Tests Message Processing should handle command execution failures with fallback",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle command execution failures with fallback"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Comprehensive Tests",
              "Message Processing"
            ],
            "duration": 15,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Comprehensive Tests Message Processing should handle clipboard fallback when all commands fail",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle clipboard fallback when all commands fail"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Comprehensive Tests",
              "Message Processing"
            ],
            "duration": 7,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Comprehensive Tests Message Processing should handle clipboard fallback with Open Augment Code action",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle clipboard fallback with Open Augment Code action"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Comprehensive Tests",
              "Message Processing"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Comprehensive Tests Message Processing should measure response time correctly",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should measure response time correctly"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Comprehensive Tests",
              "Message Processing"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Comprehensive Tests Message Processing should generate unique message IDs",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should generate unique message IDs"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Comprehensive Tests",
              "Extension Detection and Initialization"
            ],
            "duration": 9,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Comprehensive Tests Extension Detection and Initialization should try alternative extension IDs when primary not found",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should try alternative extension IDs when primary not found"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Comprehensive Tests",
              "Extension Detection and Initialization"
            ],
            "duration": 6,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Comprehensive Tests Extension Detection and Initialization should handle missing vscode.extensions gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle missing vscode.extensions gracefully"
          },
          {
            "ancestorTitles": [
              "AuggieAdapter Comprehensive Tests",
              "Extension Detection and Initialization"
            ],
            "duration": 5,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AuggieAdapter Comprehensive Tests Extension Detection and Initialization should log extension detection process",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should log extension detection process"
          }
        ],
        "endTime": 1755133309558,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\agents\\adapters\\__tests__\\AuggieAdapter.comprehensive.test.ts",
        "startTime": 1755133304931,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "FileLifecycleManager Comprehensive Tests",
              "Initialization"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "FileLifecycleManager Comprehensive Tests Initialization should initialize with workspace root",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should initialize with workspace root"
          },
          {
            "ancestorTitles": [
              "FileLifecycleManager Comprehensive Tests",
              "Initialization"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "FileLifecycleManager Comprehensive Tests Initialization should handle invalid workspace root gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle invalid workspace root gracefully"
          },
          {
            "ancestorTitles": [
              "FileLifecycleManager Comprehensive Tests",
              "Glossary File Lifecycle"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "FileLifecycleManager Comprehensive Tests Glossary File Lifecycle should create new glossary file",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should create new glossary file"
          },
          {
            "ancestorTitles": [
              "FileLifecycleManager Comprehensive Tests",
              "Glossary File Lifecycle"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "FileLifecycleManager Comprehensive Tests Glossary File Lifecycle should append to existing glossary file",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should append to existing glossary file"
          },
          {
            "ancestorTitles": [
              "FileLifecycleManager Comprehensive Tests",
              "Glossary File Lifecycle"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "FileLifecycleManager Comprehensive Tests Glossary File Lifecycle should replace existing glossary file with confirmation",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should replace existing glossary file with confirmation"
          },
          {
            "ancestorTitles": [
              "FileLifecycleManager Comprehensive Tests",
              "Manifesto File Lifecycle"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "FileLifecycleManager Comprehensive Tests Manifesto File Lifecycle should handle manifesto creation with heavy warnings",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle manifesto creation with heavy warnings"
          },
          {
            "ancestorTitles": [
              "FileLifecycleManager Comprehensive Tests",
              "Manifesto File Lifecycle"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "FileLifecycleManager Comprehensive Tests Manifesto File Lifecycle should require heavy confirmation for manifesto replacement",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should require heavy confirmation for manifesto replacement"
          },
          {
            "ancestorTitles": [
              "FileLifecycleManager Comprehensive Tests",
              "Manifesto File Lifecycle"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "FileLifecycleManager Comprehensive Tests Manifesto File Lifecycle should cancel manifesto replacement if user refuses",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should cancel manifesto replacement if user refuses"
          },
          {
            "ancestorTitles": [
              "FileLifecycleManager Comprehensive Tests",
              "Analysis File Lifecycle"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "FileLifecycleManager Comprehensive Tests Analysis File Lifecycle should handle security analysis file creation",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle security analysis file creation"
          },
          {
            "ancestorTitles": [
              "FileLifecycleManager Comprehensive Tests",
              "Analysis File Lifecycle"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "FileLifecycleManager Comprehensive Tests Analysis File Lifecycle should handle code review file creation",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle code review file creation"
          },
          {
            "ancestorTitles": [
              "FileLifecycleManager Comprehensive Tests",
              "Input Validation"
            ],
            "duration": 37,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "FileLifecycleManager Comprehensive Tests Input Validation should validate handleFileLifecycle inputs",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 6,
            "retryReasons": [],
            "status": "passed",
            "title": "should validate handleFileLifecycle inputs"
          },
          {
            "ancestorTitles": [
              "FileLifecycleManager Comprehensive Tests",
              "Error Handling"
            ],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "FileLifecycleManager Comprehensive Tests Error Handling should handle file system errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle file system errors gracefully"
          },
          {
            "ancestorTitles": [
              "FileLifecycleManager Comprehensive Tests",
              "Error Handling"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "FileLifecycleManager Comprehensive Tests Error Handling should handle backup creation with existing files",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle backup creation with existing files"
          },
          {
            "ancestorTitles": [
              "FileLifecycleManager Comprehensive Tests",
              "Advanced Manifesto Lifecycle Coverage"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "FileLifecycleManager Comprehensive Tests Advanced Manifesto Lifecycle Coverage should handle manifesto replacement with full consent flow",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 6,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle manifesto replacement with full consent flow"
          },
          {
            "ancestorTitles": [
              "FileLifecycleManager Comprehensive Tests",
              "Advanced Manifesto Lifecycle Coverage"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "FileLifecycleManager Comprehensive Tests Advanced Manifesto Lifecycle Coverage should handle manifesto append action",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle manifesto append action"
          },
          {
            "ancestorTitles": [
              "FileLifecycleManager Comprehensive Tests",
              "Advanced Manifesto Lifecycle Coverage"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "FileLifecycleManager Comprehensive Tests Advanced Manifesto Lifecycle Coverage should handle manifesto update action",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle manifesto update action"
          },
          {
            "ancestorTitles": [
              "FileLifecycleManager Comprehensive Tests",
              "Documentation Lifecycle Coverage"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "FileLifecycleManager Comprehensive Tests Documentation Lifecycle Coverage should handle documentation file creation",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle documentation file creation"
          },
          {
            "ancestorTitles": [
              "FileLifecycleManager Comprehensive Tests",
              "Documentation Lifecycle Coverage"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "FileLifecycleManager Comprehensive Tests Documentation Lifecycle Coverage should handle documentation file append",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle documentation file append"
          },
          {
            "ancestorTitles": [
              "FileLifecycleManager Comprehensive Tests",
              "Documentation Lifecycle Coverage"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "FileLifecycleManager Comprehensive Tests Documentation Lifecycle Coverage should handle documentation file update",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle documentation file update"
          },
          {
            "ancestorTitles": [
              "FileLifecycleManager Comprehensive Tests",
              "Analysis File Cleanup Coverage"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "FileLifecycleManager Comprehensive Tests Analysis File Cleanup Coverage should cleanup old security analysis files",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should cleanup old security analysis files"
          },
          {
            "ancestorTitles": [
              "FileLifecycleManager Comprehensive Tests",
              "Analysis File Cleanup Coverage"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "FileLifecycleManager Comprehensive Tests Analysis File Cleanup Coverage should cleanup old code review files",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should cleanup old code review files"
          },
          {
            "ancestorTitles": [
              "FileLifecycleManager Comprehensive Tests",
              "JSON Glossary Merge Coverage"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "FileLifecycleManager Comprehensive Tests JSON Glossary Merge Coverage should handle JSON glossary merge with complex data",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 7,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle JSON glossary merge with complex data"
          },
          {
            "ancestorTitles": [
              "FileLifecycleManager Comprehensive Tests",
              "JSON Glossary Merge Coverage"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "FileLifecycleManager Comprehensive Tests JSON Glossary Merge Coverage should handle JSON parsing errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle JSON parsing errors gracefully"
          },
          {
            "ancestorTitles": [
              "FileLifecycleManager Comprehensive Tests",
              "File System Utilities Coverage"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "FileLifecycleManager Comprehensive Tests File System Utilities Coverage should handle file read errors",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle file read errors"
          },
          {
            "ancestorTitles": [
              "FileLifecycleManager Comprehensive Tests",
              "File System Utilities Coverage"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "FileLifecycleManager Comprehensive Tests File System Utilities Coverage should handle file delete errors",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle file delete errors"
          }
        ],
        "endTime": 1755133309285,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\core\\__tests__\\FileLifecycleManager.comprehensive.test.ts",
        "startTime": 1755133309155,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "ManifestoEngine Comprehensive Tests",
              "Constructor"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine Comprehensive Tests Constructor should initialize with default encryption key",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should initialize with default encryption key"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine Comprehensive Tests",
              "Constructor"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine Comprehensive Tests Constructor should initialize with custom encryption key",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should initialize with custom encryption key"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine Comprehensive Tests",
              "parseManifesto - Input Validation"
            ],
            "duration": 21,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine Comprehensive Tests parseManifesto - Input Validation should throw error for null input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error for null input"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine Comprehensive Tests",
              "parseManifesto - Input Validation"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine Comprehensive Tests parseManifesto - Input Validation should throw error for undefined input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error for undefined input"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine Comprehensive Tests",
              "parseManifesto - Input Validation"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine Comprehensive Tests parseManifesto - Input Validation should throw error for empty string input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error for empty string input"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine Comprehensive Tests",
              "parseManifesto - Input Validation"
            ],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine Comprehensive Tests parseManifesto - Input Validation should throw error for non-string input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error for non-string input"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine Comprehensive Tests",
              "parseManifesto - Rule Parsing"
            ],
            "duration": 7,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine Comprehensive Tests parseManifesto - Rule Parsing should parse actual project manifesto rules",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 15,
            "retryReasons": [],
            "status": "passed",
            "title": "should parse actual project manifesto rules"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine Comprehensive Tests",
              "parseManifesto - Rule Parsing"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine Comprehensive Tests parseManifesto - Rule Parsing should correctly parse AI directive rules as CRITICAL severity",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 11,
            "retryReasons": [],
            "status": "passed",
            "title": "should correctly parse AI directive rules as CRITICAL severity"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine Comprehensive Tests",
              "parseManifesto - Rule Parsing"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine Comprehensive Tests parseManifesto - Rule Parsing should handle manifesto with only one severity level",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle manifesto with only one severity level"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine Comprehensive Tests",
              "parseManifesto - Rule Parsing"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine Comprehensive Tests parseManifesto - Rule Parsing should correctly detect severity from rule text patterns",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 22,
            "retryReasons": [],
            "status": "passed",
            "title": "should correctly detect severity from rule text patterns"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine Comprehensive Tests",
              "parseManifesto - Rule Parsing"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine Comprehensive Tests parseManifesto - Rule Parsing should ignore comments and empty lines",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should ignore comments and empty lines"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine Comprehensive Tests",
              "parseManifesto - Rule Parsing"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine Comprehensive Tests parseManifesto - Rule Parsing should handle malformed manifesto gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle malformed manifesto gracefully"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine Comprehensive Tests",
              "parseManifesto - Rule Parsing"
            ],
            "duration": 5,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine Comprehensive Tests parseManifesto - Rule Parsing should assign correct rule categories using actual manifesto",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 62,
            "retryReasons": [],
            "status": "passed",
            "title": "should assign correct rule categories using actual manifesto"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine Comprehensive Tests",
              "validateCompliance - Input Validation"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine Comprehensive Tests validateCompliance - Input Validation should throw error for null code input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error for null code input"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine Comprehensive Tests",
              "validateCompliance - Input Validation"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine Comprehensive Tests validateCompliance - Input Validation should throw error for undefined code input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error for undefined code input"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine Comprehensive Tests",
              "validateCompliance - Input Validation"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine Comprehensive Tests validateCompliance - Input Validation should throw error for empty code input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error for empty code input"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine Comprehensive Tests",
              "validateCompliance - Input Validation"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine Comprehensive Tests validateCompliance - Input Validation should handle empty rules array",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty rules array"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine Comprehensive Tests",
              "validateCompliance - Rule Checking"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine Comprehensive Tests validateCompliance - Rule Checking should detect JSDoc violations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect JSDoc violations"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine Comprehensive Tests",
              "validateCompliance - Rule Checking"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine Comprehensive Tests validateCompliance - Rule Checking should detect console.log violations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect console.log violations"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine Comprehensive Tests",
              "validateCompliance - Rule Checking"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine Comprehensive Tests validateCompliance - Rule Checking should detect hardcoded credentials",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect hardcoded credentials"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine Comprehensive Tests",
              "validateCompliance - Rule Checking"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine Comprehensive Tests validateCompliance - Rule Checking should detect missing error handling in async functions",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect missing error handling in async functions"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine Comprehensive Tests",
              "validateCompliance - Rule Checking"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine Comprehensive Tests validateCompliance - Rule Checking should pass validation for compliant code",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should pass validation for compliant code"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine Comprehensive Tests",
              "Performance and Metrics"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine Comprehensive Tests Performance and Metrics should complete parsing within performance requirements",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should complete parsing within performance requirements"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine Comprehensive Tests",
              "Performance and Metrics"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine Comprehensive Tests Performance and Metrics should handle concurrent parsing operations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 11,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle concurrent parsing operations"
          }
        ],
        "endTime": 1755133309516,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\core\\__tests__\\ManifestoEngine.comprehensive.test.ts",
        "startTime": 1755133309380,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Initialization"
            ],
            "duration": 9,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Initialization should create diagnostic collection on initialization",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should create diagnostic collection on initialization"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Initialization"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Initialization should register document event listeners",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should register document event listeners"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Initialization"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Initialization should use provided StateManager instance",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should use provided StateManager instance"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Document Analysis"
            ],
            "duration": 146,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Document Analysis should detect innerHTML usage (XSS vulnerability)",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect innerHTML usage (XSS vulnerability)"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Document Analysis"
            ],
            "duration": 5,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Document Analysis should detect eval() usage (code injection risk)",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect eval() usage (code injection risk)"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Document Analysis"
            ],
            "duration": 14,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Document Analysis should detect console.log in production code",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect console.log in production code"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Document Analysis"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Document Analysis should skip console.log in test files",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should skip console.log in test files"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Document Analysis"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Document Analysis should handle documents with no violations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle documents with no violations"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "File Type Filtering"
            ],
            "duration": 11,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests File Type Filtering should analyze TypeScript files",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should analyze TypeScript files"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "File Type Filtering"
            ],
            "duration": 5,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests File Type Filtering should analyze JavaScript files",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should analyze JavaScript files"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "File Type Filtering"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests File Type Filtering should skip markdown files",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "should skip markdown files"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Error Handling"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Error Handling should handle malformed TypeScript gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle malformed TypeScript gracefully"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Error Handling"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Error Handling should handle empty documents",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty documents"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Resource Management"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Resource Management should dispose diagnostic collection on dispose",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should dispose diagnostic collection on dispose"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Resource Management"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Resource Management should clear diagnostics using clearDiagnostics method",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should clear diagnostics using clearDiagnostics method"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Document Event Handling"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Document Event Handling should handle document save events",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle document save events"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Document Event Handling"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Document Event Handling should handle document open events",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle document open events"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Document Event Handling"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Document Event Handling should handle document change events with debouncing",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle document change events with debouncing"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Advanced Violation Detection"
            ],
            "duration": 13,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Advanced Violation Detection should detect hardcoded credentials in property assignments",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect hardcoded credentials in property assignments"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Advanced Violation Detection"
            ],
            "duration": 7,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Advanced Violation Detection should detect hardcoded credentials in variable declarations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect hardcoded credentials in variable declarations"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Advanced Violation Detection"
            ],
            "duration": 5,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Advanced Violation Detection should detect missing JSDoc on exported functions",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect missing JSDoc on exported functions"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Advanced Violation Detection"
            ],
            "duration": 7,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Advanced Violation Detection should detect async functions without error handling",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect async functions without error handling"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Advanced Violation Detection"
            ],
            "duration": 13,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Advanced Violation Detection should detect functions that are too long",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect functions that are too long"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Advanced Violation Detection"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Advanced Violation Detection should handle AST parsing errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle AST parsing errors gracefully"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Advanced Violation Detection"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Advanced Violation Detection should test getDiagnostics method",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should test getDiagnostics method"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Advanced Violation Detection"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Advanced Violation Detection should test getDiagnostics with no diagnostics",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should test getDiagnostics with no diagnostics"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Helper Methods Coverage"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Helper Methods Coverage should test async function with try-catch (should not trigger violation)",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should test async function with try-catch (should not trigger violation)"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Helper Methods Coverage"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Helper Methods Coverage should test function with JSDoc (should not trigger violation)",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should test function with JSDoc (should not trigger violation)"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Helper Methods Coverage"
            ],
            "duration": 11,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Helper Methods Coverage should test private methods (should not trigger JSDoc violation)",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should test private methods (should not trigger JSDoc violation)"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Helper Methods Coverage"
            ],
            "duration": 8,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Helper Methods Coverage should test exported arrow functions",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should test exported arrow functions"
          },
          {
            "ancestorTitles": [
              "ManifestoDiagnosticsProvider Comprehensive Tests",
              "Helper Methods Coverage"
            ],
            "duration": 14,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoDiagnosticsProvider Comprehensive Tests Helper Methods Coverage should test credential detection with various patterns",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should test credential detection with various patterns"
          }
        ],
        "endTime": 1755133309527,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\diagnostics\\__tests__\\ManifestoDiagnosticsProvider.comprehensive.test.ts",
        "startTime": 1755133304933,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "Agent Adapters Coverage Tests",
              "LocalAgent"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Agent Adapters Coverage Tests LocalAgent should create and initialize successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should create and initialize successfully"
          },
          {
            "ancestorTitles": [
              "Agent Adapters Coverage Tests",
              "LocalAgent"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Agent Adapters Coverage Tests LocalAgent should validate connection",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should validate connection"
          },
          {
            "ancestorTitles": [
              "Agent Adapters Coverage Tests",
              "LocalAgent"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Agent Adapters Coverage Tests LocalAgent should send message successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should send message successfully"
          },
          {
            "ancestorTitles": [
              "Agent Adapters Coverage Tests",
              "LocalAgent"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Agent Adapters Coverage Tests LocalAgent should handle invalid message input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle invalid message input"
          },
          {
            "ancestorTitles": [
              "Agent Adapters Coverage Tests",
              "LocalAgent"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Agent Adapters Coverage Tests LocalAgent should dispose successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "should dispose successfully"
          },
          {
            "ancestorTitles": [
              "Agent Adapters Coverage Tests",
              "LocalAgent"
            ],
            "duration": 17,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Agent Adapters Coverage Tests LocalAgent should handle invalid config",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle invalid config"
          },
          {
            "ancestorTitles": [
              "Agent Adapters Coverage Tests",
              "AmazonQAdapter"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Agent Adapters Coverage Tests AmazonQAdapter should create and initialize successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should create and initialize successfully"
          },
          {
            "ancestorTitles": [
              "Agent Adapters Coverage Tests",
              "AmazonQAdapter"
            ],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Agent Adapters Coverage Tests AmazonQAdapter should validate connection",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should validate connection"
          },
          {
            "ancestorTitles": [
              "Agent Adapters Coverage Tests",
              "AmazonQAdapter"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Agent Adapters Coverage Tests AmazonQAdapter should send message",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should send message"
          },
          {
            "ancestorTitles": [
              "Agent Adapters Coverage Tests",
              "AmazonQAdapter"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Agent Adapters Coverage Tests AmazonQAdapter should handle invalid message",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle invalid message"
          },
          {
            "ancestorTitles": [
              "Agent Adapters Coverage Tests",
              "AmazonQAdapter"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Agent Adapters Coverage Tests AmazonQAdapter should dispose successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "should dispose successfully"
          },
          {
            "ancestorTitles": [
              "Agent Adapters Coverage Tests",
              "ClineAdapter"
            ],
            "duration": 7,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Agent Adapters Coverage Tests ClineAdapter should create and initialize successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should create and initialize successfully"
          },
          {
            "ancestorTitles": [
              "Agent Adapters Coverage Tests",
              "ClineAdapter"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Agent Adapters Coverage Tests ClineAdapter should validate connection",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should validate connection"
          },
          {
            "ancestorTitles": [
              "Agent Adapters Coverage Tests",
              "ClineAdapter"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Agent Adapters Coverage Tests ClineAdapter should send message",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should send message"
          },
          {
            "ancestorTitles": [
              "Agent Adapters Coverage Tests",
              "ClineAdapter"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Agent Adapters Coverage Tests ClineAdapter should handle invalid message",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle invalid message"
          },
          {
            "ancestorTitles": [
              "Agent Adapters Coverage Tests",
              "ClineAdapter"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Agent Adapters Coverage Tests ClineAdapter should dispose successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "should dispose successfully"
          },
          {
            "ancestorTitles": [
              "Agent Adapters Coverage Tests",
              "Error Scenarios"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Agent Adapters Coverage Tests Error Scenarios should handle extension not found",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle extension not found"
          },
          {
            "ancestorTitles": [
              "Agent Adapters Coverage Tests",
              "Error Scenarios"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Agent Adapters Coverage Tests Error Scenarios should handle command execution failures",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle command execution failures"
          }
        ],
        "endTime": 1755133309658,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\agents\\adapters\\__tests__\\adapters.coverage.test.ts",
        "startTime": 1755133309533,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "OllamaAdapter Coverage Tests",
              "Basic Functionality"
            ],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "OllamaAdapter Coverage Tests Basic Functionality should create adapter successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should create adapter successfully"
          },
          {
            "ancestorTitles": [
              "OllamaAdapter Coverage Tests",
              "Basic Functionality"
            ],
            "duration": 59,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "OllamaAdapter Coverage Tests Basic Functionality should validate connection",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should validate connection"
          },
          {
            "ancestorTitles": [
              "OllamaAdapter Coverage Tests",
              "Basic Functionality"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "OllamaAdapter Coverage Tests Basic Functionality should send message",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should send message"
          },
          {
            "ancestorTitles": [
              "OllamaAdapter Coverage Tests",
              "Basic Functionality"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "OllamaAdapter Coverage Tests Basic Functionality should handle empty message",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty message"
          },
          {
            "ancestorTitles": [
              "OllamaAdapter Coverage Tests",
              "Basic Functionality"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "OllamaAdapter Coverage Tests Basic Functionality should dispose successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "should dispose successfully"
          },
          {
            "ancestorTitles": [
              "OllamaAdapter Coverage Tests",
              "Error Handling"
            ],
            "duration": 11,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "OllamaAdapter Coverage Tests Error Handling should handle invalid config",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle invalid config"
          },
          {
            "ancestorTitles": [
              "OllamaAdapter Coverage Tests",
              "Error Handling"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "OllamaAdapter Coverage Tests Error Handling should handle null message",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle null message"
          },
          {
            "ancestorTitles": [
              "OllamaAdapter Coverage Tests",
              "Error Handling"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "OllamaAdapter Coverage Tests Error Handling should handle undefined message",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle undefined message"
          },
          {
            "ancestorTitles": [
              "OllamaAdapter Coverage Tests",
              "Configuration"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "OllamaAdapter Coverage Tests Configuration should return config copy",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should return config copy"
          },
          {
            "ancestorTitles": [
              "OllamaAdapter Coverage Tests",
              "Configuration"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "OllamaAdapter Coverage Tests Configuration should preserve original config",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should preserve original config"
          },
          {
            "ancestorTitles": [
              "OllamaAdapter Coverage Tests",
              "Message Processing"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "OllamaAdapter Coverage Tests Message Processing should handle long messages",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle long messages"
          },
          {
            "ancestorTitles": [
              "OllamaAdapter Coverage Tests",
              "Message Processing"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "OllamaAdapter Coverage Tests Message Processing should handle special characters",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle special characters"
          },
          {
            "ancestorTitles": [
              "OllamaAdapter Coverage Tests",
              "Message Processing"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "OllamaAdapter Coverage Tests Message Processing should generate unique message IDs",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should generate unique message IDs"
          },
          {
            "ancestorTitles": [
              "OllamaAdapter Coverage Tests",
              "Message Processing"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "OllamaAdapter Coverage Tests Message Processing should include timestamps",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should include timestamps"
          },
          {
            "ancestorTitles": [
              "OllamaAdapter Coverage Tests",
              "Multiple Operations"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "OllamaAdapter Coverage Tests Multiple Operations should handle multiple dispose calls",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle multiple dispose calls"
          },
          {
            "ancestorTitles": [
              "OllamaAdapter Coverage Tests",
              "Multiple Operations"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "OllamaAdapter Coverage Tests Multiple Operations should handle concurrent messages",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 7,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle concurrent messages"
          }
        ],
        "endTime": 1755133310222,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\agents\\adapters\\__tests__\\OllamaAdapter.coverage.test.ts",
        "startTime": 1755133310074,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "CodeGraph Comprehensive Tests",
              "Constructor and Input Validation"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeGraph Comprehensive Tests Constructor and Input Validation should create CodeGraph instance successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should create CodeGraph instance successfully"
          },
          {
            "ancestorTitles": [
              "CodeGraph Comprehensive Tests",
              "Constructor and Input Validation"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeGraph Comprehensive Tests Constructor and Input Validation should initialize with empty state",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should initialize with empty state"
          },
          {
            "ancestorTitles": [
              "CodeGraph Comprehensive Tests",
              "buildGraph Method"
            ],
            "duration": 8,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeGraph Comprehensive Tests buildGraph Method should build graph successfully with valid workspace",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should build graph successfully with valid workspace"
          },
          {
            "ancestorTitles": [
              "CodeGraph Comprehensive Tests",
              "buildGraph Method"
            ],
            "duration": 17,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeGraph Comprehensive Tests buildGraph Method should handle missing workspace folder gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle missing workspace folder gracefully"
          },
          {
            "ancestorTitles": [
              "CodeGraph Comprehensive Tests",
              "buildGraph Method"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeGraph Comprehensive Tests buildGraph Method should handle file processing errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle file processing errors gracefully"
          },
          {
            "ancestorTitles": [
              "CodeGraph Comprehensive Tests",
              "buildGraph Method"
            ],
            "duration": 5,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeGraph Comprehensive Tests buildGraph Method should process multiple files correctly",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should process multiple files correctly"
          },
          {
            "ancestorTitles": [
              "CodeGraph Comprehensive Tests",
              "buildGraph Method"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeGraph Comprehensive Tests buildGraph Method should handle empty symbol results",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty symbol results"
          },
          {
            "ancestorTitles": [
              "CodeGraph Comprehensive Tests",
              "findReferences Method"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeGraph Comprehensive Tests findReferences Method should validate input parameters",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should validate input parameters"
          },
          {
            "ancestorTitles": [
              "CodeGraph Comprehensive Tests",
              "findReferences Method"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeGraph Comprehensive Tests findReferences Method should find symbols by exact name match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should find symbols by exact name match"
          },
          {
            "ancestorTitles": [
              "CodeGraph Comprehensive Tests",
              "findReferences Method"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeGraph Comprehensive Tests findReferences Method should find symbols by partial name match (case insensitive)",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should find symbols by partial name match (case insensitive)"
          },
          {
            "ancestorTitles": [
              "CodeGraph Comprehensive Tests",
              "findReferences Method"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeGraph Comprehensive Tests findReferences Method should return empty array for non-existent symbols",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return empty array for non-existent symbols"
          },
          {
            "ancestorTitles": [
              "CodeGraph Comprehensive Tests",
              "findReferences Method"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeGraph Comprehensive Tests findReferences Method should handle special characters in search",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle special characters in search"
          },
          {
            "ancestorTitles": [
              "CodeGraph Comprehensive Tests",
              "analyzeImpact Method"
            ],
            "duration": 6,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeGraph Comprehensive Tests analyzeImpact Method should validate input parameters",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should validate input parameters"
          },
          {
            "ancestorTitles": [
              "CodeGraph Comprehensive Tests",
              "analyzeImpact Method"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeGraph Comprehensive Tests analyzeImpact Method should return low risk for non-existent symbols",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should return low risk for non-existent symbols"
          },
          {
            "ancestorTitles": [
              "CodeGraph Comprehensive Tests",
              "analyzeImpact Method"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeGraph Comprehensive Tests analyzeImpact Method should calculate risk levels correctly",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should calculate risk levels correctly"
          },
          {
            "ancestorTitles": [
              "CodeGraph Comprehensive Tests",
              "analyzeImpact Method"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeGraph Comprehensive Tests analyzeImpact Method should handle file not in graph",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle file not in graph"
          },
          {
            "ancestorTitles": [
              "CodeGraph Comprehensive Tests",
              "getStats Method"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeGraph Comprehensive Tests getStats Method should return correct stats before indexing",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should return correct stats before indexing"
          },
          {
            "ancestorTitles": [
              "CodeGraph Comprehensive Tests",
              "getStats Method"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeGraph Comprehensive Tests getStats Method should return correct stats after indexing",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should return correct stats after indexing"
          },
          {
            "ancestorTitles": [
              "CodeGraph Comprehensive Tests",
              "getStats Method"
            ],
            "duration": 175,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeGraph Comprehensive Tests getStats Method should update timestamp on each build",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should update timestamp on each build"
          },
          {
            "ancestorTitles": [
              "CodeGraph Comprehensive Tests",
              "Error Handling and Edge Cases"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeGraph Comprehensive Tests Error Handling and Edge Cases should handle VSCode command failures gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle VSCode command failures gracefully"
          },
          {
            "ancestorTitles": [
              "CodeGraph Comprehensive Tests",
              "Error Handling and Edge Cases"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeGraph Comprehensive Tests Error Handling and Edge Cases should handle malformed symbol data",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle malformed symbol data"
          },
          {
            "ancestorTitles": [
              "CodeGraph Comprehensive Tests",
              "Error Handling and Edge Cases"
            ],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeGraph Comprehensive Tests Error Handling and Edge Cases should handle concurrent build operations safely",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle concurrent build operations safely"
          },
          {
            "ancestorTitles": [
              "CodeGraph Comprehensive Tests",
              "Error Handling and Edge Cases"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeGraph Comprehensive Tests Error Handling and Edge Cases should maintain state consistency after errors",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should maintain state consistency after errors"
          },
          {
            "ancestorTitles": [
              "CodeGraph Comprehensive Tests",
              "Performance Requirements"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeGraph Comprehensive Tests Performance Requirements should complete indexing within performance requirements",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should complete indexing within performance requirements"
          },
          {
            "ancestorTitles": [
              "CodeGraph Comprehensive Tests",
              "Performance Requirements"
            ],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeGraph Comprehensive Tests Performance Requirements should handle large symbol sets efficiently",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle large symbol sets efficiently"
          }
        ],
        "endTime": 1755133309923,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\indexing\\__tests__\\CodeGraph.comprehensive.test.ts",
        "startTime": 1755133309608,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "Constructor and Initialization"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider Constructor and Initialization should initialize with context and StateManager",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should initialize with context and StateManager"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "Constructor and Initialization"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider Constructor and Initialization should call loadGlossary during initialization",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should call loadGlossary during initialization"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "Constructor and Initialization"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider Constructor and Initialization should handle missing context gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle missing context gracefully"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "refresh"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider refresh should fire tree data change event",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should fire tree data change event"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "refresh"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider refresh should reload glossary on refresh",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should reload glossary on refresh"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "getTreeItem"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider getTreeItem should return the same element passed in",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return the same element passed in"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "getTreeItem"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider getTreeItem should handle different glossary item types",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle different glossary item types"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "getChildren"
            ],
            "duration": 24,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider getChildren should return glossary terms when terms exist",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should return glossary terms when terms exist"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "getChildren"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider getChildren should return empty message when no terms exist",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should return empty message when no terms exist"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "getChildren"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider getChildren should sort terms alphabetically",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should sort terms alphabetically"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "getChildren"
            ],
            "duration": 9,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider getChildren should return empty array for child elements",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return empty array for child elements"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "addTerm"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider addTerm should add new term successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should add new term successfully"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "addTerm"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider addTerm should handle duplicate terms",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle duplicate terms"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "addTerm"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider addTerm should validate input parameters",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should validate input parameters"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "addTerm"
            ],
            "duration": 16,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider addTerm should handle storage errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle storage errors gracefully"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "addTerm"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider addTerm should handle special characters in terms",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle special characters in terms"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "removeTerm"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider removeTerm should remove existing term successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should remove existing term successfully"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "removeTerm"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider removeTerm should handle non-existent term removal",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle non-existent term removal"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "removeTerm"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider removeTerm should validate input parameters",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should validate input parameters"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "incrementUsage"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider incrementUsage should increment usage for existing term",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should increment usage for existing term"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "incrementUsage"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider incrementUsage should handle non-existent term",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle non-existent term"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "GlossaryItem Class"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider GlossaryItem Class should create term item with all properties",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should create term item with all properties"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "GlossaryItem Class"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider GlossaryItem Class should create empty item",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should create empty item"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "GlossaryItem Class"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider GlossaryItem Class should handle long definitions with truncation",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle long definitions with truncation"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "GlossaryItem Class"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider GlossaryItem Class should handle zero usage count",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle zero usage count"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "Integration and Edge Cases"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider Integration and Edge Cases should handle rapid successive operations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle rapid successive operations"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "Integration and Edge Cases"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider Integration and Edge Cases should maintain data consistency across operations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should maintain data consistency across operations"
          },
          {
            "ancestorTitles": [
              "GlossaryTreeDataProvider",
              "Integration and Edge Cases"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryTreeDataProvider Integration and Edge Cases should handle concurrent refresh and operations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle concurrent refresh and operations"
          }
        ],
        "endTime": 1755133309944,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\view\\__tests__\\GlossaryTreeDataProvider.comprehensive.test.ts",
        "startTime": 1755133309783,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "Singleton Pattern"
            ],
            "duration": 13,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests Singleton Pattern should return the same instance when called multiple times",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return the same instance when called multiple times"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "Singleton Pattern"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests Singleton Pattern should handle missing context gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle missing context gracefully"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "Singleton Pattern"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests Singleton Pattern should return existing instance when called without context after initialization",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return existing instance when called without context after initialization"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "Core State Properties"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests Core State Properties should initialize with default values",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should initialize with default values"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "Core State Properties"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests Core State Properties should allow setting manifesto mode",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should allow setting manifesto mode"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "Core State Properties"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests Core State Properties should allow setting current agent",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should allow setting current agent"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "Core State Properties"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests Core State Properties should allow setting codebase indexed status",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should allow setting codebase indexed status"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "Core State Properties"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests Core State Properties should allow setting auto mode",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should allow setting auto mode"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "State Persistence"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests State Persistence should save settings to VSCode configuration",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should save settings to VSCode configuration"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "State Persistence"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests State Persistence should load codebase index from storage",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should load codebase index from storage"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "State Persistence"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests State Persistence should handle missing codebase index gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle missing codebase index gracefully"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "State Persistence"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests State Persistence should save codebase index to storage",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should save codebase index to storage"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "Manifesto Rules Management"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests Manifesto Rules Management should initialize with empty manifesto rules",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should initialize with empty manifesto rules"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "Manifesto Rules Management"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests Manifesto Rules Management should allow setting manifesto rules",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should allow setting manifesto rules"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "Manifesto Rules Management"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests Manifesto Rules Management should handle manifesto rules as property",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle manifesto rules as property"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "Indexing Statistics"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests Indexing Statistics should return indexing stats",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should return indexing stats"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "Indexing Statistics"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests Indexing Statistics should track codebase indexed status",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should track codebase indexed status"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "Error Handling"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests Error Handling should handle settings save errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle settings save errors gracefully"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "Error Handling"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests Error Handling should handle codebase index load errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle codebase index load errors gracefully"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "Error Handling"
            ],
            "duration": 37,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests Error Handling should handle invalid context gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle invalid context gracefully"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "Workspace Integration"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests Workspace Integration should handle missing workspace folders",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle missing workspace folders"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "Workspace Integration"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests Workspace Integration should use workspace path when available",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should use workspace path when available"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "Advanced Features"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests Advanced Features should handle conversation history",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle conversation history"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "Advanced Features"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests Advanced Features should clear conversation history",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should clear conversation history"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "Advanced Features"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests Advanced Features should get conversation context",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should get conversation context"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "Advanced Features"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests Advanced Features should handle agent mode settings",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle agent mode settings"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "Advanced Features"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests Advanced Features should handle auto mode settings",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle auto mode settings"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "Advanced Features"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests Advanced Features should handle font size settings",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle font size settings"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "Advanced Features"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests Advanced Features should provide state summary",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should provide state summary"
          },
          {
            "ancestorTitles": [
              "StateManager Comprehensive Tests",
              "Advanced Features"
            ],
            "duration": 6,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "StateManager Comprehensive Tests Advanced Features should handle reset state",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle reset state"
          }
        ],
        "endTime": 1755133310020,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\core\\__tests__\\StateManager.comprehensive.test.ts",
        "startTime": 1755133309839,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Constructor - BULLETPROOF Validation"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Constructor - BULLETPROOF Validation should create instance with valid workspace root",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should create instance with valid workspace root"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Constructor - BULLETPROOF Validation"
            ],
            "duration": 20,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Constructor - BULLETPROOF Validation should throw error for null workspace root",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error for null workspace root"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Constructor - BULLETPROOF Validation"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Constructor - BULLETPROOF Validation should throw error for undefined workspace root",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error for undefined workspace root"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Constructor - BULLETPROOF Validation"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Constructor - BULLETPROOF Validation should throw error for empty string workspace root",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error for empty string workspace root"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Constructor - BULLETPROOF Validation"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Constructor - BULLETPROOF Validation should throw error for non-string workspace root",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error for non-string workspace root"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Initialize - COMPREHENSIVE Coverage"
            ],
            "duration": 6,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Initialize - COMPREHENSIVE Coverage should initialize successfully when directory exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should initialize successfully when directory exists"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Initialize - COMPREHENSIVE Coverage"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Initialize - COMPREHENSIVE Coverage should create directory when it does not exist",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should create directory when it does not exist"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Initialize - COMPREHENSIVE Coverage"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Initialize - COMPREHENSIVE Coverage should create .gitignore when it does not exist",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should create .gitignore when it does not exist"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Initialize - COMPREHENSIVE Coverage"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Initialize - COMPREHENSIVE Coverage should add .piggie to existing .gitignore",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should add .piggie to existing .gitignore"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Initialize - COMPREHENSIVE Coverage"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Initialize - COMPREHENSIVE Coverage should not duplicate .piggie entry in .gitignore",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should not duplicate .piggie entry in .gitignore"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Initialize - COMPREHENSIVE Coverage"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Initialize - COMPREHENSIVE Coverage should handle directory creation failures gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle directory creation failures gracefully"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Initialize - COMPREHENSIVE Coverage"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Initialize - COMPREHENSIVE Coverage should handle .gitignore write failures gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle .gitignore write failures gracefully"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Path Operations - SECURITY First"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Path Operations - SECURITY First should return correct Piggie directory path",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return correct Piggie directory path"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Path Operations - SECURITY First"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Path Operations - SECURITY First should return correct path for valid filename",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return correct path for valid filename"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Path Operations - SECURITY First"
            ],
            "duration": 6,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Path Operations - SECURITY First should reject path traversal attempts with ..",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should reject path traversal attempts with .."
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Path Operations - SECURITY First"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Path Operations - SECURITY First should reject path traversal attempts with /",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should reject path traversal attempts with /"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Path Operations - SECURITY First"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Path Operations - SECURITY First should reject path traversal attempts with \\",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should reject path traversal attempts with \\"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Path Operations - SECURITY First"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Path Operations - SECURITY First should reject empty filename",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should reject empty filename"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Path Operations - SECURITY First"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Path Operations - SECURITY First should reject null filename",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should reject null filename"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Backup Operations - BULLETPROOF"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Backup Operations - BULLETPROOF should create backup successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should create backup successfully"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Backup Operations - BULLETPROOF"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Backup Operations - BULLETPROOF should handle backup creation with empty content",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle backup creation with empty content"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Backup Operations - BULLETPROOF"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Backup Operations - BULLETPROOF should handle backup creation with null originalPath",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle backup creation with null originalPath"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Backup Operations - BULLETPROOF"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Backup Operations - BULLETPROOF should handle backup creation failures gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle backup creation failures gracefully"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Backup Operations - BULLETPROOF"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Backup Operations - BULLETPROOF should generate unique backup filenames",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should generate unique backup filenames"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Cleanup Operations - COMPREHENSIVE"
            ],
            "duration": 22,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Cleanup Operations - COMPREHENSIVE should cleanup old backups keeping specified number",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should cleanup old backups keeping specified number"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Cleanup Operations - COMPREHENSIVE"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Cleanup Operations - COMPREHENSIVE should handle cleanup when no backups exist",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle cleanup when no backups exist"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Cleanup Operations - COMPREHENSIVE"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Cleanup Operations - COMPREHENSIVE should handle cleanup failures gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle cleanup failures gracefully"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Cleanup Operations - COMPREHENSIVE"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Cleanup Operations - COMPREHENSIVE should handle file deletion failures gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle file deletion failures gracefully"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Cleanup Operations - COMPREHENSIVE"
            ],
            "duration": 5,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Cleanup Operations - COMPREHENSIVE should use default maxBackupsPerFile when not specified",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should use default maxBackupsPerFile when not specified"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Edge Cases - NO STONE UNTURNED"
            ],
            "duration": 5,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Edge Cases - NO STONE UNTURNED should handle concurrent initialization attempts",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle concurrent initialization attempts"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Edge Cases - NO STONE UNTURNED"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Edge Cases - NO STONE UNTURNED should handle very long workspace paths",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle very long workspace paths"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Edge Cases - NO STONE UNTURNED"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Edge Cases - NO STONE UNTURNED should handle special characters in workspace path",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle special characters in workspace path"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality",
              "🎯 Edge Cases - NO STONE UNTURNED"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT PiggieDirectoryManager Tests - Industry Leading Quality 🎯 Edge Cases - NO STONE UNTURNED should handle memory pressure scenarios",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle memory pressure scenarios"
          }
        ],
        "endTime": 1755133309987,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\core\\__tests__\\PiggieDirectoryManager.goat.test.ts",
        "startTime": 1755133309825,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "Extension Simple Coverage Tests"
            ],
            "duration": 402,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Extension Simple Coverage Tests should import extension module without errors",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "should import extension module without errors"
          },
          {
            "ancestorTitles": [
              "Extension Simple Coverage Tests"
            ],
            "duration": 5,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Extension Simple Coverage Tests should handle activation gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle activation gracefully"
          },
          {
            "ancestorTitles": [
              "Extension Simple Coverage Tests"
            ],
            "duration": 9,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Extension Simple Coverage Tests should handle deactivation gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle deactivation gracefully"
          },
          {
            "ancestorTitles": [
              "Extension Simple Coverage Tests"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Extension Simple Coverage Tests should exercise command registration paths",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "should exercise command registration paths"
          },
          {
            "ancestorTitles": [
              "Extension Simple Coverage Tests"
            ],
            "duration": 7,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Extension Simple Coverage Tests should exercise status bar creation paths",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "should exercise status bar creation paths"
          },
          {
            "ancestorTitles": [
              "Extension Simple Coverage Tests"
            ],
            "duration": 6,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Extension Simple Coverage Tests should exercise tree view registration paths",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "should exercise tree view registration paths"
          },
          {
            "ancestorTitles": [
              "Extension Simple Coverage Tests"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Extension Simple Coverage Tests should exercise configuration handling paths",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "should exercise configuration handling paths"
          },
          {
            "ancestorTitles": [
              "Extension Simple Coverage Tests"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Extension Simple Coverage Tests should exercise diagnostics provider registration",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "should exercise diagnostics provider registration"
          },
          {
            "ancestorTitles": [
              "Extension Simple Coverage Tests"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Extension Simple Coverage Tests should handle multiple activation attempts",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle multiple activation attempts"
          },
          {
            "ancestorTitles": [
              "Extension Simple Coverage Tests"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Extension Simple Coverage Tests should handle activation with missing workspace",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle activation with missing workspace"
          },
          {
            "ancestorTitles": [
              "Extension Simple Coverage Tests"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Extension Simple Coverage Tests should handle activation with invalid context",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle activation with invalid context"
          },
          {
            "ancestorTitles": [
              "Extension Simple Coverage Tests"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Extension Simple Coverage Tests should exercise error handling paths",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "should exercise error handling paths"
          }
        ],
        "endTime": 1755133310389,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\__tests__\\extension.simple-coverage.test.ts",
        "startTime": 1755133304955,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "CleanupCommand",
              "command property"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand command property should have correct command name",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should have correct command name"
          },
          {
            "ancestorTitles": [
              "CleanupCommand",
              "canHandle"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand canHandle should handle cleanup slash command",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle cleanup slash command"
          },
          {
            "ancestorTitles": [
              "CleanupCommand",
              "canHandle"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand canHandle should handle natural language cleanup requests",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 6,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle natural language cleanup requests"
          },
          {
            "ancestorTitles": [
              "CleanupCommand",
              "canHandle"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand canHandle should handle case insensitive input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle case insensitive input"
          },
          {
            "ancestorTitles": [
              "CleanupCommand",
              "canHandle"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand canHandle should handle input with extra whitespace",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle input with extra whitespace"
          },
          {
            "ancestorTitles": [
              "CleanupCommand",
              "canHandle"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand canHandle should not handle unrelated commands",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should not handle unrelated commands"
          },
          {
            "ancestorTitles": [
              "CleanupCommand",
              "execute",
              "backup-only cleanup"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand execute backup-only cleanup should perform backup cleanup when backup keyword present",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should perform backup cleanup when backup keyword present"
          },
          {
            "ancestorTitles": [
              "CleanupCommand",
              "execute",
              "backup-only cleanup"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand execute backup-only cleanup should handle backup cleanup with various keywords",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 6,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle backup cleanup with various keywords"
          },
          {
            "ancestorTitles": [
              "CleanupCommand",
              "execute",
              "deep cleanup"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand execute deep cleanup should perform deep cleanup when deep keyword present",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should perform deep cleanup when deep keyword present"
          },
          {
            "ancestorTitles": [
              "CleanupCommand",
              "execute",
              "deep cleanup"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand execute deep cleanup should perform deep cleanup when all keyword present",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should perform deep cleanup when all keyword present"
          },
          {
            "ancestorTitles": [
              "CleanupCommand",
              "execute",
              "standard cleanup"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand execute standard cleanup should perform standard cleanup by default",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should perform standard cleanup by default"
          },
          {
            "ancestorTitles": [
              "CleanupCommand",
              "execute",
              "standard cleanup"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand execute standard cleanup should perform standard cleanup for generic cleanup request",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should perform standard cleanup for generic cleanup request"
          },
          {
            "ancestorTitles": [
              "CleanupCommand",
              "execute",
              "error handling"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand execute error handling should handle execution errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle execution errors gracefully"
          },
          {
            "ancestorTitles": [
              "CleanupCommand",
              "execute",
              "error handling"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand execute error handling should handle non-Error exceptions",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle non-Error exceptions"
          },
          {
            "ancestorTitles": [
              "CleanupCommand",
              "execute",
              "timing and performance"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand execute timing and performance should include execution duration in response",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should include execution duration in response"
          },
          {
            "ancestorTitles": [
              "CleanupCommand",
              "execute",
              "timing and performance"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand execute timing and performance should complete within reasonable time",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should complete within reasonable time"
          },
          {
            "ancestorTitles": [
              "CleanupCommand",
              "cleanupBackups"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand cleanupBackups should handle successful backup cleanup",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle successful backup cleanup"
          },
          {
            "ancestorTitles": [
              "CleanupCommand",
              "cleanupBackups"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand cleanupBackups should handle missing piggie directory gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle missing piggie directory gracefully"
          },
          {
            "ancestorTitles": [
              "CleanupCommand",
              "cleanupBackups"
            ],
            "duration": 13,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand cleanupBackups should handle cleanup errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle cleanup errors gracefully"
          },
          {
            "ancestorTitles": [
              "CleanupCommand",
              "performDeepCleanup"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand performDeepCleanup should perform strategic cleanup",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should perform strategic cleanup"
          },
          {
            "ancestorTitles": [
              "CleanupCommand",
              "performDeepCleanup"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand performDeepCleanup should handle strategic cleanup errors",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle strategic cleanup errors"
          },
          {
            "ancestorTitles": [
              "CleanupCommand",
              "cleanupTempFiles"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand cleanupTempFiles should complete temp files cleanup",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should complete temp files cleanup"
          },
          {
            "ancestorTitles": [
              "CleanupCommand",
              "cleanupTempFiles"
            ],
            "duration": 7,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand cleanupTempFiles should handle temp cleanup errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle temp cleanup errors gracefully"
          },
          {
            "ancestorTitles": [
              "CleanupCommand",
              "cleanupLogFiles"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand cleanupLogFiles should complete log files cleanup",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should complete log files cleanup"
          },
          {
            "ancestorTitles": [
              "CleanupCommand",
              "cleanupLogFiles"
            ],
            "duration": 6,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand cleanupLogFiles should handle log cleanup errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle log cleanup errors gracefully"
          },
          {
            "ancestorTitles": [
              "CleanupCommand",
              "integration scenarios"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand integration scenarios should handle complete cleanup workflow",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle complete cleanup workflow"
          },
          {
            "ancestorTitles": [
              "CleanupCommand",
              "integration scenarios"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CleanupCommand integration scenarios should handle multiple cleanup types in sequence",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle multiple cleanup types in sequence"
          }
        ],
        "endTime": 1755133310279,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\commands\\__tests__\\CleanupCommand.comprehensive.test.ts",
        "startTime": 1755133310170,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "LintCommand Comprehensive Tests",
              "Command Matching"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "LintCommand Comprehensive Tests Command Matching should match lint commands",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should match lint commands"
          },
          {
            "ancestorTitles": [
              "LintCommand Comprehensive Tests",
              "Command Matching"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "LintCommand Comprehensive Tests Command Matching should not match non-lint commands",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should not match non-lint commands"
          },
          {
            "ancestorTitles": [
              "LintCommand Comprehensive Tests",
              "Command Matching"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "LintCommand Comprehensive Tests Command Matching should handle empty or invalid input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty or invalid input"
          },
          {
            "ancestorTitles": [
              "LintCommand Comprehensive Tests",
              "Command Execution"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "LintCommand Comprehensive Tests Command Execution should execute lint command and return analysis",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should execute lint command and return analysis"
          },
          {
            "ancestorTitles": [
              "LintCommand Comprehensive Tests",
              "Command Execution"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "LintCommand Comprehensive Tests Command Execution should handle project linting",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle project linting"
          },
          {
            "ancestorTitles": [
              "LintCommand Comprehensive Tests",
              "Command Execution"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "LintCommand Comprehensive Tests Command Execution should handle specific file linting",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle specific file linting"
          },
          {
            "ancestorTitles": [
              "LintCommand Comprehensive Tests",
              "Command Execution"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "LintCommand Comprehensive Tests Command Execution should handle non-existent file gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle non-existent file gracefully"
          },
          {
            "ancestorTitles": [
              "LintCommand Comprehensive Tests",
              "Issue Detection"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "LintCommand Comprehensive Tests Issue Detection should detect security vulnerabilities",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect security vulnerabilities"
          },
          {
            "ancestorTitles": [
              "LintCommand Comprehensive Tests",
              "Issue Detection"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "LintCommand Comprehensive Tests Issue Detection should detect missing error handling",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect missing error handling"
          },
          {
            "ancestorTitles": [
              "LintCommand Comprehensive Tests",
              "Issue Detection"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "LintCommand Comprehensive Tests Issue Detection should detect missing input validation",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect missing input validation"
          },
          {
            "ancestorTitles": [
              "LintCommand Comprehensive Tests",
              "Issue Detection"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "LintCommand Comprehensive Tests Issue Detection should detect missing JSDoc documentation",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect missing JSDoc documentation"
          },
          {
            "ancestorTitles": [
              "LintCommand Comprehensive Tests",
              "Issue Detection"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "LintCommand Comprehensive Tests Issue Detection should skip non-source files",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should skip non-source files"
          },
          {
            "ancestorTitles": [
              "LintCommand Comprehensive Tests",
              "Error Handling"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "LintCommand Comprehensive Tests Error Handling should handle StateManager errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle StateManager errors gracefully"
          },
          {
            "ancestorTitles": [
              "LintCommand Comprehensive Tests",
              "Error Handling"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "LintCommand Comprehensive Tests Error Handling should handle empty codebase",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty codebase"
          },
          {
            "ancestorTitles": [
              "LintCommand Comprehensive Tests",
              "Error Handling"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "LintCommand Comprehensive Tests Error Handling should handle malformed file content",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle malformed file content"
          },
          {
            "ancestorTitles": [
              "LintCommand Comprehensive Tests",
              "Response Formatting"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "LintCommand Comprehensive Tests Response Formatting should format response with proper structure",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should format response with proper structure"
          },
          {
            "ancestorTitles": [
              "LintCommand Comprehensive Tests",
              "Response Formatting"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "LintCommand Comprehensive Tests Response Formatting should include file-specific details",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should include file-specific details"
          },
          {
            "ancestorTitles": [
              "LintCommand Comprehensive Tests",
              "Response Formatting"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "LintCommand Comprehensive Tests Response Formatting should provide actionable recommendations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should provide actionable recommendations"
          },
          {
            "ancestorTitles": [
              "LintCommand Comprehensive Tests",
              "Command Properties"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "LintCommand Comprehensive Tests Command Properties should have correct command string",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should have correct command string"
          }
        ],
        "endTime": 1755133310452,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\commands\\__tests__\\LintCommand.comprehensive.test.ts",
        "startTime": 1755133310368,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "CodeCommand",
              "command property"
            ],
            "duration": 5,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand command property should have correct command name",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should have correct command name"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "canHandle"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand canHandle should handle code generation keywords",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 11,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle code generation keywords"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "canHandle"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand canHandle should handle case insensitive input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle case insensitive input"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "canHandle"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand canHandle should not handle unrelated commands",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should not handle unrelated commands"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "execute",
              "hello world requests"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand execute hello world requests should handle hello world request in manifesto mode",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 6,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle hello world request in manifesto mode"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "execute",
              "hello world requests"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand execute hello world requests should handle hello world request in free mode",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle hello world request in free mode"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "execute",
              "component requests"
            ],
            "duration": 10,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand execute component requests should handle React component request",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle React component request"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "execute",
              "component requests"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand execute component requests should handle component request without name",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle component request without name"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "execute",
              "function requests"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand execute function requests should handle function creation request",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle function creation request"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "execute",
              "function requests"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand execute function requests should handle function request without name",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle function request without name"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "execute",
              "class requests"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand execute class requests should handle class creation request",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 6,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle class creation request"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "execute",
              "class requests"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand execute class requests should handle class request without name",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle class request without name"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "execute",
              "API requests"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand execute API requests should handle API endpoint creation request",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle API endpoint creation request"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "execute",
              "API requests"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand execute API requests should handle API request without name",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle API request without name"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "execute",
              "general code requests"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand execute general code requests should handle general code request in manifesto mode",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle general code request in manifesto mode"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "execute",
              "general code requests"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand execute general code requests should handle general code request in free mode",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle general code request in free mode"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "execute",
              "error handling"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand execute error handling should handle execution errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle execution errors gracefully"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "execute",
              "error handling"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand execute error handling should handle non-Error exceptions",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle non-Error exceptions"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "extractComponentName"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand extractComponentName should extract component name from input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should extract component name from input"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "extractComponentName"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand extractComponentName should return null when no component pattern found",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should return null when no component pattern found"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "extractFunctionName"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand extractFunctionName should extract function name from input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should extract function name from input"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "extractFunctionName"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand extractFunctionName should return null when no function pattern found",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should return null when no function pattern found"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "extractClassName"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand extractClassName should extract class name from input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should extract class name from input"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "extractClassName"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand extractClassName should return null when no class pattern found",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should return null when no class pattern found"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "extractEndpointName"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand extractEndpointName should extract endpoint name from input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should extract endpoint name from input"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "extractEndpointName"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand extractEndpointName should return null when no endpoint pattern found",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should return null when no endpoint pattern found"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "getRelevantManifestoRules"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand getRelevantManifestoRules should return relevant rules based on input keywords",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return relevant rules based on input keywords"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "getRelevantManifestoRules"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand getRelevantManifestoRules should return multiple relevant rules",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should return multiple relevant rules"
          },
          {
            "ancestorTitles": [
              "CodeCommand",
              "getRelevantManifestoRules"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "CodeCommand getRelevantManifestoRules should return default rules when no specific keywords found",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return default rules when no specific keywords found"
          }
        ],
        "endTime": 1755133310416,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\commands\\__tests__\\CodeCommand.comprehensive.test.ts",
        "startTime": 1755133310308,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "GeneralHelpCommand Comprehensive Tests",
              "Basic Properties"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GeneralHelpCommand Comprehensive Tests Basic Properties should have correct command name",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should have correct command name"
          },
          {
            "ancestorTitles": [
              "GeneralHelpCommand Comprehensive Tests",
              "Basic Properties"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GeneralHelpCommand Comprehensive Tests Basic Properties should always handle input (fallback command)",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should always handle input (fallback command)"
          },
          {
            "ancestorTitles": [
              "GeneralHelpCommand Comprehensive Tests",
              "Test Request Handling"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GeneralHelpCommand Comprehensive Tests Test Request Handling should handle test requests with \"test\" keyword",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle test requests with \"test\" keyword"
          },
          {
            "ancestorTitles": [
              "GeneralHelpCommand Comprehensive Tests",
              "Test Request Handling"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GeneralHelpCommand Comprehensive Tests Test Request Handling should handle test requests with \"work\" keyword",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle test requests with \"work\" keyword"
          },
          {
            "ancestorTitles": [
              "GeneralHelpCommand Comprehensive Tests",
              "Test Request Handling"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GeneralHelpCommand Comprehensive Tests Test Request Handling should handle test requests with \"functionality\" keyword",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle test requests with \"functionality\" keyword"
          },
          {
            "ancestorTitles": [
              "GeneralHelpCommand Comprehensive Tests",
              "Test Request Handling"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GeneralHelpCommand Comprehensive Tests Test Request Handling should handle test requests with \"check\" keyword",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle test requests with \"check\" keyword"
          },
          {
            "ancestorTitles": [
              "GeneralHelpCommand Comprehensive Tests",
              "File Request Handling"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GeneralHelpCommand Comprehensive Tests File Request Handling should handle file requests when codebase not indexed",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle file requests when codebase not indexed"
          },
          {
            "ancestorTitles": [
              "GeneralHelpCommand Comprehensive Tests",
              "File Request Handling"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GeneralHelpCommand Comprehensive Tests File Request Handling should handle file requests when file exists in index",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle file requests when file exists in index"
          },
          {
            "ancestorTitles": [
              "GeneralHelpCommand Comprehensive Tests",
              "File Request Handling"
            ],
            "duration": 5,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GeneralHelpCommand Comprehensive Tests File Request Handling should handle file requests with long content (truncation)",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle file requests with long content (truncation)"
          },
          {
            "ancestorTitles": [
              "GeneralHelpCommand Comprehensive Tests",
              "File Request Handling"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GeneralHelpCommand Comprehensive Tests File Request Handling should handle file requests when file not found",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle file requests when file not found"
          },
          {
            "ancestorTitles": [
              "GeneralHelpCommand Comprehensive Tests",
              "File Request Handling"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GeneralHelpCommand Comprehensive Tests File Request Handling should handle file requests without filename",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle file requests without filename"
          },
          {
            "ancestorTitles": [
              "GeneralHelpCommand Comprehensive Tests",
              "File Request Handling"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GeneralHelpCommand Comprehensive Tests File Request Handling should handle different file extensions",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle different file extensions"
          },
          {
            "ancestorTitles": [
              "GeneralHelpCommand Comprehensive Tests",
              "File Request Handling"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GeneralHelpCommand Comprehensive Tests File Request Handling should handle files without symbols or imports",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle files without symbols or imports"
          },
          {
            "ancestorTitles": [
              "GeneralHelpCommand Comprehensive Tests",
              "File Request Handling"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GeneralHelpCommand Comprehensive Tests File Request Handling should handle files without size property",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle files without size property"
          },
          {
            "ancestorTitles": [
              "GeneralHelpCommand Comprehensive Tests",
              "MR/PR Request Handling"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GeneralHelpCommand Comprehensive Tests MR/PR Request Handling should handle GitHub PR requests",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 6,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle GitHub PR requests"
          },
          {
            "ancestorTitles": [
              "GeneralHelpCommand Comprehensive Tests",
              "MR/PR Request Handling"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GeneralHelpCommand Comprehensive Tests MR/PR Request Handling should handle GitLab MR requests",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle GitLab MR requests"
          },
          {
            "ancestorTitles": [
              "GeneralHelpCommand Comprehensive Tests",
              "MR/PR Request Handling"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GeneralHelpCommand Comprehensive Tests MR/PR Request Handling should handle custom GitLab instance URLs",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle custom GitLab instance URLs"
          },
          {
            "ancestorTitles": [
              "GeneralHelpCommand Comprehensive Tests",
              "MR/PR Request Handling"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GeneralHelpCommand Comprehensive Tests MR/PR Request Handling should handle MR requests without URL",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle MR requests without URL"
          },
          {
            "ancestorTitles": [
              "GeneralHelpCommand Comprehensive Tests",
              "General Help Responses"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GeneralHelpCommand Comprehensive Tests General Help Responses should provide general help when codebase is indexed",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 8,
            "retryReasons": [],
            "status": "passed",
            "title": "should provide general help when codebase is indexed"
          },
          {
            "ancestorTitles": [
              "GeneralHelpCommand Comprehensive Tests",
              "General Help Responses"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GeneralHelpCommand Comprehensive Tests General Help Responses should provide general help when codebase is not indexed",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should provide general help when codebase is not indexed"
          },
          {
            "ancestorTitles": [
              "GeneralHelpCommand Comprehensive Tests",
              "General Help Responses"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GeneralHelpCommand Comprehensive Tests General Help Responses should include all command categories in help",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 8,
            "retryReasons": [],
            "status": "passed",
            "title": "should include all command categories in help"
          },
          {
            "ancestorTitles": [
              "GeneralHelpCommand Comprehensive Tests",
              "Error Handling"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GeneralHelpCommand Comprehensive Tests Error Handling should handle errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle errors gracefully"
          },
          {
            "ancestorTitles": [
              "GeneralHelpCommand Comprehensive Tests",
              "Error Handling"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GeneralHelpCommand Comprehensive Tests Error Handling should handle non-Error exceptions",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle non-Error exceptions"
          }
        ],
        "endTime": 1755133310482,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\commands\\__tests__\\GeneralHelpCommand.comprehensive.test.ts",
        "startTime": 1755133310385,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "GraphCommand",
              "command property"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand command property should have correct command name",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should have correct command name"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "canHandle"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand canHandle should handle graph slash commands",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle graph slash commands"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "canHandle"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand canHandle should handle natural language graph requests",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle natural language graph requests"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "canHandle"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand canHandle should require both graph and code keywords for natural language",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should require both graph and code keywords for natural language"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "canHandle"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand canHandle should not handle unrelated commands",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should not handle unrelated commands"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "execute",
              "codebase not indexed"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand execute codebase not indexed should return warning when codebase not indexed",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should return warning when codebase not indexed"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "execute",
              "references analysis"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand execute references analysis should handle /references command",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle /references command"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "execute",
              "references analysis"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand execute references analysis should handle natural language references request",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle natural language references request"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "execute",
              "references analysis"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand execute references analysis should provide usage when no symbol specified",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should provide usage when no symbol specified"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "execute",
              "impact analysis"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand execute impact analysis should handle /impact command",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle /impact command"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "execute",
              "impact analysis"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand execute impact analysis should handle natural language impact request",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle natural language impact request"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "execute",
              "impact analysis"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand execute impact analysis should provide usage when no symbol specified",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should provide usage when no symbol specified"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "execute",
              "general graph analysis"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand execute general graph analysis should generate code graph overview",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should generate code graph overview"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "execute",
              "general graph analysis"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand execute general graph analysis should handle natural language graph request",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle natural language graph request"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "execute",
              "error handling"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand execute error handling should handle execution errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle execution errors gracefully"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "execute",
              "error handling"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand execute error handling should handle non-Error exceptions",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle non-Error exceptions"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "findSymbolReferences"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand findSymbolReferences should find symbol references in code",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should find symbol references in code"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "findSymbolReferences"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand findSymbolReferences should handle symbol not found",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle symbol not found"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "findSymbolReferences"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand findSymbolReferences should handle empty codebase",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty codebase"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "findFileReferences"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand findFileReferences should find file import references",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should find file import references"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "findFileReferences"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand findFileReferences should handle file not found",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle file not found"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "analyzeSymbolImpact"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand analyzeSymbolImpact should analyze symbol impact correctly",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should analyze symbol impact correctly"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "analyzeSymbolImpact"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand analyzeSymbolImpact should classify impact levels correctly",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should classify impact levels correctly"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "analyzeFileImpact"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand analyzeFileImpact should analyze file impact correctly",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should analyze file impact correctly"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "calculateCodebaseStats"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand calculateCodebaseStats should calculate codebase statistics",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should calculate codebase statistics"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "calculateCodebaseStats"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand calculateCodebaseStats should handle empty codebase",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty codebase"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "analyzeDependencies"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand analyzeDependencies should analyze file dependencies",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should analyze file dependencies"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "analyzeDependencies"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand analyzeDependencies should handle files without imports",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle files without imports"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "identifyHotspots"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand identifyHotspots should identify complexity hotspots",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should identify complexity hotspots"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "identifyHotspots"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand identifyHotspots should sort hotspots by complexity",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "passed",
            "title": "should sort hotspots by complexity"
          },
          {
            "ancestorTitles": [
              "GraphCommand",
              "identifyHotspots"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GraphCommand identifyHotspots should handle empty codebase",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty codebase"
          }
        ],
        "endTime": 1755133310451,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\commands\\__tests__\\GraphCommand.comprehensive.test.ts",
        "startTime": 1755133310337,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "ChatResponseBuilder",
              "basic functionality"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatResponseBuilder basic functionality should set content correctly",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should set content correctly"
          },
          {
            "ancestorTitles": [
              "ChatResponseBuilder",
              "basic functionality"
            ],
            "duration": 20,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatResponseBuilder basic functionality should throw error for empty content",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error for empty content"
          },
          {
            "ancestorTitles": [
              "ChatResponseBuilder",
              "basic functionality"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatResponseBuilder basic functionality should throw error when building without content",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error when building without content"
          },
          {
            "ancestorTitles": [
              "ChatResponseBuilder",
              "action management"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatResponseBuilder action management should add actions correctly",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should add actions correctly"
          },
          {
            "ancestorTitles": [
              "ChatResponseBuilder",
              "action management"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatResponseBuilder action management should throw error for invalid action",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error for invalid action"
          },
          {
            "ancestorTitles": [
              "ChatResponseBuilder",
              "action management"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatResponseBuilder action management should add multiple actions",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should add multiple actions"
          },
          {
            "ancestorTitles": [
              "ChatResponseBuilder",
              "convenience methods"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatResponseBuilder convenience methods should add file creation action with correct safety level",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should add file creation action with correct safety level"
          },
          {
            "ancestorTitles": [
              "ChatResponseBuilder",
              "convenience methods"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatResponseBuilder convenience methods should add file edit action with cautious safety level",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should add file edit action with cautious safety level"
          },
          {
            "ancestorTitles": [
              "ChatResponseBuilder",
              "convenience methods"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatResponseBuilder convenience methods should add manifesto creation action with cautious safety level",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should add manifesto creation action with cautious safety level"
          },
          {
            "ancestorTitles": [
              "ChatResponseBuilder",
              "convenience methods"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatResponseBuilder convenience methods should add code generation action with safe safety level",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should add code generation action with safe safety level"
          },
          {
            "ancestorTitles": [
              "ChatResponseBuilder",
              "convenience methods"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatResponseBuilder convenience methods should add lint action with safe safety level",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should add lint action with safe safety level"
          },
          {
            "ancestorTitles": [
              "ChatResponseBuilder",
              "convenience methods"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatResponseBuilder convenience methods should add index action with safe safety level",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should add index action with safe safety level"
          },
          {
            "ancestorTitles": [
              "ChatResponseBuilder",
              "HTML output"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatResponseBuilder HTML output should build HTML with action buttons",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should build HTML with action buttons"
          },
          {
            "ancestorTitles": [
              "ChatResponseBuilder",
              "HTML output"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatResponseBuilder HTML output should handle actions without icons",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle actions without icons"
          },
          {
            "ancestorTitles": [
              "ChatResponseBuilder",
              "HTML output"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatResponseBuilder HTML output should include action data in HTML",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should include action data in HTML"
          },
          {
            "ancestorTitles": [
              "ChatResponseBuilder",
              "static helpers"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatResponseBuilder static helpers should create response with single action",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should create response with single action"
          },
          {
            "ancestorTitles": [
              "ChatResponseBuilder",
              "static helpers"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatResponseBuilder static helpers should create manifesto creation response",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should create manifesto creation response"
          },
          {
            "ancestorTitles": [
              "ChatResponseBuilder",
              "static helpers"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatResponseBuilder static helpers should create code generation response with lint action",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should create code generation response with lint action"
          },
          {
            "ancestorTitles": [
              "ChatResponseBuilder",
              "method chaining"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatResponseBuilder method chaining should support fluent interface",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should support fluent interface"
          }
        ],
        "endTime": 1755133310603,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\core\\__tests__\\ChatResponseBuilder.test.ts",
        "startTime": 1755133310493,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "InteractiveDiffProvider",
              "Constructor and Initialization"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "InteractiveDiffProvider Constructor and Initialization should initialize with extension context",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should initialize with extension context"
          },
          {
            "ancestorTitles": [
              "InteractiveDiffProvider",
              "Constructor and Initialization"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "InteractiveDiffProvider Constructor and Initialization should handle missing context gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle missing context gracefully"
          },
          {
            "ancestorTitles": [
              "InteractiveDiffProvider",
              "showDiff"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "InteractiveDiffProvider showDiff should create diff view successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should create diff view successfully"
          },
          {
            "ancestorTitles": [
              "InteractiveDiffProvider",
              "showDiff"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "InteractiveDiffProvider showDiff should handle user rejecting changes",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle user rejecting changes"
          },
          {
            "ancestorTitles": [
              "InteractiveDiffProvider",
              "showDiff"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "InteractiveDiffProvider showDiff should handle manual edit selection",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle manual edit selection"
          },
          {
            "ancestorTitles": [
              "InteractiveDiffProvider",
              "showDiff"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "InteractiveDiffProvider showDiff should handle undefined user action",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle undefined user action"
          },
          {
            "ancestorTitles": [
              "InteractiveDiffProvider",
              "showDiff"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "InteractiveDiffProvider showDiff should clean up temporary files",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should clean up temporary files"
          },
          {
            "ancestorTitles": [
              "InteractiveDiffProvider",
              "showDiff"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "InteractiveDiffProvider showDiff should handle cleanup errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle cleanup errors gracefully"
          },
          {
            "ancestorTitles": [
              "InteractiveDiffProvider",
              "showDiff"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "InteractiveDiffProvider showDiff should handle file creation errors",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle file creation errors"
          },
          {
            "ancestorTitles": [
              "InteractiveDiffProvider",
              "showDiff"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "InteractiveDiffProvider showDiff should handle diff command errors",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle diff command errors"
          },
          {
            "ancestorTitles": [
              "InteractiveDiffProvider",
              "showDiff"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "InteractiveDiffProvider showDiff should validate input parameters",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should validate input parameters"
          },
          {
            "ancestorTitles": [
              "InteractiveDiffProvider",
              "showDiff"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "InteractiveDiffProvider showDiff should handle special characters in filename",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle special characters in filename"
          },
          {
            "ancestorTitles": [
              "InteractiveDiffProvider",
              "applyChanges"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "InteractiveDiffProvider applyChanges should apply changes to existing file",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should apply changes to existing file"
          },
          {
            "ancestorTitles": [
              "InteractiveDiffProvider",
              "applyChanges"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "InteractiveDiffProvider applyChanges should handle file write errors",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle file write errors"
          },
          {
            "ancestorTitles": [
              "InteractiveDiffProvider",
              "openForManualEdit"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "InteractiveDiffProvider openForManualEdit should open file for manual editing",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should open file for manual editing"
          },
          {
            "ancestorTitles": [
              "InteractiveDiffProvider",
              "openForManualEdit"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "InteractiveDiffProvider openForManualEdit should handle document opening errors",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle document opening errors"
          },
          {
            "ancestorTitles": [
              "InteractiveDiffProvider",
              "Integration and Edge Cases"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "InteractiveDiffProvider Integration and Edge Cases should handle concurrent diff operations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle concurrent diff operations"
          },
          {
            "ancestorTitles": [
              "InteractiveDiffProvider",
              "Integration and Edge Cases"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "InteractiveDiffProvider Integration and Edge Cases should handle large file content",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle large file content"
          },
          {
            "ancestorTitles": [
              "InteractiveDiffProvider",
              "Integration and Edge Cases"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "InteractiveDiffProvider Integration and Edge Cases should handle binary file content gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle binary file content gracefully"
          }
        ],
        "endTime": 1755133310589,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\view\\__tests__\\InteractiveDiffProvider.comprehensive.test.ts",
        "startTime": 1755133310498,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "EditCommand",
              "command property"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand command property should have correct command name",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should have correct command name"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "canHandle"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand canHandle should handle /edit slash command",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle /edit slash command"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "canHandle"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand canHandle should handle natural language edit requests",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 6,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle natural language edit requests"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "canHandle"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand canHandle should not handle unrelated commands",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should not handle unrelated commands"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "canHandle"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand canHandle should handle case insensitive patterns",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle case insensitive patterns"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "execute",
              "codebase not indexed"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand execute codebase not indexed should return warning when codebase not indexed",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should return warning when codebase not indexed"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "execute",
              "agent mode"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand execute agent mode should use agent when in agent mode",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should use agent when in agent mode"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "execute",
              "agent mode"
            ],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand execute agent mode should include conversation context when available",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should include conversation context when available"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "execute",
              "agent mode"
            ],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand execute agent mode should handle agent errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle agent errors gracefully"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "execute",
              "agent mode"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand execute agent mode should handle non-Error agent failures",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle non-Error agent failures"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "execute",
              "file editing"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand execute file editing should handle specific file edit requests",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle specific file edit requests"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "execute",
              "file editing"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand execute file editing should handle file not found",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle file not found"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "execute",
              "file editing"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand execute file editing should handle files without content",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle files without content"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "execute",
              "file editing"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand execute file editing should handle files without symbols",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle files without symbols"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "execute",
              "general edit guidance"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand execute general edit guidance should provide general guidance when no file specified",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should provide general guidance when no file specified"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "execute",
              "error handling"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand execute error handling should handle execution errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle execution errors gracefully"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "execute",
              "error handling"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand execute error handling should handle non-Error exceptions",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle non-Error exceptions"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "determineEditType"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand determineEditType should identify add/create operations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should identify add/create operations"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "determineEditType"
            ],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand determineEditType should identify fix/repair operations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should identify fix/repair operations"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "determineEditType"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand determineEditType should identify refactor operations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should identify refactor operations"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "determineEditType"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand determineEditType should identify update/modify operations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should identify update/modify operations"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "determineEditType"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand determineEditType should identify remove/delete operations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should identify remove/delete operations"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "determineEditType"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand determineEditType should identify optimize/improve operations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should identify optimize/improve operations"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "determineEditType"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand determineEditType should default to general modification",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should default to general modification"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "getRelevantManifestoRules"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand getRelevantManifestoRules should identify error handling rules",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should identify error handling rules"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "getRelevantManifestoRules"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand getRelevantManifestoRules should identify testing rules",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should identify testing rules"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "getRelevantManifestoRules"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand getRelevantManifestoRules should identify security rules",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should identify security rules"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "getRelevantManifestoRules"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand getRelevantManifestoRules should identify performance rules",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should identify performance rules"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "getRelevantManifestoRules"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand getRelevantManifestoRules should identify documentation rules",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should identify documentation rules"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "getRelevantManifestoRules"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand getRelevantManifestoRules should return default rules when no specific matches",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return default rules when no specific matches"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "getRelevantManifestoRules"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand getRelevantManifestoRules should combine multiple rules",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should combine multiple rules"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "getAvailableFiles"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand getAvailableFiles should return sorted list of code files",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should return sorted list of code files"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "getAvailableFiles"
            ],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand getAvailableFiles should filter only code files",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should filter only code files"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "getAvailableFiles"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand getAvailableFiles should handle empty codebase",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty codebase"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "generateEditSuggestions"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand generateEditSuggestions should provide error handling suggestions",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should provide error handling suggestions"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "generateEditSuggestions"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand generateEditSuggestions should provide testing suggestions",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should provide testing suggestions"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "generateEditSuggestions"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand generateEditSuggestions should provide security suggestions",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should provide security suggestions"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "generateEditSuggestions"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand generateEditSuggestions should provide performance suggestions",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should provide performance suggestions"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "generateEditSuggestions"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand generateEditSuggestions should provide documentation suggestions",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should provide documentation suggestions"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "generateEditSuggestions"
            ],
            "duration": 18,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand generateEditSuggestions should always include manifesto compliance suggestions",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should always include manifesto compliance suggestions"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "generateEditSuggestions"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand generateEditSuggestions should include next steps guidance",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should include next steps guidance"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "generateEditSuggestions"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand generateEditSuggestions should combine multiple suggestion types",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should combine multiple suggestion types"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "provideEditGuidance"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand provideEditGuidance should provide comprehensive edit guidance",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should provide comprehensive edit guidance"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "provideEditGuidance"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand provideEditGuidance should include available files in guidance",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should include available files in guidance"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "handleFileEdit"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand handleFileEdit should handle file edit with all data present",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle file edit with all data present"
          },
          {
            "ancestorTitles": [
              "EditCommand",
              "handleFileEdit"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "EditCommand handleFileEdit should handle file not found in handleFileEdit",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle file not found in handleFileEdit"
          }
        ],
        "endTime": 1755133310608,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\commands\\__tests__\\EditCommand.comprehensive.test.ts",
        "startTime": 1755133310470,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "ManifestoEngine",
              "parseManifesto"
            ],
            "duration": 6,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine parseManifesto should parse valid manifesto content",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should parse valid manifesto content"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine",
              "parseManifesto"
            ],
            "duration": 21,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine parseManifesto should handle empty manifesto gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty manifesto gracefully"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine",
              "parseManifesto"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine parseManifesto should validate input and throw on null/undefined",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should validate input and throw on null/undefined"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine",
              "parseManifesto"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine parseManifesto should complete parsing thoroughly",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should complete parsing thoroughly"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine",
              "validateCompliance"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine validateCompliance should validate code against manifesto rules",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should validate code against manifesto rules"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine",
              "validateCompliance"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine validateCompliance should handle validation errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle validation errors gracefully"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine",
              "generatePrompt"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine generatePrompt should generate AI prompt with manifesto rules",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should generate AI prompt with manifesto rules"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine",
              "generatePrompt"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine generatePrompt should handle empty rules gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty rules gracefully"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine",
              "encryptSensitiveData"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine encryptSensitiveData should validate input data for encryption",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should validate input data for encryption"
          },
          {
            "ancestorTitles": [
              "ManifestoEngine",
              "encryptSensitiveData"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEngine encryptSensitiveData should validate encrypted data format for decryption",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should validate encrypted data format for decryption"
          }
        ],
        "endTime": 1755133310649,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\core\\__tests__\\ManifestoEngine.test.ts",
        "startTime": 1755133310506,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Command Routing"
            ],
            "duration": 9,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Command Routing should route lint commands to LintCommand",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should route lint commands to LintCommand"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Command Routing"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Command Routing should route edit commands to EditCommand",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should route edit commands to EditCommand"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Command Routing"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Command Routing should route graph commands to GraphCommand",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should route graph commands to GraphCommand"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Command Routing"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Command Routing should route glossary commands to GlossaryCommand",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should route glossary commands to GlossaryCommand"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Command Routing"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Command Routing should route manifesto commands to ManifestoCommand",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should route manifesto commands to ManifestoCommand"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Command Routing"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Command Routing should route code generation commands to CodeCommand",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should route code generation commands to CodeCommand"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Natural Language Processing"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Natural Language Processing should handle natural language lint requests",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle natural language lint requests"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Natural Language Processing"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Natural Language Processing should handle natural language edit requests",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle natural language edit requests"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Natural Language Processing"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Natural Language Processing should handle natural language glossary requests",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle natural language glossary requests"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Command Execution"
            ],
            "duration": 21,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Command Execution should execute commands and return responses",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should execute commands and return responses"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Command Execution"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Command Execution should handle unmatched commands gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle unmatched commands gracefully"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Command Management"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Command Management should return list of available commands",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 6,
            "retryReasons": [],
            "status": "passed",
            "title": "should return list of available commands"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Command Management"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Command Management should provide command statistics",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should provide command statistics"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Extensibility"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Extensibility should allow adding new commands dynamically",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should allow adding new commands dynamically"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Extensibility"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Extensibility should allow removing commands",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should allow removing commands"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Command Priority and Real-World Routing"
            ],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Command Priority and Real-World Routing should prioritize ManifestoCommand over CodeCommand for manifesto requests",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should prioritize ManifestoCommand over CodeCommand for manifesto requests"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Command Priority and Real-World Routing"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Command Priority and Real-World Routing should route typo-filled manifesto requests to ManifestoCommand",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should route typo-filled manifesto requests to ManifestoCommand"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Command Priority and Real-World Routing"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Command Priority and Real-World Routing should route pure code requests to CodeCommand",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should route pure code requests to CodeCommand"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Conversational Context Awareness"
            ],
            "duration": 16,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Conversational Context Awareness should understand \"test it\" refers to previously generated code",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 6,
            "retryReasons": [],
            "status": "passed",
            "title": "should understand \"test it\" refers to previously generated code"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Conversational Context Awareness"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Conversational Context Awareness should handle \"run it\" as context-aware follow-up",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle \"run it\" as context-aware follow-up"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Conversational Context Awareness"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Conversational Context Awareness should fall back to general help when no code context exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should fall back to general help when no code context exists"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Conversational Context Awareness"
            ],
            "duration": 21,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Conversational Context Awareness should extract correct file extension from code language",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should extract correct file extension from code language"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Conversational Context Awareness",
              "Auto-Mode Functionality"
            ],
            "duration": 24,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Conversational Context Awareness Auto-Mode Functionality should auto-execute safe code when isAutoMode is true",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should auto-execute safe code when isAutoMode is true"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Conversational Context Awareness",
              "Auto-Mode Functionality"
            ],
            "duration": 14,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Conversational Context Awareness Auto-Mode Functionality should fall back to manual mode for unsafe code even when isAutoMode is true",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should fall back to manual mode for unsafe code even when isAutoMode is true"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Conversational Context Awareness",
              "Auto-Mode Functionality"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Conversational Context Awareness Auto-Mode Functionality should show execution button when isAutoMode is false",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should show execution button when isAutoMode is false"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Conversational Context Awareness",
              "TDD Mode Routing"
            ],
            "duration": 5,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Conversational Context Awareness TDD Mode Routing should route code generation to TddCodeGenerationCommand when TDD mode is enabled",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should route code generation to TddCodeGenerationCommand when TDD mode is enabled"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Conversational Context Awareness",
              "TDD Mode Routing"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Conversational Context Awareness TDD Mode Routing should route to CodeCommand when TDD mode is disabled",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should route to CodeCommand when TDD mode is disabled"
          },
          {
            "ancestorTitles": [
              "ChatCommandManager",
              "Conversational Context Awareness",
              "TDD Mode Routing"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ChatCommandManager Conversational Context Awareness TDD Mode Routing should prioritize TDD routing over regular code commands when enabled",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should prioritize TDD routing over regular code commands when enabled"
          }
        ],
        "endTime": 1755133310689,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\commands\\__tests__\\ChatCommandManager.test.ts",
        "startTime": 1755133308776,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "ManifestoTreeDataProvider",
              "Constructor and Initialization"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoTreeDataProvider Constructor and Initialization should initialize with StateManager and event emitter",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should initialize with StateManager and event emitter"
          },
          {
            "ancestorTitles": [
              "ManifestoTreeDataProvider",
              "Constructor and Initialization"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoTreeDataProvider Constructor and Initialization should call loadManifesto during initialization",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should call loadManifesto during initialization"
          },
          {
            "ancestorTitles": [
              "ManifestoTreeDataProvider",
              "Constructor and Initialization"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoTreeDataProvider Constructor and Initialization should handle missing StateManager gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle missing StateManager gracefully"
          },
          {
            "ancestorTitles": [
              "ManifestoTreeDataProvider",
              "refresh"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoTreeDataProvider refresh should fire tree data change event",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should fire tree data change event"
          },
          {
            "ancestorTitles": [
              "ManifestoTreeDataProvider",
              "refresh"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoTreeDataProvider refresh should reload manifesto on refresh",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should reload manifesto on refresh"
          },
          {
            "ancestorTitles": [
              "ManifestoTreeDataProvider",
              "refresh"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoTreeDataProvider refresh should handle multiple refresh calls",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle multiple refresh calls"
          },
          {
            "ancestorTitles": [
              "ManifestoTreeDataProvider",
              "getTreeItem"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoTreeDataProvider getTreeItem should return the same element passed in",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return the same element passed in"
          },
          {
            "ancestorTitles": [
              "ManifestoTreeDataProvider",
              "getTreeItem"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoTreeDataProvider getTreeItem should handle different manifesto item types",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle different manifesto item types"
          },
          {
            "ancestorTitles": [
              "ManifestoTreeDataProvider",
              "getChildren"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoTreeDataProvider getChildren should return manifesto sections when no element provided",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should return manifesto sections when no element provided"
          },
          {
            "ancestorTitles": [
              "ManifestoTreeDataProvider",
              "getChildren"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoTreeDataProvider getChildren should return rules for section elements",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should return rules for section elements"
          },
          {
            "ancestorTitles": [
              "ManifestoTreeDataProvider",
              "getChildren"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoTreeDataProvider getChildren should return empty array for rule elements",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return empty array for rule elements"
          },
          {
            "ancestorTitles": [
              "ManifestoTreeDataProvider",
              "getChildren"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoTreeDataProvider getChildren should handle empty manifesto sections",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty manifesto sections"
          },
          {
            "ancestorTitles": [
              "ManifestoTreeDataProvider",
              "getChildren"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoTreeDataProvider getChildren should handle section without matching rules",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle section without matching rules"
          },
          {
            "ancestorTitles": [
              "ManifestoTreeDataProvider",
              "loadManifesto"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoTreeDataProvider loadManifesto should parse manifesto content into sections",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should parse manifesto content into sections"
          },
          {
            "ancestorTitles": [
              "ManifestoTreeDataProvider",
              "loadManifesto"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoTreeDataProvider loadManifesto should handle empty manifesto content",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty manifesto content"
          },
          {
            "ancestorTitles": [
              "ManifestoTreeDataProvider",
              "loadManifesto"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoTreeDataProvider loadManifesto should handle malformed manifesto content",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle malformed manifesto content"
          },
          {
            "ancestorTitles": [
              "ManifestoTreeDataProvider",
              "ManifestoItem Class"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoTreeDataProvider ManifestoItem Class should create manifesto item with all properties",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should create manifesto item with all properties"
          },
          {
            "ancestorTitles": [
              "ManifestoTreeDataProvider",
              "ManifestoItem Class"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoTreeDataProvider ManifestoItem Class should create rule item with proper styling",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should create rule item with proper styling"
          },
          {
            "ancestorTitles": [
              "ManifestoTreeDataProvider",
              "ManifestoItem Class"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoTreeDataProvider ManifestoItem Class should handle empty content",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty content"
          },
          {
            "ancestorTitles": [
              "ManifestoTreeDataProvider",
              "ManifestoItem Class"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoTreeDataProvider ManifestoItem Class should set proper icons for different types",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should set proper icons for different types"
          },
          {
            "ancestorTitles": [
              "ManifestoTreeDataProvider",
              "Integration and Edge Cases"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoTreeDataProvider Integration and Edge Cases should handle rapid successive calls",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle rapid successive calls"
          },
          {
            "ancestorTitles": [
              "ManifestoTreeDataProvider",
              "Integration and Edge Cases"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoTreeDataProvider Integration and Edge Cases should maintain consistent section order",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should maintain consistent section order"
          },
          {
            "ancestorTitles": [
              "ManifestoTreeDataProvider",
              "Integration and Edge Cases"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoTreeDataProvider Integration and Edge Cases should handle concurrent refresh and getChildren calls",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle concurrent refresh and getChildren calls"
          },
          {
            "ancestorTitles": [
              "ManifestoTreeDataProvider",
              "Integration and Edge Cases"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoTreeDataProvider Integration and Edge Cases should handle provider disposal gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle provider disposal gracefully"
          }
        ],
        "endTime": 1755133310725,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\view\\__tests__\\ManifestoTreeDataProvider.comprehensive.test.ts",
        "startTime": 1755133310641,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "command property"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand command property should have correct command name",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should have correct command name"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "canHandle"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand canHandle should handle glossary slash commands",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle glossary slash commands"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "canHandle"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand canHandle should handle natural language glossary requests",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 6,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle natural language glossary requests"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "canHandle"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand canHandle should handle definition patterns",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle definition patterns"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "canHandle"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand canHandle should not handle unrelated commands",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should not handle unrelated commands"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "canHandle"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand canHandle should handle case insensitive patterns",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle case insensitive patterns"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "execute",
              "/define command"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand execute /define command should show usage when no parameters provided",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should show usage when no parameters provided"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "execute",
              "/define command"
            ],
            "duration": 21,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand execute /define command should lookup existing term when only term provided",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should lookup existing term when only term provided"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "execute",
              "/define command"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand execute /define command should add new term when definition provided",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should add new term when definition provided"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "execute",
              "/lookup command"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand execute /lookup command should show usage when no parameters provided",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should show usage when no parameters provided"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "execute",
              "/lookup command"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand execute /lookup command should lookup existing term",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should lookup existing term"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "execute",
              "/lookup command"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand execute /lookup command should handle non-existent term",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle non-existent term"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "execute",
              "natural language patterns"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand execute natural language patterns should handle \"define X as Y\" pattern",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle \"define X as Y\" pattern"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "execute",
              "natural language patterns"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand execute natural language patterns should handle \"add term X meaning Y\" pattern",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle \"add term X meaning Y\" pattern"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "execute",
              "natural language patterns"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand execute natural language patterns should handle \"what does X mean\" pattern",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle \"what does X mean\" pattern"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "execute",
              "natural language patterns"
            ],
            "duration": 8,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand execute natural language patterns should show glossary when requested",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should show glossary when requested"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "execute",
              "natural language patterns"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand execute natural language patterns should handle remove term request",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle remove term request"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "execute",
              "general help"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand execute general help should provide general glossary help for unmatched input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should provide general glossary help for unmatched input"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "execute",
              "error handling"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand execute error handling should handle execution errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle execution errors gracefully"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "execute",
              "error handling"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand execute error handling should handle non-Error exceptions",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle non-Error exceptions"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "addTermToGlossary"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand addTermToGlossary should add new term successfully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should add new term successfully"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "addTermToGlossary"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand addTermToGlossary should handle existing term with confirmation",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle existing term with confirmation"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "lookupSingleTerm"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand lookupSingleTerm should return term details when found",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should return term details when found"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "lookupSingleTerm"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand lookupSingleTerm should suggest similar terms when not found",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should suggest similar terms when not found"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "showGlossary"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand showGlossary should show all terms when glossary has content",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should show all terms when glossary has content"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "showGlossary"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand showGlossary should show empty message when glossary is empty",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should show empty message when glossary is empty"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "removeTerm"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand removeTerm should remove existing term",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should remove existing term"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "removeTerm"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand removeTerm should handle non-existent term",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle non-existent term"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "removeTerm"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand removeTerm should handle invalid format",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle invalid format"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "findSimilarTerms"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand findSimilarTerms should find similar terms by partial match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should find similar terms by partial match"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "findSimilarTerms"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand findSimilarTerms should find similar terms by acronym match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should find similar terms by acronym match"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "findSimilarTerms"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand findSimilarTerms should return empty array when no similar terms found",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return empty array when no similar terms found"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "findSimilarTerms"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand findSimilarTerms should limit results to maximum 5 terms",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should limit results to maximum 5 terms"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "provideGlossaryHelp"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand provideGlossaryHelp should provide comprehensive glossary help",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should provide comprehensive glossary help"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "provideGlossaryHelp"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand provideGlossaryHelp should show empty glossary message when no terms",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should show empty glossary message when no terms"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "enhanceResponseWithGlossary"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand enhanceResponseWithGlossary should track usage when glossary terms found in response",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should track usage when glossary terms found in response"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "enhanceResponseWithGlossary"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand enhanceResponseWithGlossary should return original response when no glossary terms found",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return original response when no glossary terms found"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "enhanceResponseWithGlossary"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand enhanceResponseWithGlossary should handle empty glossary",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty glossary"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "enhanceResponseWithGlossary"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand enhanceResponseWithGlossary should handle case insensitive term matching",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle case insensitive term matching"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "pattern matching edge cases"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand pattern matching edge cases should handle malformed define patterns",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle malformed define patterns"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "pattern matching edge cases"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand pattern matching edge cases should handle malformed add term patterns",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle malformed add term patterns"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "pattern matching edge cases"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand pattern matching edge cases should handle malformed lookup patterns",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle malformed lookup patterns"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "integration scenarios"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand integration scenarios should handle complete workflow: add, lookup, remove",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle complete workflow: add, lookup, remove"
          },
          {
            "ancestorTitles": [
              "GlossaryCommand",
              "integration scenarios"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "GlossaryCommand integration scenarios should handle case insensitive operations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle case insensitive operations"
          }
        ],
        "endTime": 1755133310732,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\commands\\__tests__\\GlossaryCommand.comprehensive.test.ts",
        "startTime": 1755133310587,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "ManifestoEnforcementEngine",
              "Constructor"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEnforcementEngine Constructor should initialize with all enforcement components",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should initialize with all enforcement components"
          },
          {
            "ancestorTitles": [
              "ManifestoEnforcementEngine",
              "Constructor"
            ],
            "duration": 12,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEnforcementEngine Constructor should throw error if any component is missing",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error if any component is missing"
          },
          {
            "ancestorTitles": [
              "ManifestoEnforcementEngine",
              "enforceCompliance"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEnforcementEngine enforceCompliance should enforce pre-commit validation for commit actions",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should enforce pre-commit validation for commit actions"
          },
          {
            "ancestorTitles": [
              "ManifestoEnforcementEngine",
              "enforceCompliance"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEnforcementEngine enforceCompliance should block commits when pre-commit validation fails",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should block commits when pre-commit validation fails"
          },
          {
            "ancestorTitles": [
              "ManifestoEnforcementEngine",
              "enforceCompliance"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEnforcementEngine enforceCompliance should enforce save validation for save actions",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should enforce save validation for save actions"
          },
          {
            "ancestorTitles": [
              "ManifestoEnforcementEngine",
              "enforceCompliance"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEnforcementEngine enforceCompliance should block saves when validation fails",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should block saves when validation fails"
          },
          {
            "ancestorTitles": [
              "ManifestoEnforcementEngine",
              "enforceCompliance"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEnforcementEngine enforceCompliance should verify AI responses for ai-interaction actions",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should verify AI responses for ai-interaction actions"
          },
          {
            "ancestorTitles": [
              "ManifestoEnforcementEngine",
              "enforceCompliance"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEnforcementEngine enforceCompliance should reject non-compliant AI responses",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should reject non-compliant AI responses"
          },
          {
            "ancestorTitles": [
              "ManifestoEnforcementEngine",
              "enforceCompliance"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEnforcementEngine enforceCompliance should enforce test execution for test-required actions",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should enforce test execution for test-required actions"
          },
          {
            "ancestorTitles": [
              "ManifestoEnforcementEngine",
              "enforceCompliance"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEnforcementEngine enforceCompliance should handle unknown action types gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle unknown action types gracefully"
          },
          {
            "ancestorTitles": [
              "ManifestoEnforcementEngine",
              "Error Handling"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEnforcementEngine Error Handling should handle null action gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle null action gracefully"
          },
          {
            "ancestorTitles": [
              "ManifestoEnforcementEngine",
              "Error Handling"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEnforcementEngine Error Handling should handle undefined action gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle undefined action gracefully"
          },
          {
            "ancestorTitles": [
              "ManifestoEnforcementEngine",
              "Error Handling"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEnforcementEngine Error Handling should handle missing action type",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle missing action type"
          },
          {
            "ancestorTitles": [
              "ManifestoEnforcementEngine",
              "Performance"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoEnforcementEngine Performance should complete enforcement within performance requirements",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should complete enforcement within performance requirements"
          }
        ],
        "endTime": 1755133310739,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\core\\__tests__\\ManifestoEnforcementEngine.test.ts",
        "startTime": 1755133310622,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Slash Commands"
            ],
            "duration": 10,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Slash Commands should recognize slash command: \"/manifesto\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should recognize slash command: \"/manifesto\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Slash Commands"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Slash Commands should recognize slash command: \"/MANIFESTO\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should recognize slash command: \"/MANIFESTO\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Slash Commands"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Slash Commands should recognize slash command: \"/Manifesto\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should recognize slash command: \"/Manifesto\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Slash Commands"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Slash Commands should recognize slash command: \"/manifesto help\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should recognize slash command: \"/manifesto help\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Slash Commands"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Slash Commands should recognize slash command: \"/manifesto create\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should recognize slash command: \"/manifesto create\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Slash Commands"
            ],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Slash Commands should recognize slash command: \"/manifesto show\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should recognize slash command: \"/manifesto show\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Slash Commands"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Slash Commands should recognize slash command: \"/manifesto display\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should recognize slash command: \"/manifesto display\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Slash Commands"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Slash Commands should handle slash commands with extra whitespace",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle slash commands with extra whitespace"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Display Requests"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Display Requests should recognize display pattern: \"show manifesto\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should recognize display pattern: \"show manifesto\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Display Requests"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Display Requests should recognize display pattern: \"display rules\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should recognize display pattern: \"display rules\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Display Requests"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Display Requests should recognize display pattern: \"read manifesto\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should recognize display pattern: \"read manifesto\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Display Requests"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Display Requests should recognize display pattern: \"show me the rules\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should recognize display pattern: \"show me the rules\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Display Requests"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Display Requests should recognize display pattern: \"display the manifesto\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should recognize display pattern: \"display the manifesto\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Display Requests"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Display Requests should recognize display pattern: \"read the manifesto rules\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should recognize display pattern: \"read the manifesto rules\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Creation Requests"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Creation Requests should recognize creation pattern: \"create manifesto\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should recognize creation pattern: \"create manifesto\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Creation Requests"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Creation Requests should recognize creation pattern: \"generate manifesto\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should recognize creation pattern: \"generate manifesto\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Creation Requests"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Creation Requests should recognize creation pattern: \"make manifesto\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should recognize creation pattern: \"make manifesto\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Creation Requests"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Creation Requests should recognize creation pattern: \"build manifesto\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should recognize creation pattern: \"build manifesto\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Creation Requests"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Creation Requests should recognize creation pattern: \"write manifesto\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should recognize creation pattern: \"write manifesto\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Creation Requests"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Creation Requests should recognize creation pattern: \"gen manifesto\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should recognize creation pattern: \"gen manifesto\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Creation Requests"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Creation Requests should recognize creation pattern: \"create me a manifesto\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should recognize creation pattern: \"create me a manifesto\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Creation Requests"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Creation Requests should recognize creation pattern: \"make me a manifesto\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should recognize creation pattern: \"make me a manifesto\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Creation Requests"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Creation Requests should recognize creation pattern: \"generate a manifesto for this project\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should recognize creation pattern: \"generate a manifesto for this project\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Creation Requests"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Creation Requests should recognize creation pattern: \"create manifesto for app\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should recognize creation pattern: \"create manifesto for app\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Creation Requests"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Creation Requests should recognize creation pattern: \"manifesto for project\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should recognize creation pattern: \"manifesto for project\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Creation Requests"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Creation Requests should recognize creation pattern: \"manifesto for application\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should recognize creation pattern: \"manifesto for application\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Typo Tolerance"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Typo Tolerance should handle typo: \"create manifsto\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle typo: \"create manifsto\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Typo Tolerance"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Typo Tolerance should handle typo: \"generate manfesto\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle typo: \"generate manfesto\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Typo Tolerance"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Typo Tolerance should handle typo: \"make manifets\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle typo: \"make manifets\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Typo Tolerance"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Typo Tolerance should handle typo: \"build manifest\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle typo: \"build manifest\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Typo Tolerance"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Typo Tolerance should handle typo: \"write manafesto\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle typo: \"write manafesto\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Typo Tolerance"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Typo Tolerance should handle typo: \"create manifiest\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle typo: \"create manifiest\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Non-Matching Patterns"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Non-Matching Patterns should NOT match: \"hello world\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should NOT match: \"hello world\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Non-Matching Patterns"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Non-Matching Patterns should NOT match: \"create file\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should NOT match: \"create file\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Non-Matching Patterns"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Non-Matching Patterns should NOT match: \"show code\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should NOT match: \"show code\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Non-Matching Patterns"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Non-Matching Patterns should NOT match: \"manifest destiny\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should NOT match: \"manifest destiny\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Non-Matching Patterns"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Non-Matching Patterns should NOT match: \"man page\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should NOT match: \"man page\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Non-Matching Patterns"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Non-Matching Patterns should NOT match: \"/help\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should NOT match: \"/help\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Non-Matching Patterns"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Non-Matching Patterns should NOT match: \"/code\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should NOT match: \"/code\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Recognition - EVERY Pattern Tested",
              "Non-Matching Patterns"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Recognition - EVERY Pattern Tested Non-Matching Patterns should NOT match: \"random text\"",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should NOT match: \"random text\""
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Execution - EVERY Path Tested",
              "Display Manifesto"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Execution - EVERY Path Tested Display Manifesto should display manifesto when rules exist",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should display manifesto when rules exist"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Execution - EVERY Path Tested",
              "Display Manifesto"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Execution - EVERY Path Tested Display Manifesto should display empty state when no rules exist",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should display empty state when no rules exist"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Execution - EVERY Path Tested",
              "Manifesto Generation"
            ],
            "duration": 6,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Execution - EVERY Path Tested Manifesto Generation should generate manifesto with AI assistance",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should generate manifesto with AI assistance"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Execution - EVERY Path Tested",
              "Manifesto Generation"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Execution - EVERY Path Tested Manifesto Generation should handle template-based manifesto generation",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle template-based manifesto generation"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Execution - EVERY Path Tested",
              "Manifesto Generation"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Execution - EVERY Path Tested Manifesto Generation should handle auto mode disabled scenario",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle auto mode disabled scenario"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Execution - EVERY Path Tested",
              "Manifesto Generation"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Execution - EVERY Path Tested Manifesto Generation should handle auto mode execution for generate command",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle auto mode execution for generate command"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Execution - EVERY Path Tested",
              "Manifesto Generation"
            ],
            "duration": 86,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Execution - EVERY Path Tested Manifesto Generation should handle codebase indexed scenario",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle codebase indexed scenario"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Execution - EVERY Path Tested",
              "Edge Cases - BULLETPROOF"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Execution - EVERY Path Tested Edge Cases - BULLETPROOF should handle unknown commands gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle unknown commands gracefully"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Execution - EVERY Path Tested",
              "Edge Cases - BULLETPROOF"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Execution - EVERY Path Tested Edge Cases - BULLETPROOF should handle empty command gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty command gracefully"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Execution - EVERY Path Tested",
              "Edge Cases - BULLETPROOF"
            ],
            "duration": 8,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Execution - EVERY Path Tested Edge Cases - BULLETPROOF should handle AutoModeManager execution failures",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle AutoModeManager execution failures"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Execution - EVERY Path Tested",
              "Edge Cases - BULLETPROOF"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Execution - EVERY Path Tested Edge Cases - BULLETPROOF should handle null or undefined inputs gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle null or undefined inputs gracefully"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Execution - EVERY Path Tested",
              "Edge Cases - BULLETPROOF"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Execution - EVERY Path Tested Edge Cases - BULLETPROOF should handle AutoModeManager failures",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle AutoModeManager failures"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Execution - EVERY Path Tested",
              "Input Validation - COMPREHENSIVE"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Execution - EVERY Path Tested Input Validation - COMPREHENSIVE should handle null input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle null input"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Execution - EVERY Path Tested",
              "Input Validation - COMPREHENSIVE"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Execution - EVERY Path Tested Input Validation - COMPREHENSIVE should handle undefined input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle undefined input"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Execution - EVERY Path Tested",
              "Input Validation - COMPREHENSIVE"
            ],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Execution - EVERY Path Tested Input Validation - COMPREHENSIVE should handle empty string input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty string input"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Execution - EVERY Path Tested",
              "Input Validation - COMPREHENSIVE"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Execution - EVERY Path Tested Input Validation - COMPREHENSIVE should handle whitespace-only input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle whitespace-only input"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Execution - EVERY Path Tested",
              "Input Validation - COMPREHENSIVE"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Execution - EVERY Path Tested Input Validation - COMPREHENSIVE should handle extremely long input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle extremely long input"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Execution - EVERY Path Tested",
              "Input Validation - COMPREHENSIVE"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Execution - EVERY Path Tested Input Validation - COMPREHENSIVE should handle special characters in input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle special characters in input"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Execution - EVERY Path Tested",
              "Edge Cases - NO STONE UNTURNED"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Execution - EVERY Path Tested Edge Cases - NO STONE UNTURNED should handle concurrent execution attempts",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 10,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle concurrent execution attempts"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Execution - EVERY Path Tested",
              "Edge Cases - NO STONE UNTURNED"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Execution - EVERY Path Tested Edge Cases - NO STONE UNTURNED should handle memory pressure scenarios",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle memory pressure scenarios"
          },
          {
            "ancestorTitles": [
              "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality",
              "🎯 Command Execution - EVERY Path Tested",
              "Edge Cases - NO STONE UNTURNED"
            ],
            "duration": 110,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "🐐 GOAT ManifestoCommand Tests - Industry Leading Quality 🎯 Command Execution - EVERY Path Tested Edge Cases - NO STONE UNTURNED should handle AutoModeManager timeout scenarios",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle AutoModeManager timeout scenarios"
          }
        ],
        "endTime": 1755133310743,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\commands\\__tests__\\ManifestoCommand.goat.test.ts",
        "startTime": 1755133304980,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "ManifestoCodeActionProvider",
              "Constructor"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCodeActionProvider Constructor should initialize with StateManager",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should initialize with StateManager"
          },
          {
            "ancestorTitles": [
              "ManifestoCodeActionProvider",
              "provideCodeActions"
            ],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCodeActionProvider provideCodeActions should return empty array when no diagnostics",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return empty array when no diagnostics"
          },
          {
            "ancestorTitles": [
              "ManifestoCodeActionProvider",
              "provideCodeActions"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCodeActionProvider provideCodeActions should ignore non-Manifesto Enforcer diagnostics",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should ignore non-Manifesto Enforcer diagnostics"
          },
          {
            "ancestorTitles": [
              "ManifestoCodeActionProvider",
              "provideCodeActions"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCodeActionProvider provideCodeActions should process Manifesto Enforcer diagnostics",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should process Manifesto Enforcer diagnostics"
          },
          {
            "ancestorTitles": [
              "ManifestoCodeActionProvider",
              "provideCodeActions"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCodeActionProvider provideCodeActions should handle multiple diagnostics",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle multiple diagnostics"
          },
          {
            "ancestorTitles": [
              "ManifestoCodeActionProvider",
              "createFixAction",
              "innerHTML fix"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCodeActionProvider createFixAction innerHTML fix should create innerHTML fix action",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should create innerHTML fix action"
          },
          {
            "ancestorTitles": [
              "ManifestoCodeActionProvider",
              "createFixAction",
              "innerHTML fix"
            ],
            "duration": 10,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCodeActionProvider createFixAction innerHTML fix should create WorkspaceEdit for innerHTML fix",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should create WorkspaceEdit for innerHTML fix"
          },
          {
            "ancestorTitles": [
              "ManifestoCodeActionProvider",
              "createFixAction",
              "eval() fix"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCodeActionProvider createFixAction eval() fix should create eval fix action",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should create eval fix action"
          },
          {
            "ancestorTitles": [
              "ManifestoCodeActionProvider",
              "createFixAction",
              "eval() fix"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCodeActionProvider createFixAction eval() fix should create WorkspaceEdit for eval fix",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should create WorkspaceEdit for eval fix"
          },
          {
            "ancestorTitles": [
              "ManifestoCodeActionProvider",
              "createFixAction",
              "console.log fix"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCodeActionProvider createFixAction console.log fix should create console.log fix action",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should create console.log fix action"
          },
          {
            "ancestorTitles": [
              "ManifestoCodeActionProvider",
              "createFixAction",
              "console.log fix"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCodeActionProvider createFixAction console.log fix should create WorkspaceEdit for console.log fix",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should create WorkspaceEdit for console.log fix"
          },
          {
            "ancestorTitles": [
              "ManifestoCodeActionProvider",
              "createFixAction",
              "error handling fix"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCodeActionProvider createFixAction error handling fix should create error handling fix action",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should create error handling fix action"
          },
          {
            "ancestorTitles": [
              "ManifestoCodeActionProvider",
              "createFixAction",
              "error handling fix"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCodeActionProvider createFixAction error handling fix should create WorkspaceEdit for error handling fix",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should create WorkspaceEdit for error handling fix"
          },
          {
            "ancestorTitles": [
              "ManifestoCodeActionProvider",
              "createFixAction",
              "JSDoc fix"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCodeActionProvider createFixAction JSDoc fix should create JSDoc fix action",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should create JSDoc fix action"
          },
          {
            "ancestorTitles": [
              "ManifestoCodeActionProvider",
              "createFixAction",
              "JSDoc fix"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCodeActionProvider createFixAction JSDoc fix should create WorkspaceEdit for JSDoc fix",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should create WorkspaceEdit for JSDoc fix"
          },
          {
            "ancestorTitles": [
              "ManifestoCodeActionProvider",
              "createFixAction",
              "credential fix"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCodeActionProvider createFixAction credential fix should create credential fix action",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should create credential fix action"
          },
          {
            "ancestorTitles": [
              "ManifestoCodeActionProvider",
              "createFixAction",
              "credential fix"
            ],
            "duration": 5,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCodeActionProvider createFixAction credential fix should create WorkspaceEdit for credential fix",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should create WorkspaceEdit for credential fix"
          },
          {
            "ancestorTitles": [
              "ManifestoCodeActionProvider",
              "createFixAction",
              "unknown diagnostic"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCodeActionProvider createFixAction unknown diagnostic should return undefined for unknown diagnostic types",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return undefined for unknown diagnostic types"
          },
          {
            "ancestorTitles": [
              "ManifestoCodeActionProvider",
              "createFixAction",
              "error handling"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCodeActionProvider createFixAction error handling should handle errors gracefully and return undefined",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle errors gracefully and return undefined"
          },
          {
            "ancestorTitles": [
              "ManifestoCodeActionProvider",
              "createFixAllAction"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCodeActionProvider createFixAllAction should create fix all action",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should create fix all action"
          },
          {
            "ancestorTitles": [
              "ManifestoCodeActionProvider",
              "createFixAllAction"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCodeActionProvider createFixAllAction should create WorkspaceEdit for fix all action",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should create WorkspaceEdit for fix all action"
          }
        ],
        "endTime": 1755133310741,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\diagnostics\\__tests__\\ManifestoCodeActionProvider.comprehensive.test.ts",
        "startTime": 1755133310634,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "ManifestoSaveGuard",
              "onWillSaveDocument"
            ],
            "duration": 10,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoSaveGuard onWillSaveDocument should throw error for null document",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error for null document"
          },
          {
            "ancestorTitles": [
              "ManifestoSaveGuard",
              "onWillSaveDocument"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoSaveGuard onWillSaveDocument should throw error for undefined document",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error for undefined document"
          },
          {
            "ancestorTitles": [
              "ManifestoSaveGuard",
              "onWillSaveDocument"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoSaveGuard onWillSaveDocument should allow saving compliant document",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should allow saving compliant document"
          },
          {
            "ancestorTitles": [
              "ManifestoSaveGuard",
              "onWillSaveDocument"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoSaveGuard onWillSaveDocument should show error dialog for innerHTML violation and block save when user chooses Fix Issues",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should show error dialog for innerHTML violation and block save when user chooses Fix Issues"
          },
          {
            "ancestorTitles": [
              "ManifestoSaveGuard",
              "onWillSaveDocument"
            ],
            "duration": 8,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoSaveGuard onWillSaveDocument should allow save when user chooses Save Anyway",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should allow save when user chooses Save Anyway"
          },
          {
            "ancestorTitles": [
              "ManifestoSaveGuard",
              "onWillSaveDocument"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoSaveGuard onWillSaveDocument should block save for any type violation when user chooses Fix Issues",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should block save for any type violation when user chooses Fix Issues"
          },
          {
            "ancestorTitles": [
              "ManifestoSaveGuard",
              "onWillSaveDocument"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoSaveGuard onWillSaveDocument should block save for async function without error handling",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should block save for async function without error handling"
          },
          {
            "ancestorTitles": [
              "ManifestoSaveGuard",
              "onWillSaveDocument"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoSaveGuard onWillSaveDocument should show correct count for multiple violations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should show correct count for multiple violations"
          },
          {
            "ancestorTitles": [
              "ManifestoSaveGuard",
              "onWillSaveDocument"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoSaveGuard onWillSaveDocument should allow async function with try-catch",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should allow async function with try-catch"
          },
          {
            "ancestorTitles": [
              "ManifestoSaveGuard",
              "onWillSaveDocument"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoSaveGuard onWillSaveDocument should block save when user dismisses dialog (returns undefined)",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should block save when user dismisses dialog (returns undefined)"
          },
          {
            "ancestorTitles": [
              "ManifestoSaveGuard",
              "checkManifestoCompliance"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoSaveGuard checkManifestoCompliance should detect innerHTML violations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect innerHTML violations"
          },
          {
            "ancestorTitles": [
              "ManifestoSaveGuard",
              "checkManifestoCompliance"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoSaveGuard checkManifestoCompliance should detect any type violations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect any type violations"
          },
          {
            "ancestorTitles": [
              "ManifestoSaveGuard",
              "checkManifestoCompliance"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoSaveGuard checkManifestoCompliance should detect missing error handling in async functions",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect missing error handling in async functions"
          },
          {
            "ancestorTitles": [
              "ManifestoSaveGuard",
              "checkManifestoCompliance"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoSaveGuard checkManifestoCompliance should return empty array for compliant code",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return empty array for compliant code"
          },
          {
            "ancestorTitles": [
              "ManifestoSaveGuard",
              "checkManifestoCompliance"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoSaveGuard checkManifestoCompliance should detect multiple violations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect multiple violations"
          }
        ],
        "endTime": 1755133310767,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\core\\__tests__\\ManifestoSaveGuard.test.ts",
        "startTime": 1755133310654,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "canHandle - Edge Cases"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage canHandle - Edge Cases should handle \"manifesto for project\" pattern",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle \"manifesto for project\" pattern"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "canHandle - Edge Cases"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage canHandle - Edge Cases should handle \"manifesto for app\" pattern",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle \"manifesto for app\" pattern"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "canHandle - Edge Cases"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage canHandle - Edge Cases should handle \"manifesto for application\" pattern",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle \"manifesto for application\" pattern"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "canHandle - Edge Cases"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage canHandle - Edge Cases should handle case insensitive \"manifesto for\" patterns",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle case insensitive \"manifesto for\" patterns"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "execute - Format Display Coverage"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage execute - Format Display Coverage should format and return manifesto content when available",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should format and return manifesto content when available"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "execute - Format Display Coverage"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage execute - Format Display Coverage should truncate long manifesto content",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should truncate long manifesto content"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "execute - Format Display Coverage"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage execute - Format Display Coverage should handle short manifesto content without truncation",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle short manifesto content without truncation"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "readManifestoFile - Error Handling"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage readManifestoFile - Error Handling should return null when file read throws error",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return null when file read throws error"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "readManifestoFile - Error Handling"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage readManifestoFile - Error Handling should return null by default implementation",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return null by default implementation"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "readManifestoFile - Error Handling"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage readManifestoFile - Error Handling should return content when file exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return content when file exists"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "formatManifestoDisplay - Direct Testing"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage formatManifestoDisplay - Direct Testing should format short content correctly",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should format short content correctly"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "formatManifestoDisplay - Direct Testing"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage formatManifestoDisplay - Direct Testing should format long content with truncation",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should format long content with truncation"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "formatManifestoDisplay - Direct Testing"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage formatManifestoDisplay - Direct Testing should handle exactly 2000 character content",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle exactly 2000 character content"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "formatManifestoDisplay - Direct Testing"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage formatManifestoDisplay - Direct Testing should handle 2001 character content with truncation",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle 2001 character content with truncation"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "formatManifestoDisplay - Direct Testing"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage formatManifestoDisplay - Direct Testing should handle empty content",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty content"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "Integration Tests"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage Integration Tests should handle complete workflow with valid manifesto",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle complete workflow with valid manifesto"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "Integration Tests"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage Integration Tests should handle complete workflow with no manifesto file (shows built-in)",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle complete workflow with no manifesto file (shows built-in)"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "showBuiltInManifesto - Coverage"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage showBuiltInManifesto - Coverage should show built-in manifesto when no file exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should show built-in manifesto when no file exists"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "determineManifestoType - Coverage"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage determineManifestoType - Coverage should return QA/Testing for qa input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return QA/Testing for qa input"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "determineManifestoType - Coverage"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage determineManifestoType - Coverage should return QA/Testing for testing input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return QA/Testing for testing input"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "determineManifestoType - Coverage"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage determineManifestoType - Coverage should return Security for security input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return Security for security input"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "determineManifestoType - Coverage"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage determineManifestoType - Coverage should return API for api input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return API for api input"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "determineManifestoType - Coverage"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage determineManifestoType - Coverage should return Frontend/UI for frontend input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return Frontend/UI for frontend input"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "determineManifestoType - Coverage"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage determineManifestoType - Coverage should return Frontend/UI for ui input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return Frontend/UI for ui input"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "determineManifestoType - Coverage"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage determineManifestoType - Coverage should return Performance for performance input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return Performance for performance input"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "determineManifestoType - Coverage"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage determineManifestoType - Coverage should return General for unknown input",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return General for unknown input"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "analyzeManifestoOpportunities - Coverage"
            ],
            "duration": 12,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage analyzeManifestoOpportunities - Coverage should analyze codebase and return suggestions",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should analyze codebase and return suggestions"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "analyzeManifestoOpportunities - Coverage"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage analyzeManifestoOpportunities - Coverage should handle empty codebase index",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty codebase index"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand - 100% Coverage",
              "Error Handling Coverage"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand - 100% Coverage Error Handling Coverage should handle execute errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle execute errors gracefully"
          }
        ],
        "endTime": 1755133310769,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\commands\\__tests__\\ManifestoCommand.100percent.test.ts",
        "startTime": 1755133309249,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "PiggieActionsProvider",
              "Constructor and Initialization"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieActionsProvider Constructor and Initialization should initialize with event emitter",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should initialize with event emitter"
          },
          {
            "ancestorTitles": [
              "PiggieActionsProvider",
              "Constructor and Initialization"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieActionsProvider Constructor and Initialization should have proper event emitter setup",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should have proper event emitter setup"
          },
          {
            "ancestorTitles": [
              "PiggieActionsProvider",
              "refresh"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieActionsProvider refresh should fire tree data change event",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should fire tree data change event"
          },
          {
            "ancestorTitles": [
              "PiggieActionsProvider",
              "refresh"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieActionsProvider refresh should handle multiple refresh calls",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle multiple refresh calls"
          },
          {
            "ancestorTitles": [
              "PiggieActionsProvider",
              "getTreeItem"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieActionsProvider getTreeItem should return the same element passed in",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return the same element passed in"
          },
          {
            "ancestorTitles": [
              "PiggieActionsProvider",
              "getTreeItem"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieActionsProvider getTreeItem should handle different action item types",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle different action item types"
          },
          {
            "ancestorTitles": [
              "PiggieActionsProvider",
              "getChildren"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieActionsProvider getChildren should return root level actions when no element provided",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 7,
            "retryReasons": [],
            "status": "passed",
            "title": "should return root level actions when no element provided"
          },
          {
            "ancestorTitles": [
              "PiggieActionsProvider",
              "getChildren"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieActionsProvider getChildren should return correct action items with proper commands",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should return correct action items with proper commands"
          },
          {
            "ancestorTitles": [
              "PiggieActionsProvider",
              "getChildren"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieActionsProvider getChildren should return correct tooltips and icons",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 6,
            "retryReasons": [],
            "status": "passed",
            "title": "should return correct tooltips and icons"
          },
          {
            "ancestorTitles": [
              "PiggieActionsProvider",
              "getChildren"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieActionsProvider getChildren should return empty array for child elements",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return empty array for child elements"
          },
          {
            "ancestorTitles": [
              "PiggieActionsProvider",
              "getChildren"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieActionsProvider getChildren should handle all tree item collapsible states correctly",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 6,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle all tree item collapsible states correctly"
          },
          {
            "ancestorTitles": [
              "PiggieActionsProvider",
              "ActionItem Class"
            ],
            "duration": 11,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieActionsProvider ActionItem Class should create action item with all properties",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should create action item with all properties"
          },
          {
            "ancestorTitles": [
              "PiggieActionsProvider",
              "ActionItem Class"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieActionsProvider ActionItem Class should create action item without command",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should create action item without command"
          },
          {
            "ancestorTitles": [
              "PiggieActionsProvider",
              "ActionItem Class"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieActionsProvider ActionItem Class should handle empty strings",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty strings"
          },
          {
            "ancestorTitles": [
              "PiggieActionsProvider",
              "Integration and Edge Cases"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieActionsProvider Integration and Edge Cases should handle rapid successive calls",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle rapid successive calls"
          },
          {
            "ancestorTitles": [
              "PiggieActionsProvider",
              "Integration and Edge Cases"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieActionsProvider Integration and Edge Cases should maintain consistent action order",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should maintain consistent action order"
          },
          {
            "ancestorTitles": [
              "PiggieActionsProvider",
              "Integration and Edge Cases"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "PiggieActionsProvider Integration and Edge Cases should handle provider disposal gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle provider disposal gracefully"
          }
        ],
        "endTime": 1755133310797,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\view\\__tests__\\PiggieActionsProvider.comprehensive.test.ts",
        "startTime": 1755133310708,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "TestExecutionEnforcer",
              "enforceTestsBeforeAction"
            ],
            "duration": 8,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "TestExecutionEnforcer enforceTestsBeforeAction should throw error for empty action",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error for empty action"
          },
          {
            "ancestorTitles": [
              "TestExecutionEnforcer",
              "enforceTestsBeforeAction"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "TestExecutionEnforcer enforceTestsBeforeAction should throw error for null action",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error for null action"
          },
          {
            "ancestorTitles": [
              "TestExecutionEnforcer",
              "enforceTestsBeforeAction"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "TestExecutionEnforcer enforceTestsBeforeAction should throw error for undefined action",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error for undefined action"
          },
          {
            "ancestorTitles": [
              "TestExecutionEnforcer",
              "enforceTestsBeforeAction"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "TestExecutionEnforcer enforceTestsBeforeAction should allow action when all tests are passing",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should allow action when all tests are passing"
          },
          {
            "ancestorTitles": [
              "TestExecutionEnforcer",
              "enforceTestsBeforeAction"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "TestExecutionEnforcer enforceTestsBeforeAction should block action when tests are failing",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should block action when tests are failing"
          },
          {
            "ancestorTitles": [
              "TestExecutionEnforcer",
              "enforceTestsBeforeAction"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "TestExecutionEnforcer enforceTestsBeforeAction should block action when tests are not run",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should block action when tests are not run"
          },
          {
            "ancestorTitles": [
              "TestExecutionEnforcer",
              "enforceTestsBeforeAction"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "TestExecutionEnforcer enforceTestsBeforeAction should block action when test status is unknown",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should block action when test status is unknown"
          },
          {
            "ancestorTitles": [
              "TestExecutionEnforcer",
              "enforceTestsBeforeAction"
            ],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "TestExecutionEnforcer enforceTestsBeforeAction should handle different action types",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle different action types"
          },
          {
            "ancestorTitles": [
              "TestExecutionEnforcer",
              "enforceTestsBeforeAction"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "TestExecutionEnforcer enforceTestsBeforeAction should handle action with failing tests and show specific action in error",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle action with failing tests and show specific action in error"
          },
          {
            "ancestorTitles": [
              "TestExecutionEnforcer",
              "getTestStatus"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "TestExecutionEnforcer getTestStatus should return all-passing by default",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return all-passing by default"
          },
          {
            "ancestorTitles": [
              "TestExecutionEnforcer",
              "getTestStatus"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "TestExecutionEnforcer getTestStatus should be a private method",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should be a private method"
          },
          {
            "ancestorTitles": [
              "TestExecutionEnforcer",
              "Integration scenarios"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "TestExecutionEnforcer Integration scenarios should enforce tests before critical deployment action",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should enforce tests before critical deployment action"
          },
          {
            "ancestorTitles": [
              "TestExecutionEnforcer",
              "Integration scenarios"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "TestExecutionEnforcer Integration scenarios should block critical action when tests fail",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should block critical action when tests fail"
          },
          {
            "ancestorTitles": [
              "TestExecutionEnforcer",
              "Integration scenarios"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "TestExecutionEnforcer Integration scenarios should handle multiple sequential actions",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle multiple sequential actions"
          },
          {
            "ancestorTitles": [
              "TestExecutionEnforcer",
              "Integration scenarios"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "TestExecutionEnforcer Integration scenarios should handle edge case with whitespace-only action",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle edge case with whitespace-only action"
          },
          {
            "ancestorTitles": [
              "TestExecutionEnforcer",
              "Integration scenarios"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "TestExecutionEnforcer Integration scenarios should handle very long action names",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle very long action names"
          },
          {
            "ancestorTitles": [
              "TestExecutionEnforcer",
              "Integration scenarios"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "TestExecutionEnforcer Integration scenarios should handle special characters in action names",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle special characters in action names"
          }
        ],
        "endTime": 1755133310818,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\core\\__tests__\\TestExecutionEnforcer.test.ts",
        "startTime": 1755133310738,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "ManifestoRulesProvider",
              "Constructor and Initialization"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoRulesProvider Constructor and Initialization should initialize with StateManager and event emitter",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should initialize with StateManager and event emitter"
          },
          {
            "ancestorTitles": [
              "ManifestoRulesProvider",
              "Constructor and Initialization"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoRulesProvider Constructor and Initialization should store StateManager reference",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should store StateManager reference"
          },
          {
            "ancestorTitles": [
              "ManifestoRulesProvider",
              "refresh"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoRulesProvider refresh should fire tree data change event",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should fire tree data change event"
          },
          {
            "ancestorTitles": [
              "ManifestoRulesProvider",
              "refresh"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoRulesProvider refresh should handle multiple refresh calls",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle multiple refresh calls"
          },
          {
            "ancestorTitles": [
              "ManifestoRulesProvider",
              "getTreeItem"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoRulesProvider getTreeItem should return the same element passed in",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return the same element passed in"
          },
          {
            "ancestorTitles": [
              "ManifestoRulesProvider",
              "getTreeItem"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoRulesProvider getTreeItem should handle different rule item types",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle different rule item types"
          },
          {
            "ancestorTitles": [
              "ManifestoRulesProvider",
              "getChildren"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoRulesProvider getChildren should return manifesto management actions when no element provided",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 6,
            "retryReasons": [],
            "status": "passed",
            "title": "should return manifesto management actions when no element provided"
          },
          {
            "ancestorTitles": [
              "ManifestoRulesProvider",
              "getChildren"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoRulesProvider getChildren should return correct management items with proper commands",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should return correct management items with proper commands"
          },
          {
            "ancestorTitles": [
              "ManifestoRulesProvider",
              "getChildren"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoRulesProvider getChildren should return correct tooltips and icons",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should return correct tooltips and icons"
          },
          {
            "ancestorTitles": [
              "ManifestoRulesProvider",
              "getChildren"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoRulesProvider getChildren should return empty array for child elements",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return empty array for child elements"
          },
          {
            "ancestorTitles": [
              "ManifestoRulesProvider",
              "getChildren"
            ],
            "duration": 5,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoRulesProvider getChildren should handle manifesto mode status in tooltips",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle manifesto mode status in tooltips"
          },
          {
            "ancestorTitles": [
              "ManifestoRulesProvider",
              "RuleItem Class"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoRulesProvider RuleItem Class should create rule item with all properties",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should create rule item with all properties"
          },
          {
            "ancestorTitles": [
              "ManifestoRulesProvider",
              "RuleItem Class"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoRulesProvider RuleItem Class should create rule item without command",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should create rule item without command"
          },
          {
            "ancestorTitles": [
              "ManifestoRulesProvider",
              "RuleItem Class"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoRulesProvider RuleItem Class should handle empty strings",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty strings"
          },
          {
            "ancestorTitles": [
              "ManifestoRulesProvider",
              "StateManager Integration"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoRulesProvider StateManager Integration should access StateManager manifesto rules",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should access StateManager manifesto rules"
          },
          {
            "ancestorTitles": [
              "ManifestoRulesProvider",
              "StateManager Integration"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoRulesProvider StateManager Integration should handle empty manifesto rules",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty manifesto rules"
          },
          {
            "ancestorTitles": [
              "ManifestoRulesProvider",
              "StateManager Integration"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoRulesProvider StateManager Integration should handle undefined StateManager",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle undefined StateManager"
          },
          {
            "ancestorTitles": [
              "ManifestoRulesProvider",
              "Integration and Edge Cases"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoRulesProvider Integration and Edge Cases should handle rapid successive calls",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle rapid successive calls"
          },
          {
            "ancestorTitles": [
              "ManifestoRulesProvider",
              "Integration and Edge Cases"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoRulesProvider Integration and Edge Cases should maintain consistent action order",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should maintain consistent action order"
          },
          {
            "ancestorTitles": [
              "ManifestoRulesProvider",
              "Integration and Edge Cases"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoRulesProvider Integration and Edge Cases should handle provider disposal gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle provider disposal gracefully"
          },
          {
            "ancestorTitles": [
              "ManifestoRulesProvider",
              "Integration and Edge Cases"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoRulesProvider Integration and Edge Cases should handle concurrent refresh and getChildren calls",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle concurrent refresh and getChildren calls"
          }
        ],
        "endTime": 1755133310839,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\view\\__tests__\\ManifestoRulesProvider.comprehensive.test.ts",
        "startTime": 1755133310731,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "Extension Integration Tests",
              "Command Registration Logic"
            ],
            "duration": 3,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Extension Integration Tests Command Registration Logic should have proper command naming convention",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 16,
            "retryReasons": [],
            "status": "passed",
            "title": "should have proper command naming convention"
          },
          {
            "ancestorTitles": [
              "Extension Integration Tests",
              "Mock Validation"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Extension Integration Tests Mock Validation should have proper VSCode API mocks",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 7,
            "retryReasons": [],
            "status": "passed",
            "title": "should have proper VSCode API mocks"
          },
          {
            "ancestorTitles": [
              "Extension Integration Tests",
              "Configuration Validation"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Extension Integration Tests Configuration Validation should handle workspace configuration properly",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle workspace configuration properly"
          }
        ],
        "endTime": 1755133310838,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\__tests__\\extension.integration.test.ts",
        "startTime": 1755133310778,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "SecurityReviewProvider",
              "Constructor and Initialization"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "SecurityReviewProvider Constructor and Initialization should initialize with event emitter",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should initialize with event emitter"
          },
          {
            "ancestorTitles": [
              "SecurityReviewProvider",
              "Constructor and Initialization"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "SecurityReviewProvider Constructor and Initialization should have proper event emitter setup",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should have proper event emitter setup"
          },
          {
            "ancestorTitles": [
              "SecurityReviewProvider",
              "refresh"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "SecurityReviewProvider refresh should fire tree data change event",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should fire tree data change event"
          },
          {
            "ancestorTitles": [
              "SecurityReviewProvider",
              "refresh"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "SecurityReviewProvider refresh should handle multiple refresh calls",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle multiple refresh calls"
          },
          {
            "ancestorTitles": [
              "SecurityReviewProvider",
              "getTreeItem"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "SecurityReviewProvider getTreeItem should return the same element passed in",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return the same element passed in"
          },
          {
            "ancestorTitles": [
              "SecurityReviewProvider",
              "getTreeItem"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "SecurityReviewProvider getTreeItem should handle different security item types",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle different security item types"
          },
          {
            "ancestorTitles": [
              "SecurityReviewProvider",
              "getChildren"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "SecurityReviewProvider getChildren should return root level security actions when no element provided",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 6,
            "retryReasons": [],
            "status": "passed",
            "title": "should return root level security actions when no element provided"
          },
          {
            "ancestorTitles": [
              "SecurityReviewProvider",
              "getChildren"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "SecurityReviewProvider getChildren should return correct security items with proper commands",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should return correct security items with proper commands"
          },
          {
            "ancestorTitles": [
              "SecurityReviewProvider",
              "getChildren"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "SecurityReviewProvider getChildren should return correct tooltips and icons",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should return correct tooltips and icons"
          },
          {
            "ancestorTitles": [
              "SecurityReviewProvider",
              "getChildren"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "SecurityReviewProvider getChildren should return empty array for child elements",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return empty array for child elements"
          },
          {
            "ancestorTitles": [
              "SecurityReviewProvider",
              "getChildren"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "SecurityReviewProvider getChildren should handle all tree item collapsible states correctly",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle all tree item collapsible states correctly"
          },
          {
            "ancestorTitles": [
              "SecurityReviewProvider",
              "SecurityItem Class"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "SecurityReviewProvider SecurityItem Class should create security item with all properties",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should create security item with all properties"
          },
          {
            "ancestorTitles": [
              "SecurityReviewProvider",
              "SecurityItem Class"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "SecurityReviewProvider SecurityItem Class should create security item without command",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should create security item without command"
          },
          {
            "ancestorTitles": [
              "SecurityReviewProvider",
              "SecurityItem Class"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "SecurityReviewProvider SecurityItem Class should handle empty strings",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty strings"
          },
          {
            "ancestorTitles": [
              "SecurityReviewProvider",
              "Integration and Edge Cases"
            ],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "SecurityReviewProvider Integration and Edge Cases should handle rapid successive calls",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle rapid successive calls"
          },
          {
            "ancestorTitles": [
              "SecurityReviewProvider",
              "Integration and Edge Cases"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "SecurityReviewProvider Integration and Edge Cases should maintain consistent security action order",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should maintain consistent security action order"
          },
          {
            "ancestorTitles": [
              "SecurityReviewProvider",
              "Integration and Edge Cases"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "SecurityReviewProvider Integration and Edge Cases should handle provider disposal gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle provider disposal gracefully"
          },
          {
            "ancestorTitles": [
              "SecurityReviewProvider",
              "Integration and Edge Cases"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "SecurityReviewProvider Integration and Edge Cases should handle concurrent refresh and getChildren calls",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle concurrent refresh and getChildren calls"
          }
        ],
        "endTime": 1755133310842,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\view\\__tests__\\SecurityReviewProvider.comprehensive.test.ts",
        "startTime": 1755133310759,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "AIComplianceVerifier",
              "verifyAIResponse"
            ],
            "duration": 8,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AIComplianceVerifier verifyAIResponse should throw error for empty response",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error for empty response"
          },
          {
            "ancestorTitles": [
              "AIComplianceVerifier",
              "verifyAIResponse"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AIComplianceVerifier verifyAIResponse should throw error for null response",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error for null response"
          },
          {
            "ancestorTitles": [
              "AIComplianceVerifier",
              "verifyAIResponse"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AIComplianceVerifier verifyAIResponse should throw error for undefined response",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw error for undefined response"
          },
          {
            "ancestorTitles": [
              "AIComplianceVerifier",
              "verifyAIResponse"
            ],
            "duration": 5,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AIComplianceVerifier verifyAIResponse should return true for compliant response",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return true for compliant response"
          },
          {
            "ancestorTitles": [
              "AIComplianceVerifier",
              "verifyAIResponse"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AIComplianceVerifier verifyAIResponse should return false for response with innerHTML violation",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should return false for response with innerHTML violation"
          },
          {
            "ancestorTitles": [
              "AIComplianceVerifier",
              "verifyAIResponse"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AIComplianceVerifier verifyAIResponse should return false for response with any type violation",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should return false for response with any type violation"
          },
          {
            "ancestorTitles": [
              "AIComplianceVerifier",
              "verifyAIResponse"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AIComplianceVerifier verifyAIResponse should return false for async function without error handling",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should return false for async function without error handling"
          },
          {
            "ancestorTitles": [
              "AIComplianceVerifier",
              "verifyAIResponse"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AIComplianceVerifier verifyAIResponse should return false for multiple violations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should return false for multiple violations"
          },
          {
            "ancestorTitles": [
              "AIComplianceVerifier",
              "verifyAIResponse"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AIComplianceVerifier verifyAIResponse should allow async function with try-catch",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should allow async function with try-catch"
          },
          {
            "ancestorTitles": [
              "AIComplianceVerifier",
              "verifyAIResponse"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AIComplianceVerifier verifyAIResponse should allow async function with catch block",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should allow async function with catch block"
          },
          {
            "ancestorTitles": [
              "AIComplianceVerifier",
              "scanForViolations"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AIComplianceVerifier scanForViolations should detect innerHTML violations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect innerHTML violations"
          },
          {
            "ancestorTitles": [
              "AIComplianceVerifier",
              "scanForViolations"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AIComplianceVerifier scanForViolations should detect any type violations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect any type violations"
          },
          {
            "ancestorTitles": [
              "AIComplianceVerifier",
              "scanForViolations"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AIComplianceVerifier scanForViolations should detect missing error handling in async functions",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect missing error handling in async functions"
          },
          {
            "ancestorTitles": [
              "AIComplianceVerifier",
              "scanForViolations"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AIComplianceVerifier scanForViolations should return empty array for compliant code",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return empty array for compliant code"
          },
          {
            "ancestorTitles": [
              "AIComplianceVerifier",
              "reportAIViolation"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AIComplianceVerifier reportAIViolation should log violations to console",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should log violations to console"
          },
          {
            "ancestorTitles": [
              "AIComplianceVerifier",
              "reportAIViolation"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AIComplianceVerifier reportAIViolation should handle multiple violations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle multiple violations"
          },
          {
            "ancestorTitles": [
              "AIComplianceVerifier",
              "reportAIViolation"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "AIComplianceVerifier reportAIViolation should handle empty violations array",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle empty violations array"
          }
        ],
        "endTime": 1755133310861,
        "message": "",
        "name": "D:\\Manifesto Compliance\\src\\core\\__tests__\\AIComplianceVerifier.test.ts",
        "startTime": 1755133310780,
        "status": "passed",
        "summary": ""
      },
      {
        "assertionResults": [
          {
            "ancestorTitles": [
              "ManifestoCommand Integration",
              "canHandle - Real World Input Validation"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand Integration canHandle - Real World Input Validation should handle slash commands",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle slash commands"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand Integration",
              "canHandle - Real World Input Validation"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand Integration canHandle - Real World Input Validation should handle manifesto display requests",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle manifesto display requests"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand Integration",
              "canHandle - Real World Input Validation"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand Integration canHandle - Real World Input Validation should handle perfect manifesto generation requests",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle perfect manifesto generation requests"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand Integration",
              "canHandle - Real World Input Validation"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand Integration canHandle - Real World Input Validation should handle real-world typos and variations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 9,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle real-world typos and variations"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand Integration",
              "canHandle - Real World Input Validation"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand Integration canHandle - Real World Input Validation should handle project-specific requests",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle project-specific requests"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand Integration",
              "canHandle - Real World Input Validation"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand Integration canHandle - Real World Input Validation should not handle unrelated requests",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should not handle unrelated requests"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand Integration",
              "canHandle - Real World Input Validation"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand Integration canHandle - Real World Input Validation should prioritize over CodeCommand for manifesto requests",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should prioritize over CodeCommand for manifesto requests"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand Integration",
              "execute - manifesto generation for empty projects"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand Integration execute - manifesto generation for empty projects should generate general manifesto with action buttons",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 7,
            "retryReasons": [],
            "status": "passed",
            "title": "should generate general manifesto with action buttons"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand Integration",
              "execute - manifesto generation for empty projects"
            ],
            "duration": 1,
            "failureDetails": [
              {
                "matcherResult": {
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\nExpected substring: \u001b[32m\"data-action-command=\\\"createHelloWorld\\\"\"\u001b[39m\nReceived string:    \u001b[31m\"📋 **General Manifesto Template**·\u001b[39m\n\u001b[31m🚀 **Perfect for new projects!** I'll create a comprehensive manifesto template for you.·\u001b[39m\n\u001b[31m**Detected Project Type:** React·\u001b[39m\n\u001b[31m**📋 Generated Manifesto Preview:**·\u001b[39m\n\u001b[31m```markdown\u001b[39m\n\u001b[31m# General Development Manifesto·\u001b[39m\n\u001b[31m## CRITICAL INSTRUCTIONS:\u001b[39m\n\u001b[31mFollow EVERY principle in the manifesto above·\u001b[39m\n\u001b[31m### 1. CODE QUALITY ENFORCEMENT\u001b[39m\n\u001b[31m- **MANDATORY:** All code must include comprehensive error handling\u001b[39m\n\u001b[31m- **MANDATORY:** All public functions require JSDoc documentation\u001b[39m\n\u001b[31m- **MANDATORY:** All busines...\u001b[39m\n\u001b[31m```·\u001b[39m\n\u001b[31m**🎯 Ready to create your manifesto file!**\u001b[39m\n\u001b[31mClick the button below to create `manifesto.md` in your project root.·\u001b[39m\n\u001b[31m**Next Steps After Creation:**\u001b[39m\n\u001b[31m• Create your first file and I'll help you follow these standards\u001b[39m\n\u001b[31m• Try: \\\"Create a hello world script in [language]\\\"\u001b[39m\n\u001b[31m• Use `/lint` to check compliance as you code·\u001b[39m\n\u001b[31m**Actions:**\u001b[39m\n\u001b[31m<div class=\\\"chat-actions\\\">\u001b[39m\n\u001b[31m<button class=\\\"action-button success\\\" data-action-command=\\\"createManifesto\\\" data-action-id=\\\"create-manifesto\\\" data-action-data='{\\\"content\\\":\\\"# General Development Manifesto\\\\n\\\\n## CRITICAL INSTRUCTIONS:\\\\nFollow EVERY principle in the manifesto above\\\\n\\\\n### 1. CODE QUALITY ENFORCEMENT\\\\n- **MANDATORY:** All code must include comprehensive error handling\\\\n- **MANDATORY:** All public functions require JSDoc documentation\\\\n- **MANDATORY:** All business logic must have corresponding unit tests\\\\n- **MANDATORY:** Code coverage must be maintained above 80%\\\\n\\\\n### 2. ARCHITECTURE COMPLIANCE\\\\n- **ENFORCE:** SOLID principles in all class designs\\\\n- **ENFORCE:** Dependency injection patterns where applicable\\\\n- **ENFORCE:** Interface-based programming for services\\\\n- **ENFORCE:** Repository pattern for data access\\\\n\\\\n### 3. SECURITY REQUIREMENTS\\\\n- **CRITICAL:** Input validation on all user-facing functions\\\\n- **CRITICAL:** No innerHTML usage (XSS prevention)\\\\n- **CRITICAL:** Proper authentication and authorization\\\\n- **CRITICAL:** Secure data handling and encryption\\\\n\\\\n### 4. REACT SPECIFIC STANDARDS\\\\n- **ENFORCE:** Functional components with hooks\\\\n- **ENFORCE:** PropTypes or TypeScript for type safety\\\\n- **ENFORCE:** React Testing Library for component tests\\\\n- **ENFORCE:** ESLint React rules compliance\\\\n\\\\n### 5. COMPLIANCE VALIDATION\\\\n- **MANDATORY:** All code must pass manifesto compliance checks\\\\n- **MANDATORY:** Use `/lint` command to validate compliance\\\\n- **MANDATORY:** Address all CRITICAL and ENFORCE violations before commit\\\\n- **RECOMMENDED:** Regular code reviews with manifesto focus\\\\n\\\\n---\\\\n*Generated by Piggie Manifesto Enforcer*\\\\n*Customize this manifesto to fit your specific project needs*\\\",\\\"type\\\":\\\"General\\\"}'>📋 Create manifesto.md</button>\u001b[39m\n\u001b[31m<button class=\\\"action-button secondary\\\" data-action-command=\\\"previewManifesto\\\" data-action-id=\\\"preview-manifesto\\\" data-action-data='{\\\"content\\\":\\\"# General Development Manifesto\\\\n\\\\n## CRITICAL INSTRUCTIONS:\\\\nFollow EVERY principle in the manifesto above\\\\n\\\\n### 1. CODE QUALITY ENFORCEMENT\\\\n- **MANDATORY:** All code must include comprehensive error handling\\\\n- **MANDATORY:** All public functions require JSDoc documentation\\\\n- **MANDATORY:** All business logic must have corresponding unit tests\\\\n- **MANDATORY:** Code coverage must be maintained above 80%\\\\n\\\\n### 2. ARCHITECTURE COMPLIANCE\\\\n- **ENFORCE:** SOLID principles in all class designs\\\\n- **ENFORCE:** Dependency injection patterns where applicable\\\\n- **ENFORCE:** Interface-based programming for services\\\\n- **ENFORCE:** Repository pattern for data access\\\\n\\\\n### 3. SECURITY REQUIREMENTS\\\\n- **CRITICAL:** Input validation on all user-facing functions\\\\n- **CRITICAL:** No innerHTML usage (XSS prevention)\\\\n- **CRITICAL:** Proper authentication and authorization\\\\n- **CRITICAL:** Secure data handling and encryption\\\\n\\\\n### 4. REACT SPECIFIC STANDARDS\\\\n- **ENFORCE:** Functional components with hooks\\\\n- **ENFORCE:** PropTypes or TypeScript for type safety\\\\n- **ENFORCE:** React Testing Library for component tests\\\\n- **ENFORCE:** ESLint React rules compliance\\\\n\\\\n### 5. COMPLIANCE VALIDATION\\\\n- **MANDATORY:** All code must pass manifesto compliance checks\\\\n- **MANDATORY:** Use `/lint` command to validate compliance\\\\n- **MANDATORY:** Address all CRITICAL and ENFORCE violations before commit\\\\n- **RECOMMENDED:** Regular code reviews with manifesto focus\\\\n\\\\n---\\\\n*Generated by Piggie Manifesto Enforcer*\\\\n*Customize this manifesto to fit your specific project needs*\\\",\\\"type\\\":\\\"General\\\"}'>👁️ Preview Full Content</button>\u001b[39m\n\u001b[31m<button class=\\\"action-button primary\\\" data-action-command=\\\"executeTddWorkflow\\\" data-action-id=\\\"create-hello-world\\\" data-action-data='{\\\"content\\\":\\\"Create a simple 'Hello, World!' script in React.\\\"}'>🚀 Create Hello World (React)</button>\u001b[39m\n\u001b[31m</div>\"\u001b[39m",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\nExpected substring: \u001b[32m\"data-action-command=\\\"createHelloWorld\\\"\"\u001b[39m\nReceived string:    \u001b[31m\"📋 **General Manifesto Template**·\u001b[39m\n\u001b[31m🚀 **Perfect for new projects!** I'll create a comprehensive manifesto template for you.·\u001b[39m\n\u001b[31m**Detected Project Type:** React·\u001b[39m\n\u001b[31m**📋 Generated Manifesto Preview:**·\u001b[39m\n\u001b[31m```markdown\u001b[39m\n\u001b[31m# General Development Manifesto·\u001b[39m\n\u001b[31m## CRITICAL INSTRUCTIONS:\u001b[39m\n\u001b[31mFollow EVERY principle in the manifesto above·\u001b[39m\n\u001b[31m### 1. CODE QUALITY ENFORCEMENT\u001b[39m\n\u001b[31m- **MANDATORY:** All code must include comprehensive error handling\u001b[39m\n\u001b[31m- **MANDATORY:** All public functions require JSDoc documentation\u001b[39m\n\u001b[31m- **MANDATORY:** All busines...\u001b[39m\n\u001b[31m```·\u001b[39m\n\u001b[31m**🎯 Ready to create your manifesto file!**\u001b[39m\n\u001b[31mClick the button below to create `manifesto.md` in your project root.·\u001b[39m\n\u001b[31m**Next Steps After Creation:**\u001b[39m\n\u001b[31m• Create your first file and I'll help you follow these standards\u001b[39m\n\u001b[31m• Try: \\\"Create a hello world script in [language]\\\"\u001b[39m\n\u001b[31m• Use `/lint` to check compliance as you code·\u001b[39m\n\u001b[31m**Actions:**\u001b[39m\n\u001b[31m<div class=\\\"chat-actions\\\">\u001b[39m\n\u001b[31m<button class=\\\"action-button success\\\" data-action-command=\\\"createManifesto\\\" data-action-id=\\\"create-manifesto\\\" data-action-data='{\\\"content\\\":\\\"# General Development Manifesto\\\\n\\\\n## CRITICAL INSTRUCTIONS:\\\\nFollow EVERY principle in the manifesto above\\\\n\\\\n### 1. CODE QUALITY ENFORCEMENT\\\\n- **MANDATORY:** All code must include comprehensive error handling\\\\n- **MANDATORY:** All public functions require JSDoc documentation\\\\n- **MANDATORY:** All business logic must have corresponding unit tests\\\\n- **MANDATORY:** Code coverage must be maintained above 80%\\\\n\\\\n### 2. ARCHITECTURE COMPLIANCE\\\\n- **ENFORCE:** SOLID principles in all class designs\\\\n- **ENFORCE:** Dependency injection patterns where applicable\\\\n- **ENFORCE:** Interface-based programming for services\\\\n- **ENFORCE:** Repository pattern for data access\\\\n\\\\n### 3. SECURITY REQUIREMENTS\\\\n- **CRITICAL:** Input validation on all user-facing functions\\\\n- **CRITICAL:** No innerHTML usage (XSS prevention)\\\\n- **CRITICAL:** Proper authentication and authorization\\\\n- **CRITICAL:** Secure data handling and encryption\\\\n\\\\n### 4. REACT SPECIFIC STANDARDS\\\\n- **ENFORCE:** Functional components with hooks\\\\n- **ENFORCE:** PropTypes or TypeScript for type safety\\\\n- **ENFORCE:** React Testing Library for component tests\\\\n- **ENFORCE:** ESLint React rules compliance\\\\n\\\\n### 5. COMPLIANCE VALIDATION\\\\n- **MANDATORY:** All code must pass manifesto compliance checks\\\\n- **MANDATORY:** Use `/lint` command to validate compliance\\\\n- **MANDATORY:** Address all CRITICAL and ENFORCE violations before commit\\\\n- **RECOMMENDED:** Regular code reviews with manifesto focus\\\\n\\\\n---\\\\n*Generated by Piggie Manifesto Enforcer*\\\\n*Customize this manifesto to fit your specific project needs*\\\",\\\"type\\\":\\\"General\\\"}'>📋 Create manifesto.md</button>\u001b[39m\n\u001b[31m<button class=\\\"action-button secondary\\\" data-action-command=\\\"previewManifesto\\\" data-action-id=\\\"preview-manifesto\\\" data-action-data='{\\\"content\\\":\\\"# General Development Manifesto\\\\n\\\\n## CRITICAL INSTRUCTIONS:\\\\nFollow EVERY principle in the manifesto above\\\\n\\\\n### 1. CODE QUALITY ENFORCEMENT\\\\n- **MANDATORY:** All code must include comprehensive error handling\\\\n- **MANDATORY:** All public functions require JSDoc documentation\\\\n- **MANDATORY:** All business logic must have corresponding unit tests\\\\n- **MANDATORY:** Code coverage must be maintained above 80%\\\\n\\\\n### 2. ARCHITECTURE COMPLIANCE\\\\n- **ENFORCE:** SOLID principles in all class designs\\\\n- **ENFORCE:** Dependency injection patterns where applicable\\\\n- **ENFORCE:** Interface-based programming for services\\\\n- **ENFORCE:** Repository pattern for data access\\\\n\\\\n### 3. SECURITY REQUIREMENTS\\\\n- **CRITICAL:** Input validation on all user-facing functions\\\\n- **CRITICAL:** No innerHTML usage (XSS prevention)\\\\n- **CRITICAL:** Proper authentication and authorization\\\\n- **CRITICAL:** Secure data handling and encryption\\\\n\\\\n### 4. REACT SPECIFIC STANDARDS\\\\n- **ENFORCE:** Functional components with hooks\\\\n- **ENFORCE:** PropTypes or TypeScript for type safety\\\\n- **ENFORCE:** React Testing Library for component tests\\\\n- **ENFORCE:** ESLint React rules compliance\\\\n\\\\n### 5. COMPLIANCE VALIDATION\\\\n- **MANDATORY:** All code must pass manifesto compliance checks\\\\n- **MANDATORY:** Use `/lint` command to validate compliance\\\\n- **MANDATORY:** Address all CRITICAL and ENFORCE violations before commit\\\\n- **RECOMMENDED:** Regular code reviews with manifesto focus\\\\n\\\\n---\\\\n*Generated by Piggie Manifesto Enforcer*\\\\n*Customize this manifesto to fit your specific project needs*\\\",\\\"type\\\":\\\"General\\\"}'>👁️ Preview Full Content</button>\u001b[39m\n\u001b[31m<button class=\\\"action-button primary\\\" data-action-command=\\\"executeTddWorkflow\\\" data-action-id=\\\"create-hello-world\\\" data-action-data='{\\\"content\\\":\\\"Create a simple 'Hello, World!' script in React.\\\"}'>🚀 Create Hello World (React)</button>\u001b[39m\n\u001b[31m</div>\"\u001b[39m\n    at Object.<anonymous> (D:\\Manifesto Compliance\\src\\commands\\__tests__\\ManifestoCommand.integration.test.ts:131:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"
            ],
            "fullName": "ManifestoCommand Integration execute - manifesto generation for empty projects should detect React project type",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "failed",
            "title": "should detect React project type"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand Integration",
              "execute - manifesto generation for empty projects"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand Integration execute - manifesto generation for empty projects should detect Python project type",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect Python project type"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand Integration",
              "execute - manifesto generation for empty projects"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand Integration execute - manifesto generation for empty projects should detect Node.js project type with typos",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect Node.js project type with typos"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand Integration",
              "execute - manifesto generation for empty projects"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand Integration execute - manifesto generation for empty projects should handle various Node.js spelling variations",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle various Node.js spelling variations"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand Integration",
              "execute - manifesto generation for empty projects"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand Integration execute - manifesto generation for empty projects should generate QA manifesto type",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should generate QA manifesto type"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand Integration",
              "execute - manifesto generation for empty projects"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand Integration execute - manifesto generation for empty projects should generate Security manifesto type",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 3,
            "retryReasons": [],
            "status": "passed",
            "title": "should generate Security manifesto type"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand Integration",
              "execute - manifesto display"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand Integration execute - manifesto display should show built-in manifesto when no file exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should show built-in manifesto when no file exists"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand Integration",
              "execute - manifesto display"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand Integration execute - manifesto display should handle manifesto display with existing rules",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle manifesto display with existing rules"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand Integration",
              "project type detection"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand Integration project type detection should detect various JavaScript frameworks",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect various JavaScript frameworks"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand Integration",
              "project type detection"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand Integration project type detection should detect backend technologies",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should detect backend technologies"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand Integration",
              "manifesto content generation"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand Integration manifesto content generation should generate comprehensive manifesto content",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 9,
            "retryReasons": [],
            "status": "passed",
            "title": "should generate comprehensive manifesto content"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand Integration",
              "manifesto content generation"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand Integration manifesto content generation should include project-specific rules when type detected",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 4,
            "retryReasons": [],
            "status": "passed",
            "title": "should include project-specific rules when type detected"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand Integration",
              "action button generation"
            ],
            "duration": 1,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand Integration action button generation should always include manifesto creation button",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should always include manifesto creation button"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand Integration",
              "action button generation"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand Integration action button generation should include preview button",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should include preview button"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand Integration",
              "action button generation"
            ],
            "duration": 0,
            "failureDetails": [
              {
                "matcherResult": {
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\nExpected substring: \u001b[32m\"data-action-command=\\\"createHelloWorld\\\"\"\u001b[39m\nReceived string:    \u001b[31m\"📋 **General Manifesto Template**·\u001b[39m\n\u001b[31m🚀 **Perfect for new projects!** I'll create a comprehensive manifesto template for you.·\u001b[39m\n\u001b[31m**Detected Project Type:** TypeScript·\u001b[39m\n\u001b[31m**📋 Generated Manifesto Preview:**·\u001b[39m\n\u001b[31m```markdown\u001b[39m\n\u001b[31m# General Development Manifesto·\u001b[39m\n\u001b[31m## CRITICAL INSTRUCTIONS:\u001b[39m\n\u001b[31mFollow EVERY principle in the manifesto above·\u001b[39m\n\u001b[31m### 1. CODE QUALITY ENFORCEMENT\u001b[39m\n\u001b[31m- **MANDATORY:** All code must include comprehensive error handling\u001b[39m\n\u001b[31m- **MANDATORY:** All public functions require JSDoc documentation\u001b[39m\n\u001b[31m- **MANDATORY:** All busines...\u001b[39m\n\u001b[31m```·\u001b[39m\n\u001b[31m**🎯 Ready to create your manifesto file!**\u001b[39m\n\u001b[31mClick the button below to create `manifesto.md` in your project root.·\u001b[39m\n\u001b[31m**Next Steps After Creation:**\u001b[39m\n\u001b[31m• Create your first file and I'll help you follow these standards\u001b[39m\n\u001b[31m• Try: \\\"Create a hello world script in [language]\\\"\u001b[39m\n\u001b[31m• Use `/lint` to check compliance as you code·\u001b[39m\n\u001b[31m**Actions:**\u001b[39m\n\u001b[31m<div class=\\\"chat-actions\\\">\u001b[39m\n\u001b[31m<button class=\\\"action-button success\\\" data-action-command=\\\"createManifesto\\\" data-action-id=\\\"create-manifesto\\\" data-action-data='{\\\"content\\\":\\\"# General Development Manifesto\\\\n\\\\n## CRITICAL INSTRUCTIONS:\\\\nFollow EVERY principle in the manifesto above\\\\n\\\\n### 1. CODE QUALITY ENFORCEMENT\\\\n- **MANDATORY:** All code must include comprehensive error handling\\\\n- **MANDATORY:** All public functions require JSDoc documentation\\\\n- **MANDATORY:** All business logic must have corresponding unit tests\\\\n- **MANDATORY:** Code coverage must be maintained above 80%\\\\n\\\\n### 2. ARCHITECTURE COMPLIANCE\\\\n- **ENFORCE:** SOLID principles in all class designs\\\\n- **ENFORCE:** Dependency injection patterns where applicable\\\\n- **ENFORCE:** Interface-based programming for services\\\\n- **ENFORCE:** Repository pattern for data access\\\\n\\\\n### 3. SECURITY REQUIREMENTS\\\\n- **CRITICAL:** Input validation on all user-facing functions\\\\n- **CRITICAL:** No innerHTML usage (XSS prevention)\\\\n- **CRITICAL:** Proper authentication and authorization\\\\n- **CRITICAL:** Secure data handling and encryption\\\\n\\\\n### 4. TYPESCRIPT SPECIFIC STANDARDS\\\\n- **ENFORCE:** Strict TypeScript configuration\\\\n- **ENFORCE:** Interface definitions for all data structures\\\\n- **ENFORCE:** No any types without justification\\\\n- **ENFORCE:** TSDoc comments for public APIs\\\\n\\\\n### 5. COMPLIANCE VALIDATION\\\\n- **MANDATORY:** All code must pass manifesto compliance checks\\\\n- **MANDATORY:** Use `/lint` command to validate compliance\\\\n- **MANDATORY:** Address all CRITICAL and ENFORCE violations before commit\\\\n- **RECOMMENDED:** Regular code reviews with manifesto focus\\\\n\\\\n---\\\\n*Generated by Piggie Manifesto Enforcer*\\\\n*Customize this manifesto to fit your specific project needs*\\\",\\\"type\\\":\\\"General\\\"}'>📋 Create manifesto.md</button>\u001b[39m\n\u001b[31m<button class=\\\"action-button secondary\\\" data-action-command=\\\"previewManifesto\\\" data-action-id=\\\"preview-manifesto\\\" data-action-data='{\\\"content\\\":\\\"# General Development Manifesto\\\\n\\\\n## CRITICAL INSTRUCTIONS:\\\\nFollow EVERY principle in the manifesto above\\\\n\\\\n### 1. CODE QUALITY ENFORCEMENT\\\\n- **MANDATORY:** All code must include comprehensive error handling\\\\n- **MANDATORY:** All public functions require JSDoc documentation\\\\n- **MANDATORY:** All business logic must have corresponding unit tests\\\\n- **MANDATORY:** Code coverage must be maintained above 80%\\\\n\\\\n### 2. ARCHITECTURE COMPLIANCE\\\\n- **ENFORCE:** SOLID principles in all class designs\\\\n- **ENFORCE:** Dependency injection patterns where applicable\\\\n- **ENFORCE:** Interface-based programming for services\\\\n- **ENFORCE:** Repository pattern for data access\\\\n\\\\n### 3. SECURITY REQUIREMENTS\\\\n- **CRITICAL:** Input validation on all user-facing functions\\\\n- **CRITICAL:** No innerHTML usage (XSS prevention)\\\\n- **CRITICAL:** Proper authentication and authorization\\\\n- **CRITICAL:** Secure data handling and encryption\\\\n\\\\n### 4. TYPESCRIPT SPECIFIC STANDARDS\\\\n- **ENFORCE:** Strict TypeScript configuration\\\\n- **ENFORCE:** Interface definitions for all data structures\\\\n- **ENFORCE:** No any types without justification\\\\n- **ENFORCE:** TSDoc comments for public APIs\\\\n\\\\n### 5. COMPLIANCE VALIDATION\\\\n- **MANDATORY:** All code must pass manifesto compliance checks\\\\n- **MANDATORY:** Use `/lint` command to validate compliance\\\\n- **MANDATORY:** Address all CRITICAL and ENFORCE violations before commit\\\\n- **RECOMMENDED:** Regular code reviews with manifesto focus\\\\n\\\\n---\\\\n*Generated by Piggie Manifesto Enforcer*\\\\n*Customize this manifesto to fit your specific project needs*\\\",\\\"type\\\":\\\"General\\\"}'>👁️ Preview Full Content</button>\u001b[39m\n\u001b[31m<button class=\\\"action-button primary\\\" data-action-command=\\\"executeTddWorkflow\\\" data-action-id=\\\"create-hello-world\\\" data-action-data='{\\\"content\\\":\\\"Create a simple 'Hello, World!' script in TypeScript.\\\"}'>🚀 Create Hello World (TypeScript)</button>\u001b[39m\n\u001b[31m</div>\"\u001b[39m",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\nExpected substring: \u001b[32m\"data-action-command=\\\"createHelloWorld\\\"\"\u001b[39m\nReceived string:    \u001b[31m\"📋 **General Manifesto Template**·\u001b[39m\n\u001b[31m🚀 **Perfect for new projects!** I'll create a comprehensive manifesto template for you.·\u001b[39m\n\u001b[31m**Detected Project Type:** TypeScript·\u001b[39m\n\u001b[31m**📋 Generated Manifesto Preview:**·\u001b[39m\n\u001b[31m```markdown\u001b[39m\n\u001b[31m# General Development Manifesto·\u001b[39m\n\u001b[31m## CRITICAL INSTRUCTIONS:\u001b[39m\n\u001b[31mFollow EVERY principle in the manifesto above·\u001b[39m\n\u001b[31m### 1. CODE QUALITY ENFORCEMENT\u001b[39m\n\u001b[31m- **MANDATORY:** All code must include comprehensive error handling\u001b[39m\n\u001b[31m- **MANDATORY:** All public functions require JSDoc documentation\u001b[39m\n\u001b[31m- **MANDATORY:** All busines...\u001b[39m\n\u001b[31m```·\u001b[39m\n\u001b[31m**🎯 Ready to create your manifesto file!**\u001b[39m\n\u001b[31mClick the button below to create `manifesto.md` in your project root.·\u001b[39m\n\u001b[31m**Next Steps After Creation:**\u001b[39m\n\u001b[31m• Create your first file and I'll help you follow these standards\u001b[39m\n\u001b[31m• Try: \\\"Create a hello world script in [language]\\\"\u001b[39m\n\u001b[31m• Use `/lint` to check compliance as you code·\u001b[39m\n\u001b[31m**Actions:**\u001b[39m\n\u001b[31m<div class=\\\"chat-actions\\\">\u001b[39m\n\u001b[31m<button class=\\\"action-button success\\\" data-action-command=\\\"createManifesto\\\" data-action-id=\\\"create-manifesto\\\" data-action-data='{\\\"content\\\":\\\"# General Development Manifesto\\\\n\\\\n## CRITICAL INSTRUCTIONS:\\\\nFollow EVERY principle in the manifesto above\\\\n\\\\n### 1. CODE QUALITY ENFORCEMENT\\\\n- **MANDATORY:** All code must include comprehensive error handling\\\\n- **MANDATORY:** All public functions require JSDoc documentation\\\\n- **MANDATORY:** All business logic must have corresponding unit tests\\\\n- **MANDATORY:** Code coverage must be maintained above 80%\\\\n\\\\n### 2. ARCHITECTURE COMPLIANCE\\\\n- **ENFORCE:** SOLID principles in all class designs\\\\n- **ENFORCE:** Dependency injection patterns where applicable\\\\n- **ENFORCE:** Interface-based programming for services\\\\n- **ENFORCE:** Repository pattern for data access\\\\n\\\\n### 3. SECURITY REQUIREMENTS\\\\n- **CRITICAL:** Input validation on all user-facing functions\\\\n- **CRITICAL:** No innerHTML usage (XSS prevention)\\\\n- **CRITICAL:** Proper authentication and authorization\\\\n- **CRITICAL:** Secure data handling and encryption\\\\n\\\\n### 4. TYPESCRIPT SPECIFIC STANDARDS\\\\n- **ENFORCE:** Strict TypeScript configuration\\\\n- **ENFORCE:** Interface definitions for all data structures\\\\n- **ENFORCE:** No any types without justification\\\\n- **ENFORCE:** TSDoc comments for public APIs\\\\n\\\\n### 5. COMPLIANCE VALIDATION\\\\n- **MANDATORY:** All code must pass manifesto compliance checks\\\\n- **MANDATORY:** Use `/lint` command to validate compliance\\\\n- **MANDATORY:** Address all CRITICAL and ENFORCE violations before commit\\\\n- **RECOMMENDED:** Regular code reviews with manifesto focus\\\\n\\\\n---\\\\n*Generated by Piggie Manifesto Enforcer*\\\\n*Customize this manifesto to fit your specific project needs*\\\",\\\"type\\\":\\\"General\\\"}'>📋 Create manifesto.md</button>\u001b[39m\n\u001b[31m<button class=\\\"action-button secondary\\\" data-action-command=\\\"previewManifesto\\\" data-action-id=\\\"preview-manifesto\\\" data-action-data='{\\\"content\\\":\\\"# General Development Manifesto\\\\n\\\\n## CRITICAL INSTRUCTIONS:\\\\nFollow EVERY principle in the manifesto above\\\\n\\\\n### 1. CODE QUALITY ENFORCEMENT\\\\n- **MANDATORY:** All code must include comprehensive error handling\\\\n- **MANDATORY:** All public functions require JSDoc documentation\\\\n- **MANDATORY:** All business logic must have corresponding unit tests\\\\n- **MANDATORY:** Code coverage must be maintained above 80%\\\\n\\\\n### 2. ARCHITECTURE COMPLIANCE\\\\n- **ENFORCE:** SOLID principles in all class designs\\\\n- **ENFORCE:** Dependency injection patterns where applicable\\\\n- **ENFORCE:** Interface-based programming for services\\\\n- **ENFORCE:** Repository pattern for data access\\\\n\\\\n### 3. SECURITY REQUIREMENTS\\\\n- **CRITICAL:** Input validation on all user-facing functions\\\\n- **CRITICAL:** No innerHTML usage (XSS prevention)\\\\n- **CRITICAL:** Proper authentication and authorization\\\\n- **CRITICAL:** Secure data handling and encryption\\\\n\\\\n### 4. TYPESCRIPT SPECIFIC STANDARDS\\\\n- **ENFORCE:** Strict TypeScript configuration\\\\n- **ENFORCE:** Interface definitions for all data structures\\\\n- **ENFORCE:** No any types without justification\\\\n- **ENFORCE:** TSDoc comments for public APIs\\\\n\\\\n### 5. COMPLIANCE VALIDATION\\\\n- **MANDATORY:** All code must pass manifesto compliance checks\\\\n- **MANDATORY:** Use `/lint` command to validate compliance\\\\n- **MANDATORY:** Address all CRITICAL and ENFORCE violations before commit\\\\n- **RECOMMENDED:** Regular code reviews with manifesto focus\\\\n\\\\n---\\\\n*Generated by Piggie Manifesto Enforcer*\\\\n*Customize this manifesto to fit your specific project needs*\\\",\\\"type\\\":\\\"General\\\"}'>👁️ Preview Full Content</button>\u001b[39m\n\u001b[31m<button class=\\\"action-button primary\\\" data-action-command=\\\"executeTddWorkflow\\\" data-action-id=\\\"create-hello-world\\\" data-action-data='{\\\"content\\\":\\\"Create a simple 'Hello, World!' script in TypeScript.\\\"}'>🚀 Create Hello World (TypeScript)</button>\u001b[39m\n\u001b[31m</div>\"\u001b[39m\n    at Object.<anonymous> (D:\\Manifesto Compliance\\src\\commands\\__tests__\\ManifestoCommand.integration.test.ts:314:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"
            ],
            "fullName": "ManifestoCommand Integration action button generation should include hello world button when project type detected",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "retryReasons": [],
            "status": "failed",
            "title": "should include hello world button when project type detected"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand Integration",
              "action button generation"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand Integration action button generation should not include hello world button when no project type detected",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should not include hello world button when no project type detected"
          },
          {
            "ancestorTitles": [
              "ManifestoCommand Integration",
              "error handling"
            ],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "ManifestoCommand Integration error handling should handle execution errors gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle execution errors gracefully"
          }
        ],
        "endTime": 1755133310984,
        "message": "\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mManifestoCommand Integration › execute - manifesto generation for empty projects › should detect React project type\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\n    Expected substring: \u001b[32m\"data-action-command=\\\"createHelloWorld\\\"\"\u001b[39m\n    Received string:    \u001b[31m\"📋 **General Manifesto Template**·\u001b[39m\n    \u001b[31m🚀 **Perfect for new projects!** I'll create a comprehensive manifesto template for you.·\u001b[39m\n    \u001b[31m**Detected Project Type:** React·\u001b[39m\n    \u001b[31m**📋 Generated Manifesto Preview:**·\u001b[39m\n    \u001b[31m```markdown\u001b[39m\n    \u001b[31m# General Development Manifesto·\u001b[39m\n    \u001b[31m## CRITICAL INSTRUCTIONS:\u001b[39m\n    \u001b[31mFollow EVERY principle in the manifesto above·\u001b[39m\n    \u001b[31m### 1. CODE QUALITY ENFORCEMENT\u001b[39m\n    \u001b[31m- **MANDATORY:** All code must include comprehensive error handling\u001b[39m\n    \u001b[31m- **MANDATORY:** All public functions require JSDoc documentation\u001b[39m\n    \u001b[31m- **MANDATORY:** All busines...\u001b[39m\n    \u001b[31m```·\u001b[39m\n    \u001b[31m**🎯 Ready to create your manifesto file!**\u001b[39m\n    \u001b[31mClick the button below to create `manifesto.md` in your project root.·\u001b[39m\n    \u001b[31m**Next Steps After Creation:**\u001b[39m\n    \u001b[31m• Create your first file and I'll help you follow these standards\u001b[39m\n    \u001b[31m• Try: \\\"Create a hello world script in [language]\\\"\u001b[39m\n    \u001b[31m• Use `/lint` to check compliance as you code·\u001b[39m\n    \u001b[31m**Actions:**\u001b[39m\n    \u001b[31m<div class=\\\"chat-actions\\\">\u001b[39m\n    \u001b[31m<button class=\\\"action-button success\\\" data-action-command=\\\"createManifesto\\\" data-action-id=\\\"create-manifesto\\\" data-action-data='{\\\"content\\\":\\\"# General Development Manifesto\\\\n\\\\n## CRITICAL INSTRUCTIONS:\\\\nFollow EVERY principle in the manifesto above\\\\n\\\\n### 1. CODE QUALITY ENFORCEMENT\\\\n- **MANDATORY:** All code must include comprehensive error handling\\\\n- **MANDATORY:** All public functions require JSDoc documentation\\\\n- **MANDATORY:** All business logic must have corresponding unit tests\\\\n- **MANDATORY:** Code coverage must be maintained above 80%\\\\n\\\\n### 2. ARCHITECTURE COMPLIANCE\\\\n- **ENFORCE:** SOLID principles in all class designs\\\\n- **ENFORCE:** Dependency injection patterns where applicable\\\\n- **ENFORCE:** Interface-based programming for services\\\\n- **ENFORCE:** Repository pattern for data access\\\\n\\\\n### 3. SECURITY REQUIREMENTS\\\\n- **CRITICAL:** Input validation on all user-facing functions\\\\n- **CRITICAL:** No innerHTML usage (XSS prevention)\\\\n- **CRITICAL:** Proper authentication and authorization\\\\n- **CRITICAL:** Secure data handling and encryption\\\\n\\\\n### 4. REACT SPECIFIC STANDARDS\\\\n- **ENFORCE:** Functional components with hooks\\\\n- **ENFORCE:** PropTypes or TypeScript for type safety\\\\n- **ENFORCE:** React Testing Library for component tests\\\\n- **ENFORCE:** ESLint React rules compliance\\\\n\\\\n### 5. COMPLIANCE VALIDATION\\\\n- **MANDATORY:** All code must pass manifesto compliance checks\\\\n- **MANDATORY:** Use `/lint` command to validate compliance\\\\n- **MANDATORY:** Address all CRITICAL and ENFORCE violations before commit\\\\n- **RECOMMENDED:** Regular code reviews with manifesto focus\\\\n\\\\n---\\\\n*Generated by Piggie Manifesto Enforcer*\\\\n*Customize this manifesto to fit your specific project needs*\\\",\\\"type\\\":\\\"General\\\"}'>📋 Create manifesto.md</button>\u001b[39m\n    \u001b[31m<button class=\\\"action-button secondary\\\" data-action-command=\\\"previewManifesto\\\" data-action-id=\\\"preview-manifesto\\\" data-action-data='{\\\"content\\\":\\\"# General Development Manifesto\\\\n\\\\n## CRITICAL INSTRUCTIONS:\\\\nFollow EVERY principle in the manifesto above\\\\n\\\\n### 1. CODE QUALITY ENFORCEMENT\\\\n- **MANDATORY:** All code must include comprehensive error handling\\\\n- **MANDATORY:** All public functions require JSDoc documentation\\\\n- **MANDATORY:** All business logic must have corresponding unit tests\\\\n- **MANDATORY:** Code coverage must be maintained above 80%\\\\n\\\\n### 2. ARCHITECTURE COMPLIANCE\\\\n- **ENFORCE:** SOLID principles in all class designs\\\\n- **ENFORCE:** Dependency injection patterns where applicable\\\\n- **ENFORCE:** Interface-based programming for services\\\\n- **ENFORCE:** Repository pattern for data access\\\\n\\\\n### 3. SECURITY REQUIREMENTS\\\\n- **CRITICAL:** Input validation on all user-facing functions\\\\n- **CRITICAL:** No innerHTML usage (XSS prevention)\\\\n- **CRITICAL:** Proper authentication and authorization\\\\n- **CRITICAL:** Secure data handling and encryption\\\\n\\\\n### 4. REACT SPECIFIC STANDARDS\\\\n- **ENFORCE:** Functional components with hooks\\\\n- **ENFORCE:** PropTypes or TypeScript for type safety\\\\n- **ENFORCE:** React Testing Library for component tests\\\\n- **ENFORCE:** ESLint React rules compliance\\\\n\\\\n### 5. COMPLIANCE VALIDATION\\\\n- **MANDATORY:** All code must pass manifesto compliance checks\\\\n- **MANDATORY:** Use `/lint` command to validate compliance\\\\n- **MANDATORY:** Address all CRITICAL and ENFORCE violations before commit\\\\n- **RECOMMENDED:** Regular code reviews with manifesto focus\\\\n\\\\n---\\\\n*Generated by Piggie Manifesto Enforcer*\\\\n*Customize this manifesto to fit your specific project needs*\\\",\\\"type\\\":\\\"General\\\"}'>👁️ Preview Full Content</button>\u001b[39m\n    \u001b[31m<button class=\\\"action-button primary\\\" data-action-command=\\\"executeTddWorkflow\\\" data-action-id=\\\"create-hello-world\\\" data-action-data='{\\\"content\\\":\\\"Create a simple 'Hello, World!' script in React.\\\"}'>🚀 Create Hello World (React)</button>\u001b[39m\n    \u001b[31m</div>\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 129 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoContain(\u001b[32m'**Detected Project Type:** React'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 130 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoContain(\u001b[32m'🚀 Create Hello World (React)'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 131 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoContain(\u001b[32m'data-action-command=\"createHelloWorld\"'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 132 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 133 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 134 |\u001b[39m         it(\u001b[32m'should detect Python project type'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/commands/__tests__/ManifestoCommand.integration.test.ts\u001b[39m\u001b[0m\u001b[2m:131:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mManifestoCommand Integration › action button generation › should include hello world button when project type detected\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\n    Expected substring: \u001b[32m\"data-action-command=\\\"createHelloWorld\\\"\"\u001b[39m\n    Received string:    \u001b[31m\"📋 **General Manifesto Template**·\u001b[39m\n    \u001b[31m🚀 **Perfect for new projects!** I'll create a comprehensive manifesto template for you.·\u001b[39m\n    \u001b[31m**Detected Project Type:** TypeScript·\u001b[39m\n    \u001b[31m**📋 Generated Manifesto Preview:**·\u001b[39m\n    \u001b[31m```markdown\u001b[39m\n    \u001b[31m# General Development Manifesto·\u001b[39m\n    \u001b[31m## CRITICAL INSTRUCTIONS:\u001b[39m\n    \u001b[31mFollow EVERY principle in the manifesto above·\u001b[39m\n    \u001b[31m### 1. CODE QUALITY ENFORCEMENT\u001b[39m\n    \u001b[31m- **MANDATORY:** All code must include comprehensive error handling\u001b[39m\n    \u001b[31m- **MANDATORY:** All public functions require JSDoc documentation\u001b[39m\n    \u001b[31m- **MANDATORY:** All busines...\u001b[39m\n    \u001b[31m```·\u001b[39m\n    \u001b[31m**🎯 Ready to create your manifesto file!**\u001b[39m\n    \u001b[31mClick the button below to create `manifesto.md` in your project root.·\u001b[39m\n    \u001b[31m**Next Steps After Creation:**\u001b[39m\n    \u001b[31m• Create your first file and I'll help you follow these standards\u001b[39m\n    \u001b[31m• Try: \\\"Create a hello world script in [language]\\\"\u001b[39m\n    \u001b[31m• Use `/lint` to check compliance as you code·\u001b[39m\n    \u001b[31m**Actions:**\u001b[39m\n    \u001b[31m<div class=\\\"chat-actions\\\">\u001b[39m\n    \u001b[31m<button class=\\\"action-button success\\\" data-action-command=\\\"createManifesto\\\" data-action-id=\\\"create-manifesto\\\" data-action-data='{\\\"content\\\":\\\"# General Development Manifesto\\\\n\\\\n## CRITICAL INSTRUCTIONS:\\\\nFollow EVERY principle in the manifesto above\\\\n\\\\n### 1. CODE QUALITY ENFORCEMENT\\\\n- **MANDATORY:** All code must include comprehensive error handling\\\\n- **MANDATORY:** All public functions require JSDoc documentation\\\\n- **MANDATORY:** All business logic must have corresponding unit tests\\\\n- **MANDATORY:** Code coverage must be maintained above 80%\\\\n\\\\n### 2. ARCHITECTURE COMPLIANCE\\\\n- **ENFORCE:** SOLID principles in all class designs\\\\n- **ENFORCE:** Dependency injection patterns where applicable\\\\n- **ENFORCE:** Interface-based programming for services\\\\n- **ENFORCE:** Repository pattern for data access\\\\n\\\\n### 3. SECURITY REQUIREMENTS\\\\n- **CRITICAL:** Input validation on all user-facing functions\\\\n- **CRITICAL:** No innerHTML usage (XSS prevention)\\\\n- **CRITICAL:** Proper authentication and authorization\\\\n- **CRITICAL:** Secure data handling and encryption\\\\n\\\\n### 4. TYPESCRIPT SPECIFIC STANDARDS\\\\n- **ENFORCE:** Strict TypeScript configuration\\\\n- **ENFORCE:** Interface definitions for all data structures\\\\n- **ENFORCE:** No any types without justification\\\\n- **ENFORCE:** TSDoc comments for public APIs\\\\n\\\\n### 5. COMPLIANCE VALIDATION\\\\n- **MANDATORY:** All code must pass manifesto compliance checks\\\\n- **MANDATORY:** Use `/lint` command to validate compliance\\\\n- **MANDATORY:** Address all CRITICAL and ENFORCE violations before commit\\\\n- **RECOMMENDED:** Regular code reviews with manifesto focus\\\\n\\\\n---\\\\n*Generated by Piggie Manifesto Enforcer*\\\\n*Customize this manifesto to fit your specific project needs*\\\",\\\"type\\\":\\\"General\\\"}'>📋 Create manifesto.md</button>\u001b[39m\n    \u001b[31m<button class=\\\"action-button secondary\\\" data-action-command=\\\"previewManifesto\\\" data-action-id=\\\"preview-manifesto\\\" data-action-data='{\\\"content\\\":\\\"# General Development Manifesto\\\\n\\\\n## CRITICAL INSTRUCTIONS:\\\\nFollow EVERY principle in the manifesto above\\\\n\\\\n### 1. CODE QUALITY ENFORCEMENT\\\\n- **MANDATORY:** All code must include comprehensive error handling\\\\n- **MANDATORY:** All public functions require JSDoc documentation\\\\n- **MANDATORY:** All business logic must have corresponding unit tests\\\\n- **MANDATORY:** Code coverage must be maintained above 80%\\\\n\\\\n### 2. ARCHITECTURE COMPLIANCE\\\\n- **ENFORCE:** SOLID principles in all class designs\\\\n- **ENFORCE:** Dependency injection patterns where applicable\\\\n- **ENFORCE:** Interface-based programming for services\\\\n- **ENFORCE:** Repository pattern for data access\\\\n\\\\n### 3. SECURITY REQUIREMENTS\\\\n- **CRITICAL:** Input validation on all user-facing functions\\\\n- **CRITICAL:** No innerHTML usage (XSS prevention)\\\\n- **CRITICAL:** Proper authentication and authorization\\\\n- **CRITICAL:** Secure data handling and encryption\\\\n\\\\n### 4. TYPESCRIPT SPECIFIC STANDARDS\\\\n- **ENFORCE:** Strict TypeScript configuration\\\\n- **ENFORCE:** Interface definitions for all data structures\\\\n- **ENFORCE:** No any types without justification\\\\n- **ENFORCE:** TSDoc comments for public APIs\\\\n\\\\n### 5. COMPLIANCE VALIDATION\\\\n- **MANDATORY:** All code must pass manifesto compliance checks\\\\n- **MANDATORY:** Use `/lint` command to validate compliance\\\\n- **MANDATORY:** Address all CRITICAL and ENFORCE violations before commit\\\\n- **RECOMMENDED:** Regular code reviews with manifesto focus\\\\n\\\\n---\\\\n*Generated by Piggie Manifesto Enforcer*\\\\n*Customize this manifesto to fit your specific project needs*\\\",\\\"type\\\":\\\"General\\\"}'>👁️ Preview Full Content</button>\u001b[39m\n    \u001b[31m<button class=\\\"action-button primary\\\" data-action-command=\\\"executeTddWorkflow\\\" data-action-id=\\\"create-hello-world\\\" data-action-data='{\\\"content\\\":\\\"Create a simple 'Hello, World!' script in TypeScript.\\\"}'>🚀 Create Hello World (TypeScript)</button>\u001b[39m\n    \u001b[31m</div>\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 312 |\u001b[39m             \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m manifestoCommand\u001b[33m.\u001b[39mexecute(input\u001b[33m,\u001b[39m mockStateManager\u001b[33m,\u001b[39m mockAgentManager)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 313 |\u001b[39m             \u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 314 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoContain(\u001b[32m'data-action-command=\"createHelloWorld\"'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 315 |\u001b[39m             expect(result)\u001b[33m.\u001b[39mtoContain(\u001b[32m'🚀 Create Hello World (TypeScript)'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 316 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 317 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/commands/__tests__/ManifestoCommand.integration.test.ts\u001b[39m\u001b[0m\u001b[2m:314:28)\u001b[22m\u001b[2m\u001b[22m\n",
        "name": "D:\\Manifesto Compliance\\src\\commands\\__tests__\\ManifestoCommand.integration.test.ts",
        "startTime": 1755133309388,
        "status": "failed",
        "summary": ""
      },
      {
        "assertionResults": [],
        "coverage": {},
        "endTime": 1755133312348,
        "message": "  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[96msrc/core/__tests__/ManifestoProtection.test.ts\u001b[0m:\u001b[93m62\u001b[0m:\u001b[93m50\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 2 arguments, but got 1.\n\n    \u001b[7m62\u001b[0m             const result = await autoModeManager.executeAction(action);\n    \u001b[7m  \u001b[0m \u001b[91m                                                 ~~~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/core/AutoModeManager.ts\u001b[0m:\u001b[93m87\u001b[0m:\u001b[93m45\u001b[0m\n        \u001b[7m87\u001b[0m     async executeAction(action: ChatAction, agentManager: AgentManager): Promise<string> {\n        \u001b[7m  \u001b[0m \u001b[96m                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'agentManager' was not provided.\n    \u001b[96msrc/core/__tests__/ManifestoProtection.test.ts\u001b[0m:\u001b[93m87\u001b[0m:\u001b[93m50\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 2 arguments, but got 1.\n\n    \u001b[7m87\u001b[0m             const result = await autoModeManager.executeAction(action);\n    \u001b[7m  \u001b[0m \u001b[91m                                                 ~~~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/core/AutoModeManager.ts\u001b[0m:\u001b[93m87\u001b[0m:\u001b[93m45\u001b[0m\n        \u001b[7m87\u001b[0m     async executeAction(action: ChatAction, agentManager: AgentManager): Promise<string> {\n        \u001b[7m  \u001b[0m \u001b[96m                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'agentManager' was not provided.\n    \u001b[96msrc/core/__tests__/ManifestoProtection.test.ts\u001b[0m:\u001b[93m127\u001b[0m:\u001b[93m50\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 2 arguments, but got 1.\n\n    \u001b[7m127\u001b[0m             const result = await autoModeManager.executeAction(action);\n    \u001b[7m   \u001b[0m \u001b[91m                                                 ~~~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/core/AutoModeManager.ts\u001b[0m:\u001b[93m87\u001b[0m:\u001b[93m45\u001b[0m\n        \u001b[7m87\u001b[0m     async executeAction(action: ChatAction, agentManager: AgentManager): Promise<string> {\n        \u001b[7m  \u001b[0m \u001b[96m                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'agentManager' was not provided.\n    \u001b[96msrc/core/__tests__/ManifestoProtection.test.ts\u001b[0m:\u001b[93m148\u001b[0m:\u001b[93m50\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 2 arguments, but got 1.\n\n    \u001b[7m148\u001b[0m             const result = await autoModeManager.executeAction(action);\n    \u001b[7m   \u001b[0m \u001b[91m                                                 ~~~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/core/AutoModeManager.ts\u001b[0m:\u001b[93m87\u001b[0m:\u001b[93m45\u001b[0m\n        \u001b[7m87\u001b[0m     async executeAction(action: ChatAction, agentManager: AgentManager): Promise<string> {\n        \u001b[7m  \u001b[0m \u001b[96m                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'agentManager' was not provided.\n    \u001b[96msrc/core/__tests__/ManifestoProtection.test.ts\u001b[0m:\u001b[93m175\u001b[0m:\u001b[93m50\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 2 arguments, but got 1.\n\n    \u001b[7m175\u001b[0m             const result = await autoModeManager.executeAction(action);\n    \u001b[7m   \u001b[0m \u001b[91m                                                 ~~~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/core/AutoModeManager.ts\u001b[0m:\u001b[93m87\u001b[0m:\u001b[93m45\u001b[0m\n        \u001b[7m87\u001b[0m     async executeAction(action: ChatAction, agentManager: AgentManager): Promise<string> {\n        \u001b[7m  \u001b[0m \u001b[96m                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'agentManager' was not provided.\n    \u001b[96msrc/core/__tests__/ManifestoProtection.test.ts\u001b[0m:\u001b[93m200\u001b[0m:\u001b[93m50\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 2 arguments, but got 1.\n\n    \u001b[7m200\u001b[0m             const result = await autoModeManager.executeAction(action);\n    \u001b[7m   \u001b[0m \u001b[91m                                                 ~~~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/core/AutoModeManager.ts\u001b[0m:\u001b[93m87\u001b[0m:\u001b[93m45\u001b[0m\n        \u001b[7m87\u001b[0m     async executeAction(action: ChatAction, agentManager: AgentManager): Promise<string> {\n        \u001b[7m  \u001b[0m \u001b[96m                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'agentManager' was not provided.\n    \u001b[96msrc/core/__tests__/ManifestoProtection.test.ts\u001b[0m:\u001b[93m220\u001b[0m:\u001b[93m54\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 2 arguments, but got 1.\n\n    \u001b[7m220\u001b[0m                 const result = await autoModeManager.executeAction(action);\n    \u001b[7m   \u001b[0m \u001b[91m                                                     ~~~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/core/AutoModeManager.ts\u001b[0m:\u001b[93m87\u001b[0m:\u001b[93m45\u001b[0m\n        \u001b[7m87\u001b[0m     async executeAction(action: ChatAction, agentManager: AgentManager): Promise<string> {\n        \u001b[7m  \u001b[0m \u001b[96m                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'agentManager' was not provided.\n    \u001b[96msrc/core/__tests__/ManifestoProtection.test.ts\u001b[0m:\u001b[93m248\u001b[0m:\u001b[93m54\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 2 arguments, but got 1.\n\n    \u001b[7m248\u001b[0m                 const result = await autoModeManager.executeAction(action);\n    \u001b[7m   \u001b[0m \u001b[91m                                                     ~~~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/core/AutoModeManager.ts\u001b[0m:\u001b[93m87\u001b[0m:\u001b[93m45\u001b[0m\n        \u001b[7m87\u001b[0m     async executeAction(action: ChatAction, agentManager: AgentManager): Promise<string> {\n        \u001b[7m  \u001b[0m \u001b[96m                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'agentManager' was not provided.\n    \u001b[96msrc/core/__tests__/ManifestoProtection.test.ts\u001b[0m:\u001b[93m274\u001b[0m:\u001b[93m50\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 2 arguments, but got 1.\n\n    \u001b[7m274\u001b[0m             const result = await autoModeManager.executeAction(action);\n    \u001b[7m   \u001b[0m \u001b[91m                                                 ~~~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/core/AutoModeManager.ts\u001b[0m:\u001b[93m87\u001b[0m:\u001b[93m45\u001b[0m\n        \u001b[7m87\u001b[0m     async executeAction(action: ChatAction, agentManager: AgentManager): Promise<string> {\n        \u001b[7m  \u001b[0m \u001b[96m                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'agentManager' was not provided.\n    \u001b[96msrc/core/__tests__/ManifestoProtection.test.ts\u001b[0m:\u001b[93m297\u001b[0m:\u001b[93m50\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 2 arguments, but got 1.\n\n    \u001b[7m297\u001b[0m             const result = await autoModeManager.executeAction(action);\n    \u001b[7m   \u001b[0m \u001b[91m                                                 ~~~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/core/AutoModeManager.ts\u001b[0m:\u001b[93m87\u001b[0m:\u001b[93m45\u001b[0m\n        \u001b[7m87\u001b[0m     async executeAction(action: ChatAction, agentManager: AgentManager): Promise<string> {\n        \u001b[7m  \u001b[0m \u001b[96m                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'agentManager' was not provided.\n",
        "name": "D:\\Manifesto Compliance\\src\\core\\__tests__\\ManifestoProtection.test.ts",
        "startTime": 1755133312348,
        "status": "failed",
        "summary": ""
      },
      {
        "assertionResults": [],
        "coverage": {},
        "endTime": 1755133312348,
        "message": "  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[96msrc/core/__tests__/AutoModeManager.test.ts\u001b[0m:\u001b[93m112\u001b[0m:\u001b[93m50\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 2 arguments, but got 1.\n\n    \u001b[7m112\u001b[0m             const result = await autoModeManager.processAction(action);\n    \u001b[7m   \u001b[0m \u001b[91m                                                 ~~~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/core/AutoModeManager.ts\u001b[0m:\u001b[93m54\u001b[0m:\u001b[93m45\u001b[0m\n        \u001b[7m54\u001b[0m     async processAction(action: ChatAction, agentManager: AgentManager): Promise<AutoModeResult> {\n        \u001b[7m  \u001b[0m \u001b[96m                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'agentManager' was not provided.\n    \u001b[96msrc/core/__tests__/AutoModeManager.test.ts\u001b[0m:\u001b[93m129\u001b[0m:\u001b[93m50\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 2 arguments, but got 1.\n\n    \u001b[7m129\u001b[0m             const result = await autoModeManager.processAction(action);\n    \u001b[7m   \u001b[0m \u001b[91m                                                 ~~~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/core/AutoModeManager.ts\u001b[0m:\u001b[93m54\u001b[0m:\u001b[93m45\u001b[0m\n        \u001b[7m54\u001b[0m     async processAction(action: ChatAction, agentManager: AgentManager): Promise<AutoModeResult> {\n        \u001b[7m  \u001b[0m \u001b[96m                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'agentManager' was not provided.\n    \u001b[96msrc/core/__tests__/AutoModeManager.test.ts\u001b[0m:\u001b[93m146\u001b[0m:\u001b[93m50\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 2 arguments, but got 1.\n\n    \u001b[7m146\u001b[0m             const result = await autoModeManager.executeAction(action);\n    \u001b[7m   \u001b[0m \u001b[91m                                                 ~~~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/core/AutoModeManager.ts\u001b[0m:\u001b[93m87\u001b[0m:\u001b[93m45\u001b[0m\n        \u001b[7m87\u001b[0m     async executeAction(action: ChatAction, agentManager: AgentManager): Promise<string> {\n        \u001b[7m  \u001b[0m \u001b[96m                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'agentManager' was not provided.\n    \u001b[96msrc/core/__tests__/AutoModeManager.test.ts\u001b[0m:\u001b[93m160\u001b[0m:\u001b[93m50\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 2 arguments, but got 1.\n\n    \u001b[7m160\u001b[0m             const result = await autoModeManager.executeAction(action);\n    \u001b[7m   \u001b[0m \u001b[91m                                                 ~~~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/core/AutoModeManager.ts\u001b[0m:\u001b[93m87\u001b[0m:\u001b[93m45\u001b[0m\n        \u001b[7m87\u001b[0m     async executeAction(action: ChatAction, agentManager: AgentManager): Promise<string> {\n        \u001b[7m  \u001b[0m \u001b[96m                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'agentManager' was not provided.\n    \u001b[96msrc/core/__tests__/AutoModeManager.test.ts\u001b[0m:\u001b[93m175\u001b[0m:\u001b[93m50\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 2 arguments, but got 1.\n\n    \u001b[7m175\u001b[0m             const result = await autoModeManager.executeAction(action);\n    \u001b[7m   \u001b[0m \u001b[91m                                                 ~~~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/core/AutoModeManager.ts\u001b[0m:\u001b[93m87\u001b[0m:\u001b[93m45\u001b[0m\n        \u001b[7m87\u001b[0m     async executeAction(action: ChatAction, agentManager: AgentManager): Promise<string> {\n        \u001b[7m  \u001b[0m \u001b[96m                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'agentManager' was not provided.\n    \u001b[96msrc/core/__tests__/AutoModeManager.test.ts\u001b[0m:\u001b[93m190\u001b[0m:\u001b[93m50\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 2 arguments, but got 1.\n\n    \u001b[7m190\u001b[0m             const result = await autoModeManager.executeAction(action);\n    \u001b[7m   \u001b[0m \u001b[91m                                                 ~~~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/core/AutoModeManager.ts\u001b[0m:\u001b[93m87\u001b[0m:\u001b[93m45\u001b[0m\n        \u001b[7m87\u001b[0m     async executeAction(action: ChatAction, agentManager: AgentManager): Promise<string> {\n        \u001b[7m  \u001b[0m \u001b[96m                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'agentManager' was not provided.\n    \u001b[96msrc/core/__tests__/AutoModeManager.test.ts\u001b[0m:\u001b[93m204\u001b[0m:\u001b[93m42\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 2 arguments, but got 1.\n\n    \u001b[7m204\u001b[0m             await expect(autoModeManager.executeAction(action)).rejects.toThrow('Unknown action command: unknownCommand');\n    \u001b[7m   \u001b[0m \u001b[91m                                         ~~~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/core/AutoModeManager.ts\u001b[0m:\u001b[93m87\u001b[0m:\u001b[93m45\u001b[0m\n        \u001b[7m87\u001b[0m     async executeAction(action: ChatAction, agentManager: AgentManager): Promise<string> {\n        \u001b[7m  \u001b[0m \u001b[96m                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'agentManager' was not provided.\n    \u001b[96msrc/core/__tests__/AutoModeManager.test.ts\u001b[0m:\u001b[93m227\u001b[0m:\u001b[93m42\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 2 arguments, but got 1.\n\n    \u001b[7m227\u001b[0m             await expect(autoModeManager.executeAction(action)).rejects.toThrow('Permission denied');\n    \u001b[7m   \u001b[0m \u001b[91m                                         ~~~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/core/AutoModeManager.ts\u001b[0m:\u001b[93m87\u001b[0m:\u001b[93m45\u001b[0m\n        \u001b[7m87\u001b[0m     async executeAction(action: ChatAction, agentManager: AgentManager): Promise<string> {\n        \u001b[7m  \u001b[0m \u001b[96m                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'agentManager' was not provided.\n",
        "name": "D:\\Manifesto Compliance\\src\\core\\__tests__\\AutoModeManager.test.ts",
        "startTime": 1755133312348,
        "status": "failed",
        "summary": ""
      }
    ]
  },
  "mocha": {
    "success": true,
    "stats": {
      "tests": 85,
      "passes": 85,
      "failures": 0,
      "pending": 0,
      "duration": 47000
    },
    "tests": [],
    "failures": []
  }
}