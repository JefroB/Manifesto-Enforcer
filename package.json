{
  "name": "manifesto-enforcer",
  "displayName": "Manifesto Enforcer",
  "description": "üê∑ [ALPHA v0.0.1] Meet Piggie! Your compliance-enforcing AI coding assistant. Uses your manifesto to enforce coding compliance. ‚ö†Ô∏è Super early alpha - not user tested!",
  "version": "0.0.71-alpha",
  "publisher": "manifesto-enforcer",
  "repository": {
    "type": "git",
    "url": "https://github.com/manifesto-dev/manifesto-code-assistant-pro.git"
  },
  "engines": {
    "vscode": "^1.84.0"
  },
  "categories": [
    "AI",
    "Other",
    "Testing"
  ],
  "keywords": [
    "ai",
    "manifesto",
    "coding-assistant",
    "multi-agent",
    "tdd",
    "claude",
    "augment",
    "amazon-q"
  ],
  "activationEvents": [
    "onStartupFinished",
    "onCommand:manifestoEnforcer.toggleManifestoMode",
    "onCommand:manifestoEnforcer.switchAgent",
    "onCommand:manifestoEnforcer.quickChat",
    "onCommand:manifestoEnforcer.writeCode",
    "onCommand:manifestoEnforcer.createManifesto",
    "onCommand:manifestoEnforcer.validateCompliance",
    "onCommand:manifestoEnforcer.openSettings",
    "onCommand:manifestoEnforcer.testConnection",
    "onCommand:manifesto-enforcer.validateCommit",
    "onCommand:manifesto-enforcer.enforceCompliance",
    "onCommand:manifesto-enforcer.verifyAIResponse",
    "onLanguage:typescript",
    "onLanguage:javascript",
    "onLanguage:python",
    "onLanguage:java",
    "onLanguage:csharp",
    "workspaceContains:**/manifesto.md",
    "workspaceContains:**/.manifesto"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "manifestoEnforcer.toggleManifestoMode",
        "title": "üõ°Ô∏è Toggle Manifesto Mode",
        "icon": "$(shield)"
      },
      {
        "command": "manifestoEnforcer.switchAgent",
        "title": "üê∑ Switch Piggie's Brain (AI Agent)",
        "icon": "$(shield)"
      },
      {
        "command": "manifestoEnforcer.quickChat",
        "title": "‚ö° Quick Chat with Piggie",
        "icon": "$(comment)"
      },
      {
        "command": "manifestoEnforcer.writeCode",
        "title": "üìù Piggie: Write Code",
        "icon": "$(edit)"
      },
      {
        "command": "manifestoEnforcer.openChat",
        "title": "üí¨ Chat with Piggie",
        "icon": "$(comment-discussion)"
      },
      {
        "command": "manifestoEnforcer.validateCompliance",
        "title": "‚úÖ Piggie: Validate Manifesto Compliance",
        "icon": "$(check)"
      },
      {
        "command": "manifestoEnforcer.createManifesto",
        "title": "üìù Create New Manifesto",
        "icon": "$(new-file)"
      },
      {
        "command": "manifestoEnforcer.openSettings",
        "title": "‚öôÔ∏è Piggie Settings",
        "icon": "$(settings-gear)"
      },
      {
        "command": "manifestoEnforcer.settings.testConnection",
        "title": "üîß Test Piggie Connection (Settings)",
        "icon": "$(debug)"
      },
      {
        "command": "manifestoEnforcer.settings.discoverAPIs",
        "title": "üîç Discover AI Agent APIs (Settings)",
        "icon": "$(search)"
      },
      {
        "command": "manifestoEnforcer.reviewSelectedCode",
        "title": "üê∑ Piggie: Review Selected Code",
        "icon": "$(shield)"
      },
      {
        "command": "manifestoEnforcer.refactorSelectedCode",
        "title": "üê∑ Piggie: Refactor Selected Code",
        "icon": "$(edit)"
      },
      {
        "command": "manifestoEnforcer.explainSelectedCode",
        "title": "üê∑ Piggie: Explain Selected Code",
        "icon": "$(question)"
      },
      {
        "command": "manifestoEnforcer.sendToAmazonQ",
        "title": "üê∑ Send to Amazon Q (Manifesto Enhanced)",
        "icon": "$(cloud)"
      },
      {
        "command": "manifestoEnforcer.refreshManifesto",
        "title": "Refresh Manifesto",
        "icon": "$(refresh)"
      },
      {
        "command": "manifestoEnforcer.refreshGlossary",
        "title": "Refresh Glossary",
        "icon": "$(refresh)"
      },
      {
        "command": "manifestoEnforcer.addGlossaryTermFromTree",
        "title": "Add Term",
        "icon": "$(add)"
      },
      {
        "command": "manifestoEnforcer.removeGlossaryTerm",
        "title": "Remove Term",
        "icon": "$(trash)"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "manifesto-enforcer",
          "title": "Manifesto Enforcer",
          "icon": "$(shield)"
        }
      ]
    },
    "views": {
      "manifesto-enforcer": [
        {
          "id": "manifestoView",
          "name": "üìã Manifesto"
        },
        {
          "id": "glossaryView",
          "name": "üìñ Glossary"
        },
        {
          "id": "piggieChatPanel",
          "name": "üí¨ Chat with Piggie",
          "type": "webview"
        },
        {
          "id": "piggieActions",
          "name": "üê∑ Piggie Actions"
        },
        {
          "id": "manifestoRules",
          "name": "üõ°Ô∏è Manifesto Rules"
        },
        {
          "id": "piggieSecurityReview",
          "name": "üîí Security Review"
        }
      ]
    },
    "menus": {
      "view/title": [
        {
          "command": "manifestoEnforcer.refreshManifesto",
          "when": "view == manifestoView",
          "group": "navigation"
        },
        {
          "command": "manifestoEnforcer.refreshGlossary",
          "when": "view == glossaryView",
          "group": "navigation"
        },
        {
          "command": "manifestoEnforcer.addGlossaryTermFromTree",
          "when": "view == glossaryView",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "manifestoEnforcer.removeGlossaryTerm",
          "when": "view == glossaryView && viewItem == term",
          "group": "inline"
        }
      ],
      "editor/context": [
        {
          "command": "manifestoEnforcer.reviewSelectedCode",
          "when": "editorHasSelection",
          "group": "piggie@1"
        },
        {
          "command": "manifestoEnforcer.refactorSelectedCode",
          "when": "editorHasSelection",
          "group": "piggie@2"
        },
        {
          "command": "manifestoEnforcer.explainSelectedCode",
          "when": "editorHasSelection",
          "group": "piggie@3"
        },
        {
          "command": "manifestoEnforcer.sendToAmazonQ",
          "when": "editorHasSelection",
          "group": "piggie@4"
        }
      ]
    },
    "configuration": {
      "title": "Manifesto Enforcer",
      "properties": {
        "manifestoEnforcer.manifestoMode": {
          "type": "string",
          "default": "developer",
          "enum": [
            "developer",
            "qa",
            "solo"
          ],
          "enumDescriptions": [
            "Developer mode - uses manifesto-dev.md",
            "QA mode - uses manifesto-qa.md",
            "Solo Dev mode - merges both manifestos"
          ],
          "description": "Manifesto enforcement mode",
          "scope": "resource"
        },
        "manifestoEnforcer.devManifestoPath": {
          "type": "string",
          "default": "manifesto-dev.md",
          "description": "Path to the development manifesto file",
          "scope": "resource"
        },
        "manifestoEnforcer.qaManifestoPath": {
          "type": "string",
          "default": "manifesto-qa.md",
          "description": "Path to the QA manifesto file",
          "scope": "resource"
        },
        "manifestoEnforcer.manifestoPath": {
          "type": "string",
          "default": "manifesto.md",
          "description": "Path to the legacy manifesto file (deprecated)",
          "scope": "resource"
        },
        "manifestoEnforcer.defaultAgent": {
          "type": "string",
          "default": "auggie",
          "enum": [
            "auggie",
            "amazon-q",
            "cline",
            "copilot",
            "openai",
            "local"
          ],
          "description": "Default AI agent for Piggie to use"
        },
        "manifestoEnforcer.strictMode": {
          "type": "boolean",
          "default": true,
          "description": "Enable strict manifesto compliance checking"
        },
        "manifestoEnforcer.autoWriteCode": {
          "type": "boolean",
          "default": false,
          "description": "Let Piggie automatically write code to files (requires confirmation)"
        },
        "manifestoEnforcer.performanceMonitoring": {
          "type": "boolean",
          "default": true,
          "description": "Monitor Piggie's response times (manifesto requirement)"
        },
        "manifestoEnforcer.debugMode": {
          "type": "boolean",
          "default": false,
          "description": "Enable debug mode with detailed logging"
        },
        "manifestoEnforcer.connectionTimeout": {
          "type": "number",
          "default": 5000,
          "description": "Timeout for agent connections (milliseconds)"
        },
        "manifestoEnforcer.testConnectionButton": {
          "type": "boolean",
          "default": true,
          "description": "Show Test Connection button in settings",
          "scope": "application"
        },
        "manifestoEnforcer.discoverAPIsButton": {
          "type": "boolean",
          "default": true,
          "description": "Show Discover APIs button in settings",
          "scope": "application"
        },
        "manifestoEnforcer.defaultMode": {
          "type": "string",
          "default": "chat",
          "enum": [
            "chat",
            "agent"
          ],
          "description": "Default mode for Piggie: 'chat' for explanations only, 'agent' for performing actions"
        },
        "manifestoEnforcer.manifestoMode": {
          "type": "string",
          "default": "developer",
          "enum": [
            "developer",
            "qa",
            "solo"
          ],
          "enumDescriptions": [
            "Developer mode - uses manifesto-dev.md",
            "QA mode - uses manifesto-qa.md",
            "Solo Dev mode - merges both manifestos"
          ],
          "description": "Manifesto enforcement mode"
        },
        "manifestoEnforcer.devManifestoPath": {
          "type": "string",
          "default": "manifesto-dev.md",
          "description": "Path to developer manifesto file"
        },
        "manifestoEnforcer.qaManifestoPath": {
          "type": "string",
          "default": "manifesto-qa.md",
          "description": "Path to QA manifesto file"
        },
        "manifestoEnforcer.autoMode": {
          "type": "boolean",
          "default": false,
          "description": "Auto mode: automatically execute commands without confirmation (default: false for safety)"
        },
        "manifestoEnforcer.isTddMode": {
          "type": "boolean",
          "default": false,
          "description": "Enable Test-Driven Development mode for code generation"
        },
        "manifestoEnforcer.isUiTddMode": {
          "type": "boolean",
          "default": false,
          "description": "Enable UI testing in TDD mode"
        },
        "manifestoEnforcer.techStack": {
          "type": "string",
          "default": "",
          "description": "Current project tech stack (auto-detected or manually set)"
        },
        "manifestoEnforcer.testFramework": {
          "type": "string",
          "default": "",
          "description": "Test framework for TDD mode (auto-detected or manually set)"
        },
        "manifestoEnforcer.uiTestFramework": {
          "type": "string",
          "default": "",
          "description": "UI test framework for TDD mode (auto-detected or manually set)"
        },
        "manifestoEnforcer.fontSize": {
          "type": "string",
          "default": "medium",
          "enum": [
            "small",
            "medium",
            "large"
          ],
          "description": "Font size for chat messages: small, medium, or large"
        },
        "manifestoEnforcer.showEmojis": {
          "type": "boolean",
          "default": true,
          "description": "Show emojis in chat responses (default: true)"
        },
        "manifestoEnforcer.currentAgent": {
          "type": "string",
          "default": "cline",
          "enum": [
            "auggie",
            "amazon-q",
            "cline",
            "copilot",
            "openai",
            "local"
          ],
          "description": "Currently selected AI agent for Piggie"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "compile:vscode-test": "tsc -p ./tsconfig.vscode-test.json",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node scripts/run-all-tests.js --skip-auggie",
    "test:coverage": "node scripts/run-all-tests.js --coverage --skip-auggie",
    "test:with-auggie": "node scripts/run-all-tests.js --with-auggie",
    "test:jest": "node scripts/run-all-tests.js --jest-only",
    "test:jest:coverage": "node scripts/run-all-tests.js --jest-only --coverage",
    "test:mocha": "node scripts/run-all-tests.js --mocha-only --skip-auggie",
    "test:mocha:with-auggie": "node scripts/run-all-tests.js --mocha-only --with-auggie",
    "test:watch": "jest --watch",
    "test:integration": "npm run compile:vscode-test && node ./out/test/runTest.js",
    "test:integration:no-auggie": "npm run compile:vscode-test && cross-env SKIP_AUGGIE_TESTS=true node ./out/test/runTest.js",
    "test:all": "node scripts/run-all-tests.js --skip-auggie",
    "test:all:coverage": "node scripts/run-all-tests.js --coverage --skip-auggie",
    "test:all:with-auggie": "node scripts/run-all-tests.js --with-auggie",
    "test:fallback": "node test-with-fallback.js",
    "test:fallback:jest-only": "node test-with-fallback.js --jest-only",
    "test:fallback:coverage": "node test-with-fallback.js --coverage",
    "test:jest-safe": "node test-jest-only.js",
    "test:jest-safe:coverage": "node test-jest-only.js --coverage",
    "test:report": "node scripts/generate-html-report.js"
  },
  "devDependencies": {
    "@types/glob": "^7.2.0",
    "@types/jest": "^29.5.14",
    "@types/mocha": "^10.0.10",
    "@types/node": "18.x",
    "@types/sinon": "^17.0.4",
    "@types/vscode": "^1.84.0",
    "@typescript-eslint/eslint-plugin": "^6.13.1",
    "@typescript-eslint/parser": "^6.13.1",
    "@vscode/test-electron": "^2.5.2",
    "cross-env": "^10.0.0",
    "eslint": "^8.54.0",
    "glob": "^11.0.3",
    "jest": "^29.5.0",
    "mocha": "^11.7.1",
    "sinon": "^21.0.0",
    "ts-jest": "^29.1.0"
  },
  "dependencies": {
    "crypto": "^1.0.1",
    "typescript": "^5.3.2"
  }
}
